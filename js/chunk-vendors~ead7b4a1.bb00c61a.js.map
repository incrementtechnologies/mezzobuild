{"version":3,"sources":["webpack:///./node_modules/node-forge/lib/aes.js","webpack:///./node_modules/node-forge/lib/hmac.js","webpack:///./node_modules/node-forge/lib/cipher.js","webpack:///./node_modules/node-forge/lib/baseN.js","webpack:///./node_modules/node-forge/lib/des.js","webpack:///./node_modules/node-forge/lib/asn1-validator.js","webpack:///./node_modules/node-forge/lib/index.js","webpack:///./node_modules/node-forge/lib/asn1.js","webpack:///./node_modules/node-fetch/browser.js","webpack:///./node_modules/node-forge/lib/cipherModes.js","webpack:///./node_modules/node-forge/lib/ed25519.js","webpack:///./node_modules/node-forge/lib/jsbn.js","webpack:///./node_modules/node-forge/lib/forge.js","webpack:///./node_modules/node-forge/lib/aesCipherSuites.js"],"names":["forge","registerAlgorithm","name","mode","factory","aes","Algorithm","cipher","module","exports","startEncrypting","key","iv","output","_createCipher","decrypt","start","createEncryptionCipher","startDecrypting","createDecryptionCipher","init","initialize","self","this","blockSize","encrypt","inBlock","outBlock","_updateBlock","_w","_init","prototype","options","tmp","length","util","isArray","createBuffer","i","putByte","len","push","getInt32","Error","encryptOp","indexOf","_expandKey","modes","ecb","cbc","cfb","ofb","ctr","gcm","sbox","isbox","rcon","mix","imix","Nb","xtime","Array","e2","e4","e8","sx","sx2","me","ime","e","ei","n","temp","w","slice","iNk","Nk","Nr1","end","m0","m1","m2","m3","wnew","wi","input","sub","a","b","c","d","a2","b2","c2","Nr","round","toUpperCase","algorithm","createDecipher","createCipher","ByteBuffer","call","hmac","create","_key","_md","_ipadding","_opadding","ctx","md","toLowerCase","algorithms","keylen","blockLength","update","bytes","digest","at","inner","getMac","api","getAlgorithm","BlockCipher","_finish","_input","_op","_decrypt","opts","putBuffer","compact","finish","pad","unpad","overflow","afterFinish","_reverseAlphabets","_encodeWithByteBuffer","alphabet","base","first","charAt","digits","j","carry","encode","maxline","TypeError","undefined","Uint8Array","regex","RegExp","match","join","decode","table","charCodeAt","replace","value","k","Buffer","from","reverse","des","_keys","_createKeys","spfunction1","spfunction2","spfunction3","spfunction4","spfunction5","spfunction6","spfunction7","spfunction8","pc2bytes0","pc2bytes1","pc2bytes2","pc2bytes3","pc2bytes4","pc2bytes5","pc2bytes6","pc2bytes7","pc2bytes8","pc2bytes9","pc2bytes10","pc2bytes11","pc2bytes12","pc2bytes13","iterations","keys","shifts","left","right","lefttmp","righttmp","looping","endloop","loopinc","right1","right2","asn1","privateKeyValidator","tagClass","Class","UNIVERSAL","type","Type","SEQUENCE","constructed","INTEGER","capture","OID","OCTETSTRING","publicKeyValidator","captureAsn1","BITSTRING","composed","captureBitStringValue","_checkBufferLength","remaining","error","available","requested","APPLICATION","CONTEXT_SPECIFIC","PRIVATE","NONE","BOOLEAN","NULL","ODESC","EXTERNAL","REAL","ENUMERATED","EMBEDDED","UTF8","ROID","SET","PRINTABLESTRING","IA5STRING","UTCTIME","GENERALIZEDTIME","BMPSTRING","obj","bitStringContents","original","copy","excludeBitStringContents","equals","obj1","obj2","equal","includeBitStringContents","getBerValueLength","getByte","longForm","getInt","_getValueLength","longFormBytes","_fromDer","depth","b1","strict","String","fromCharCode","getBytes","decodeBitStrings","savedRead","read","savedRemaining","unused","subOptions","used","tc","ex","getInt16","asn1Options","fromDer","parseAllBytes","byteCount","toDer","useBitStringContents","putBytes","putInt16","substr","lenBytes","oidToDer","oid","last","valueBytes","values","split","parseInt","derToOid","Math","floor","utcTimeToDate","utc","date","Date","year","MM","DD","hh","mm","ss","setUTCFullYear","setUTCHours","hhoffset","mmoffset","offset","setTime","generalizedTimeToDate","gentime","YYYY","fff","isUTC","parseFloat","setFullYear","setHours","dateToUtcTime","rval","format","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","dateToGeneralizedTime","integerToDer","x","putSignedInt","integer","derToInteger","getSignedInt","validate","v","errors","optional","captureBitStringContents","_nonLatinRegex","prettyPrint","level","indentation","indent","IA5String","subvalues","pki","oids","bytesToHex","test","decodeUtf8","message","getGlobal","window","global","globalObject","fetch","default","bind","Headers","Request","Response","transformIV","ints","blocks","inc32","block","from64To32","num","_ints","_inBlock","_outBlock","putInt32","padding","fillWithByte","count","truncate","_prev","_iv","_partialBlock","_partialOutput","_partialBytes","inputLength","partialBytes","clear","_R","additionalData","_cipherLength","_tagLength","tagLength","_tag","tag","_hashBlock","_hashSubkey","componentBits","_m","generateHashTable","ivLength","_j0","ghash","concat","_aDataLength","_s","lengths","multiply","y","z_i","v_i","x_i","pow","out","lsb","tableMultiply","z","idx","ah","h","bits","multiplier","perInt","size","m","shft","generateSubHashTable","mid","half","m_i","m_j","asn1Validator","BigInteger","jsbn","NativeBuffer","ed25519","messageToNativeBuffer","encoding","buffer","constants","PUBLIC_KEY_BYTE_LENGTH","PRIVATE_KEY_BYTE_LENGTH","SEED_BYTE_LENGTH","SIGN_BYTE_LENGTH","HASH_BYTE_LENGTH","generateKeyPair","seed","random","getBytesSync","pk","sk","crypto_sign_keypair","publicKey","privateKey","privateKeyFromAsn1","valid","privateKeyOid","ed25519Oid","EdDSA25519","privateKeyBytes","publicKeyFromAsn1","publicKeyOid","publicKeyBytes","ed25519PublicKey","publicKeyFromPrivateKey","sign","msg","keyPair","signedMsg","crypto_sign","sig","verify","signature","sm","crypto_sign_open","gf0","gf","gf1","D","D2","X","Y","L","Float64Array","I","sha512","msgLen","hash","p","scalarbase","pack","smlen","r","subarray","reduce","modL","mlen","t","q","unpackneg","scalarmult","add","crypto_verify_32","f","g","Z","M","A","cswap","sel25519","tx","ty","zi","inv25519","pack25519","par25519","o","car25519","chk","den","den2","den4","den6","set25519","unpack25519","S","pow2523","neq25519","xi","yi","vn","s","t0","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","b0","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","dbits","canary","j_lm","data","fromNumber","fromString","nbi","am1","am2","xl","xh","l","am3","am","navigator","appName","DB","DM","DV","BI_FP","FV","F1","F2","rr","vv","BI_RM","BI_RC","int2char","intAt","bnpCopyTo","bnpFromInt","nbv","fromInt","bnpFromString","fromRadix","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toString","toRadix","km","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","bnpSquareTo","bnpDivRemTo","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","cSqrTo","squareTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","r2","convert","sqrTo","mulTo","revert","bnModPowInt","isEven","exp","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","bitLength","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","subtract","modPowInt","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","prng","bnGetPrng","modPow","byteValue","shortValue","toByteArray","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","remainder","divideAndRemainder","modInverse","gcd","usePureJavaScript","tls","initConnectionState","state","sp","client","entity","ConnectionEnd","cipherState","server_write_key","client_write_key","server_write_IV","client_write_IV","write","cipherFunction","decrypt_aes_cbc_sha1","encrypt_aes_cbc_sha1","macLength","mac_length","macFunction","hmac_sha1","record","mac","macKey","sequenceNumber","fragment","updateSequenceNumber","version","minor","Versions","TLS_1_0","TLS_1_1","encrypt_aes_cbc_sha1_padding","decrypt_aes_cbc_sha1_padding","paddingLength","macLen","mac2","compareMacs","mac1","CipherSuites","id","initSecurityParameters","bulk_cipher_algorithm","BulkCipherAlgorithm","cipher_type","CipherType","enc_key_length","block_length","fixed_iv_length","record_iv_length","mac_algorithm","MACAlgorithm","mac_key_length"],"mappings":"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","file":"js/chunk-vendors~ead7b4a1.bb00c61a.js","sourcesContent":["/**\n * Advanced Encryption Standard (AES) implementation.\n *\n * This implementation is based on the public domain library 'jscrypto' which\n * was written by:\n *\n * Emily Stark (estark@stanford.edu)\n * Mike Hamburg (mhamburg@stanford.edu)\n * Dan Boneh (dabo@cs.stanford.edu)\n *\n * Parts of this code are based on the OpenSSL implementation of AES:\n * http://www.openssl.org\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./cipher');\nrequire('./cipherModes');\nrequire('./util');\n\n/* AES API */\nmodule.exports = forge.aes = forge.aes || {};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('AES-<mode>', key);\n * cipher.start({iv: iv});\n *\n * Creates an AES cipher object to encrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as a string of bytes, an array of bytes,\n * a byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.aes.startEncrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: false,\n    mode: mode\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('AES-<mode>', key);\n *\n * Creates an AES cipher object to encrypt data using the given symmetric key.\n *\n * The key may be given as a string of bytes, an array of bytes, a\n * byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.aes.createEncryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: false,\n    mode: mode\n  });\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('AES-<mode>', key);\n * decipher.start({iv: iv});\n *\n * Creates an AES cipher object to decrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as a string of bytes, an array of bytes,\n * a byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.aes.startDecrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: true,\n    mode: mode\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('AES-<mode>', key);\n *\n * Creates an AES cipher object to decrypt data using the given symmetric key.\n *\n * The key may be given as a string of bytes, an array of bytes, a\n * byte buffer, or an array of 32-bit words.\n *\n * @param key the symmetric key to use.\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.aes.createDecryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: true,\n    mode: mode\n  });\n};\n\n/**\n * Creates a new AES cipher algorithm object.\n *\n * @param name the name of the algorithm.\n * @param mode the mode factory function.\n *\n * @return the AES algorithm object.\n */\nforge.aes.Algorithm = function(name, mode) {\n  if(!init) {\n    initialize();\n  }\n  var self = this;\n  self.name = name;\n  self.mode = new mode({\n    blockSize: 16,\n    cipher: {\n      encrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._w, inBlock, outBlock, false);\n      },\n      decrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._w, inBlock, outBlock, true);\n      }\n    }\n  });\n  self._init = false;\n};\n\n/**\n * Initializes this AES algorithm by expanding its key.\n *\n * @param options the options to use.\n *          key the key to use with this algorithm.\n *          decrypt true if the algorithm should be initialized for decryption,\n *            false for encryption.\n */\nforge.aes.Algorithm.prototype.initialize = function(options) {\n  if(this._init) {\n    return;\n  }\n\n  var key = options.key;\n  var tmp;\n\n  /* Note: The key may be a string of bytes, an array of bytes, a byte\n    buffer, or an array of 32-bit integers. If the key is in bytes, then\n    it must be 16, 24, or 32 bytes in length. If it is in 32-bit\n    integers, it must be 4, 6, or 8 integers long. */\n\n  if(typeof key === 'string' &&\n    (key.length === 16 || key.length === 24 || key.length === 32)) {\n    // convert key string into byte buffer\n    key = forge.util.createBuffer(key);\n  } else if(forge.util.isArray(key) &&\n    (key.length === 16 || key.length === 24 || key.length === 32)) {\n    // convert key integer array into byte buffer\n    tmp = key;\n    key = forge.util.createBuffer();\n    for(var i = 0; i < tmp.length; ++i) {\n      key.putByte(tmp[i]);\n    }\n  }\n\n  // convert key byte buffer into 32-bit integer array\n  if(!forge.util.isArray(key)) {\n    tmp = key;\n    key = [];\n\n    // key lengths of 16, 24, 32 bytes allowed\n    var len = tmp.length();\n    if(len === 16 || len === 24 || len === 32) {\n      len = len >>> 2;\n      for(var i = 0; i < len; ++i) {\n        key.push(tmp.getInt32());\n      }\n    }\n  }\n\n  // key must be an array of 32-bit integers by now\n  if(!forge.util.isArray(key) ||\n    !(key.length === 4 || key.length === 6 || key.length === 8)) {\n    throw new Error('Invalid key parameter.');\n  }\n\n  // encryption operation is always used for these modes\n  var mode = this.mode.name;\n  var encryptOp = (['CFB', 'OFB', 'CTR', 'GCM'].indexOf(mode) !== -1);\n\n  // do key expansion\n  this._w = _expandKey(key, options.decrypt && !encryptOp);\n  this._init = true;\n};\n\n/**\n * Expands a key. Typically only used for testing.\n *\n * @param key the symmetric key to expand, as an array of 32-bit words.\n * @param decrypt true to expand for decryption, false for encryption.\n *\n * @return the expanded key.\n */\nforge.aes._expandKey = function(key, decrypt) {\n  if(!init) {\n    initialize();\n  }\n  return _expandKey(key, decrypt);\n};\n\n/**\n * Updates a single block. Typically only used for testing.\n *\n * @param w the expanded key to use.\n * @param input an array of block-size 32-bit words.\n * @param output an array of block-size 32-bit words.\n * @param decrypt true to decrypt, false to encrypt.\n */\nforge.aes._updateBlock = _updateBlock;\n\n/** Register AES algorithms **/\n\nregisterAlgorithm('AES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('AES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('AES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('AES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('AES-CTR', forge.cipher.modes.ctr);\nregisterAlgorithm('AES-GCM', forge.cipher.modes.gcm);\n\nfunction registerAlgorithm(name, mode) {\n  var factory = function() {\n    return new forge.aes.Algorithm(name, mode);\n  };\n  forge.cipher.registerAlgorithm(name, factory);\n}\n\n/** AES implementation **/\n\nvar init = false; // not yet initialized\nvar Nb = 4;       // number of words comprising the state (AES = 4)\nvar sbox;         // non-linear substitution table used in key expansion\nvar isbox;        // inversion of sbox\nvar rcon;         // round constant word array\nvar mix;          // mix-columns table\nvar imix;         // inverse mix-columns table\n\n/**\n * Performs initialization, ie: precomputes tables to optimize for speed.\n *\n * One way to understand how AES works is to imagine that 'addition' and\n * 'multiplication' are interfaces that require certain mathematical\n * properties to hold true (ie: they are associative) but they might have\n * different implementations and produce different kinds of results ...\n * provided that their mathematical properties remain true. AES defines\n * its own methods of addition and multiplication but keeps some important\n * properties the same, ie: associativity and distributivity. The\n * explanation below tries to shed some light on how AES defines addition\n * and multiplication of bytes and 32-bit words in order to perform its\n * encryption and decryption algorithms.\n *\n * The basics:\n *\n * The AES algorithm views bytes as binary representations of polynomials\n * that have either 1 or 0 as the coefficients. It defines the addition\n * or subtraction of two bytes as the XOR operation. It also defines the\n * multiplication of two bytes as a finite field referred to as GF(2^8)\n * (Note: 'GF' means \"Galois Field\" which is a field that contains a finite\n * number of elements so GF(2^8) has 256 elements).\n *\n * This means that any two bytes can be represented as binary polynomials;\n * when they multiplied together and modularly reduced by an irreducible\n * polynomial of the 8th degree, the results are the field GF(2^8). The\n * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.\n * This multiplication is associative with 0x01 as the identity:\n *\n * (b * 0x01 = GF(b, 0x01) = b).\n *\n * The operation GF(b, 0x02) can be performed at the byte level by left\n * shifting b once and then XOR'ing it (to perform the modular reduction)\n * with 0x11b if b is >= 128. Repeated application of the multiplication\n * of 0x02 can be used to implement the multiplication of any two bytes.\n *\n * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can\n * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these\n * factors can each be multiplied by 0x57 and then added together. To do\n * the multiplication, values for 0x57 multiplied by each of these 3 factors\n * can be precomputed and stored in a table. To add them, the values from\n * the table are XOR'd together.\n *\n * AES also defines addition and multiplication of words, that is 4-byte\n * numbers represented as polynomials of 3 degrees where the coefficients\n * are the values of the bytes.\n *\n * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.\n *\n * Addition is performed by XOR'ing like powers of x. Multiplication\n * is performed in two steps, the first is an algebriac expansion as\n * you would do normally (where addition is XOR). But the result is\n * a polynomial larger than 3 degrees and thus it cannot fit in a word. So\n * next the result is modularly reduced by an AES-specific polynomial of\n * degree 4 which will always produce a polynomial of less than 4 degrees\n * such that it will fit in a word. In AES, this polynomial is x^4 + 1.\n *\n * The modular product of two polynomials 'a' and 'b' is thus:\n *\n * d(x) = d3x^3 + d2x^2 + d1x + d0\n * with\n * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)\n * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)\n * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)\n * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)\n *\n * As a matrix:\n *\n * [d0] = [a0 a3 a2 a1][b0]\n * [d1]   [a1 a0 a3 a2][b1]\n * [d2]   [a2 a1 a0 a3][b2]\n * [d3]   [a3 a2 a1 a0][b3]\n *\n * Special polynomials defined by AES (0x02 == {02}):\n * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}\n * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.\n *\n * These polynomials are used in the MixColumns() and InverseMixColumns()\n * operations, respectively, to cause each element in the state to affect\n * the output (referred to as diffusing).\n *\n * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the\n * polynomial x3.\n *\n * The ShiftRows() method modifies the last 3 rows in the state (where\n * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.\n * The 1st byte in the second row is moved to the end of the row. The 1st\n * and 2nd bytes in the third row are moved to the end of the row. The 1st,\n * 2nd, and 3rd bytes are moved in the fourth row.\n *\n * More details on how AES arithmetic works:\n *\n * In the polynomial representation of binary numbers, XOR performs addition\n * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)\n * corresponds with the multiplication of polynomials modulo an irreducible\n * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply\n * polynomial 'a' with polynomial 'b' and then do a modular reduction by\n * an AES-specific irreducible polynomial of degree 8.\n *\n * A polynomial is irreducible if its only divisors are one and itself. For\n * the AES algorithm, this irreducible polynomial is:\n *\n * m(x) = x^8 + x^4 + x^3 + x + 1,\n *\n * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:\n * 100011011 = 283 = 0x11b.\n *\n * For example, GF(0x57, 0x83) = 0xc1 because\n *\n * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1\n * 0x85 = 131 = 10000101 = x^7 + x + 1\n *\n * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)\n * =  x^13 + x^11 + x^9 + x^8 + x^7 +\n *    x^7 + x^5 + x^3 + x^2 + x +\n *    x^6 + x^4 + x^2 + x + 1\n * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y\n *    y modulo (x^8 + x^4 + x^3 + x + 1)\n * =  x^7 + x^6 + 1.\n *\n * The modular reduction by m(x) guarantees the result will be a binary\n * polynomial of less than degree 8, so that it can fit in a byte.\n *\n * The operation to multiply a binary polynomial b with x (the polynomial\n * x in binary representation is 00000010) is:\n *\n * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1\n *\n * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the\n * most significant bit is 0 in b) then the result is already reduced. If\n * it is 1, then we can reduce it by subtracting m(x) via an XOR.\n *\n * It follows that multiplication by x (00000010 or 0x02) can be implemented\n * by performing a left shift followed by a conditional bitwise XOR with\n * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by\n * higher powers of x can be implemented by repeated application of xtime().\n *\n * By adding intermediate results, multiplication by any constant can be\n * implemented. For instance:\n *\n * GF(0x57, 0x13) = 0xfe because:\n *\n * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)\n *\n * Note: We XOR with 0x11b instead of 0x1b because in javascript our\n * datatype for b can be larger than 1 byte, so a left shift will not\n * automatically eliminate bits that overflow a byte ... by XOR'ing the\n * overflow bit with 1 (the extra one from 0x11b) we zero it out.\n *\n * GF(0x57, 0x02) = xtime(0x57) = 0xae\n * GF(0x57, 0x04) = xtime(0xae) = 0x47\n * GF(0x57, 0x08) = xtime(0x47) = 0x8e\n * GF(0x57, 0x10) = xtime(0x8e) = 0x07\n *\n * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))\n *\n * And by the distributive property (since XOR is addition and GF() is\n * multiplication):\n *\n * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)\n * = 0x57 ^ 0xae ^ 0x07\n * = 0xfe.\n */\nfunction initialize() {\n  init = true;\n\n  /* Populate the Rcon table. These are the values given by\n    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)\n    in the field of GF(2^8), where i starts at 1.\n\n    rcon[0] = [0x00, 0x00, 0x00, 0x00]\n    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1\n    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2\n    ...\n    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B\n    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36\n\n    We only store the first byte because it is the only one used.\n  */\n  rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];\n\n  // compute xtime table which maps i onto GF(i, 0x02)\n  var xtime = new Array(256);\n  for(var i = 0; i < 128; ++i) {\n    xtime[i] = i << 1;\n    xtime[i + 128] = (i + 128) << 1 ^ 0x11B;\n  }\n\n  // compute all other tables\n  sbox = new Array(256);\n  isbox = new Array(256);\n  mix = new Array(4);\n  imix = new Array(4);\n  for(var i = 0; i < 4; ++i) {\n    mix[i] = new Array(256);\n    imix[i] = new Array(256);\n  }\n  var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;\n  for(var i = 0; i < 256; ++i) {\n    /* We need to generate the SubBytes() sbox and isbox tables so that\n      we can perform byte substitutions. This requires us to traverse\n      all of the elements in GF, find their multiplicative inverses,\n      and apply to each the following affine transformation:\n\n      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^\n            b(i + 7) mod 8 ^ ci\n      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the\n      ith bit of a byte c with the value {63} or {01100011}.\n\n      It is possible to traverse every possible value in a Galois field\n      using what is referred to as a 'generator'. There are many\n      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully\n      traverse GF we iterate 255 times, multiplying by our generator\n      each time.\n\n      On each iteration we can determine the multiplicative inverse for\n      the current element.\n\n      Suppose there is an element in GF 'e'. For a given generator 'g',\n      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns\n      out that if use the inverse of a generator as another generator\n      it will produce all of the corresponding multiplicative inverses\n      at the same time. For this reason, we choose 5 as our inverse\n      generator because it only requires 2 multiplies and 1 add and its\n      inverse, 82, requires relatively few operations as well.\n\n      In order to apply the affine transformation, the multiplicative\n      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a\n      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and\n      'x'. Then 's' is left shifted and the high bit of 's' is made the\n      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd\n      with 's' and stored in 'x'. On each subsequent iteration the same\n      operation is performed. When 4 iterations are complete, 'x' is\n      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.\n      For example:\n\n      s = 01000001\n      x = 01000001\n\n      iteration 1: s = 10000010, x ^= s\n      iteration 2: s = 00000101, x ^= s\n      iteration 3: s = 00001010, x ^= s\n      iteration 4: s = 00010100, x ^= s\n      x ^= 0x63\n\n      This can be done with a loop where s = (s << 1) | (s >> 7). However,\n      it can also be done by using a single 16-bit (in this case 32-bit)\n      number 'sx'. Since XOR is an associative operation, we can set 'sx'\n      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.\n      The most significant bits will flow into the high 8 bit positions\n      and be correctly XOR'd with one another. All that remains will be\n      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits\n      afterwards.\n\n      At the same time we're populating sbox and isbox we can precompute\n      the multiplication we'll need to do to do MixColumns() later.\n    */\n\n    // apply affine transformation\n    sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);\n    sx = (sx >> 8) ^ (sx & 255) ^ 0x63;\n\n    // update tables\n    sbox[e] = sx;\n    isbox[sx] = e;\n\n    /* Mixing columns is done using matrix multiplication. The columns\n      that are to be mixed are each a single word in the current state.\n      The state has Nb columns (4 columns). Therefore each column is a\n      4 byte word. So to mix the columns in a single column 'c' where\n      its rows are r0, r1, r2, and r3, we use the following matrix\n      multiplication:\n\n      [2 3 1 1]*[r0,c]=[r'0,c]\n      [1 2 3 1] [r1,c] [r'1,c]\n      [1 1 2 3] [r2,c] [r'2,c]\n      [3 1 1 2] [r3,c] [r'3,c]\n\n      r0, r1, r2, and r3 are each 1 byte of one of the words in the\n      state (a column). To do matrix multiplication for each mixed\n      column c' we multiply the corresponding row from the left matrix\n      with the corresponding column from the right matrix. In total, we\n      get 4 equations:\n\n      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c\n      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c\n      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c\n      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c\n\n      As usual, the multiplication is as previously defined and the\n      addition is XOR. In order to optimize mixing columns we can store\n      the multiplication results in tables. If you think of the whole\n      column as a word (it might help to visualize by mentally rotating\n      the equations above by counterclockwise 90 degrees) then you can\n      see that it would be useful to map the multiplications performed on\n      each byte (r0, r1, r2, r3) onto a word as well. For instance, we\n      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the\n      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two\n      respectively in the middle). This means that a table can be\n      constructed that uses r0 as an index to the word. We can do the\n      same with r1, r2, and r3, creating a total of 4 tables.\n\n      To construct a full c', we can just look up each byte of c in\n      their respective tables and XOR the results together.\n\n      Also, to build each table we only have to calculate the word\n      for 2,1,1,3 for every byte ... which we can do on each iteration\n      of this loop since we will iterate over every byte. After we have\n      calculated 2,1,1,3 we can get the results for the other tables\n      by cycling the byte at the end to the beginning. For instance\n      we can take the result of table 2,1,1,3 and produce table 3,2,1,1\n      by moving the right most byte to the left most position just like\n      how you can imagine the 3 moved out of 2,1,1,3 and to the front\n      to produce 3,2,1,1.\n\n      There is another optimization in that the same multiples of\n      the current element we need in order to advance our generator\n      to the next iteration can be reused in performing the 2,1,1,3\n      calculation. We also calculate the inverse mix column tables,\n      with e,9,d,b being the inverse of 2,1,1,3.\n\n      When we're done, and we need to actually mix columns, the first\n      byte of each state word should be put through mix[0] (2,1,1,3),\n      the second through mix[1] (3,2,1,1) and so forth. Then they should\n      be XOR'd together to produce the fully mixed column.\n    */\n\n    // calculate mix and imix table values\n    sx2 = xtime[sx];\n    e2 = xtime[e];\n    e4 = xtime[e2];\n    e8 = xtime[e4];\n    me =\n      (sx2 << 24) ^  // 2\n      (sx << 16) ^   // 1\n      (sx << 8) ^    // 1\n      (sx ^ sx2);    // 3\n    ime =\n      (e2 ^ e4 ^ e8) << 24 ^  // E (14)\n      (e ^ e8) << 16 ^        // 9\n      (e ^ e4 ^ e8) << 8 ^    // D (13)\n      (e ^ e2 ^ e8);          // B (11)\n    // produce each of the mix tables by rotating the 2,1,1,3 value\n    for(var n = 0; n < 4; ++n) {\n      mix[n][e] = me;\n      imix[n][sx] = ime;\n      // cycle the right most byte to the left most position\n      // ie: 2,1,1,3 becomes 3,2,1,1\n      me = me << 24 | me >>> 8;\n      ime = ime << 24 | ime >>> 8;\n    }\n\n    // get next element and inverse\n    if(e === 0) {\n      // 1 is the inverse of 1\n      e = ei = 1;\n    } else {\n      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)\n      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)\n      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];\n      ei ^= xtime[xtime[ei]];\n    }\n  }\n}\n\n/**\n * Generates a key schedule using the AES key expansion algorithm.\n *\n * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion\n * routine to generate a key schedule. The Key Expansion generates a total\n * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,\n * and each of the Nr rounds requires Nb words of key data. The resulting\n * key schedule consists of a linear array of 4-byte words, denoted [wi ],\n * with i in the range 0 <= i < Nb(Nr + 1).\n *\n * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)\n * AES-128 (Nb=4, Nk=4, Nr=10)\n * AES-192 (Nb=4, Nk=6, Nr=12)\n * AES-256 (Nb=4, Nk=8, Nr=14)\n * Note: Nr=Nk+6.\n *\n * Nb is the number of columns (32-bit words) comprising the State (or\n * number of bytes in a block). For AES, Nb=4.\n *\n * @param key the key to schedule (as an array of 32-bit words).\n * @param decrypt true to modify the key schedule to decrypt, false not to.\n *\n * @return the generated key schedule.\n */\nfunction _expandKey(key, decrypt) {\n  // copy the key's words to initialize the key schedule\n  var w = key.slice(0);\n\n  /* RotWord() will rotate a word, moving the first byte to the last\n    byte's position (shifting the other bytes left).\n\n    We will be getting the value of Rcon at i / Nk. 'i' will iterate\n    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in\n    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from\n    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will\n    increase by 1. We use a counter iNk to keep track of this.\n   */\n\n  // go through the rounds expanding the key\n  var temp, iNk = 1;\n  var Nk = w.length;\n  var Nr1 = Nk + 6 + 1;\n  var end = Nb * Nr1;\n  for(var i = Nk; i < end; ++i) {\n    temp = w[i - 1];\n    if(i % Nk === 0) {\n      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]\n      temp =\n        sbox[temp >>> 16 & 255] << 24 ^\n        sbox[temp >>> 8 & 255] << 16 ^\n        sbox[temp & 255] << 8 ^\n        sbox[temp >>> 24] ^ (rcon[iNk] << 24);\n      iNk++;\n    } else if(Nk > 6 && (i % Nk === 4)) {\n      // temp = SubWord(temp)\n      temp =\n        sbox[temp >>> 24] << 24 ^\n        sbox[temp >>> 16 & 255] << 16 ^\n        sbox[temp >>> 8 & 255] << 8 ^\n        sbox[temp & 255];\n    }\n    w[i] = w[i - Nk] ^ temp;\n  }\n\n  /* When we are updating a cipher block we always use the code path for\n     encryption whether we are decrypting or not (to shorten code and\n     simplify the generation of look up tables). However, because there\n     are differences in the decryption algorithm, other than just swapping\n     in different look up tables, we must transform our key schedule to\n     account for these changes:\n\n     1. The decryption algorithm gets its key rounds in reverse order.\n     2. The decryption algorithm adds the round key before mixing columns\n       instead of afterwards.\n\n     We don't need to modify our key schedule to handle the first case,\n     we can just traverse the key schedule in reverse order when decrypting.\n\n     The second case requires a little work.\n\n     The tables we built for performing rounds will take an input and then\n     perform SubBytes() and MixColumns() or, for the decrypt version,\n     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires\n     us to AddRoundKey() before InvMixColumns(). This means we'll need to\n     apply some transformations to the round key to inverse-mix its columns\n     so they'll be correct for moving AddRoundKey() to after the state has\n     had its columns inverse-mixed.\n\n     To inverse-mix the columns of the state when we're decrypting we use a\n     lookup table that will apply InvSubBytes() and InvMixColumns() at the\n     same time. However, the round key's bytes are not inverse-substituted\n     in the decryption algorithm. To get around this problem, we can first\n     substitute the bytes in the round key so that when we apply the\n     transformation via the InvSubBytes()+InvMixColumns() table, it will\n     undo our substitution leaving us with the original value that we\n     want -- and then inverse-mix that value.\n\n     This change will correctly alter our key schedule so that we can XOR\n     each round key with our already transformed decryption state. This\n     allows us to use the same code path as the encryption algorithm.\n\n     We make one more change to the decryption key. Since the decryption\n     algorithm runs in reverse from the encryption algorithm, we reverse\n     the order of the round keys to avoid having to iterate over the key\n     schedule backwards when running the encryption algorithm later in\n     decryption mode. In addition to reversing the order of the round keys,\n     we also swap each round key's 2nd and 4th rows. See the comments\n     section where rounds are performed for more details about why this is\n     done. These changes are done inline with the other substitution\n     described above.\n  */\n  if(decrypt) {\n    var tmp;\n    var m0 = imix[0];\n    var m1 = imix[1];\n    var m2 = imix[2];\n    var m3 = imix[3];\n    var wnew = w.slice(0);\n    end = w.length;\n    for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {\n      // do not sub the first or last round key (round keys are Nb\n      // words) as no column mixing is performed before they are added,\n      // but do change the key order\n      if(i === 0 || i === (end - Nb)) {\n        wnew[i] = w[wi];\n        wnew[i + 1] = w[wi + 3];\n        wnew[i + 2] = w[wi + 2];\n        wnew[i + 3] = w[wi + 1];\n      } else {\n        // substitute each round key byte because the inverse-mix\n        // table will inverse-substitute it (effectively cancel the\n        // substitution because round key bytes aren't sub'd in\n        // decryption mode) and swap indexes 3 and 1\n        for(var n = 0; n < Nb; ++n) {\n          tmp = w[wi + n];\n          wnew[i + (3&-n)] =\n            m0[sbox[tmp >>> 24]] ^\n            m1[sbox[tmp >>> 16 & 255]] ^\n            m2[sbox[tmp >>> 8 & 255]] ^\n            m3[sbox[tmp & 255]];\n        }\n      }\n    }\n    w = wnew;\n  }\n\n  return w;\n}\n\n/**\n * Updates a single block (16 bytes) using AES. The update will either\n * encrypt or decrypt the block.\n *\n * @param w the key schedule.\n * @param input the input block (an array of 32-bit words).\n * @param output the updated output block.\n * @param decrypt true to decrypt the block, false to encrypt it.\n */\nfunction _updateBlock(w, input, output, decrypt) {\n  /*\n  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])\n  begin\n    byte state[4,Nb]\n    state = in\n    AddRoundKey(state, w[0, Nb-1])\n    for round = 1 step 1 to Nr-1\n      SubBytes(state)\n      ShiftRows(state)\n      MixColumns(state)\n      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])\n    end for\n    SubBytes(state)\n    ShiftRows(state)\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n    out = state\n  end\n\n  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])\n  begin\n    byte state[4,Nb]\n    state = in\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n    for round = Nr-1 step -1 downto 1\n      InvShiftRows(state)\n      InvSubBytes(state)\n      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])\n      InvMixColumns(state)\n    end for\n    InvShiftRows(state)\n    InvSubBytes(state)\n    AddRoundKey(state, w[0, Nb-1])\n    out = state\n  end\n  */\n\n  // Encrypt: AddRoundKey(state, w[0, Nb-1])\n  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n  var Nr = w.length / 4 - 1;\n  var m0, m1, m2, m3, sub;\n  if(decrypt) {\n    m0 = imix[0];\n    m1 = imix[1];\n    m2 = imix[2];\n    m3 = imix[3];\n    sub = isbox;\n  } else {\n    m0 = mix[0];\n    m1 = mix[1];\n    m2 = mix[2];\n    m3 = mix[3];\n    sub = sbox;\n  }\n  var a, b, c, d, a2, b2, c2;\n  a = input[0] ^ w[0];\n  b = input[decrypt ? 3 : 1] ^ w[1];\n  c = input[2] ^ w[2];\n  d = input[decrypt ? 1 : 3] ^ w[3];\n  var i = 3;\n\n  /* In order to share code we follow the encryption algorithm when both\n    encrypting and decrypting. To account for the changes required in the\n    decryption algorithm, we use different lookup tables when decrypting\n    and use a modified key schedule to account for the difference in the\n    order of transformations applied when performing rounds. We also get\n    key rounds in reverse order (relative to encryption). */\n  for(var round = 1; round < Nr; ++round) {\n    /* As described above, we'll be using table lookups to perform the\n      column mixing. Each column is stored as a word in the state (the\n      array 'input' has one column as a word at each index). In order to\n      mix a column, we perform these transformations on each row in c,\n      which is 1 byte in each word. The new column for c0 is c'0:\n\n               m0      m1      m2      m3\n      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0\n      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0\n      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0\n      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0\n\n      So using mix tables where c0 is a word with r0 being its upper\n      8 bits and r3 being its lower 8 bits:\n\n      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]\n      ...\n      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]\n\n      Therefore to mix the columns in each word in the state we\n      do the following (& 255 omitted for brevity):\n      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]\n\n      However, before mixing, the algorithm requires us to perform\n      ShiftRows(). The ShiftRows() transformation cyclically shifts the\n      last 3 rows of the state over different offsets. The first row\n      (r = 0) is not shifted.\n\n      s'_r,c = s_r,(c + shift(r, Nb) mod Nb\n      for 0 < r < 4 and 0 <= c < Nb and\n      shift(1, 4) = 1\n      shift(2, 4) = 2\n      shift(3, 4) = 3.\n\n      This causes the first byte in r = 1 to be moved to the end of\n      the row, the first 2 bytes in r = 2 to be moved to the end of\n      the row, the first 3 bytes in r = 3 to be moved to the end of\n      the row:\n\n      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]\n      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]\n      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]\n\n      We can make these substitutions inline with our column mixing to\n      generate an updated set of equations to produce each word in the\n      state (note the columns have changed positions):\n\n      c0 c1 c2 c3 => c0 c1 c2 c3\n      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)\n      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)\n      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)\n\n      Therefore:\n\n      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3\n      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3\n      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3\n      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3\n\n      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0\n      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0\n      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0\n      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0\n\n      ... and so forth for c'2 and c'3. The important distinction is\n      that the columns are cycling, with c0 being used with the m0\n      map when calculating c0, but c1 being used with the m0 map when\n      calculating c1 ... and so forth.\n\n      When performing the inverse we transform the mirror image and\n      skip the bottom row, instead of the top one, and move upwards:\n\n      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption\n      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)\n      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption\n      c3 c2 c1 c0    c3 c2 c1 c0\n\n      If you compare the resulting matrices for ShiftRows()+MixColumns()\n      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are\n      different (in encrypt mode vs. decrypt mode). So in order to use\n      the same code to handle both encryption and decryption, we will\n      need to do some mapping.\n\n      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be\n      a row number in the state, then the resulting matrix in encryption\n      mode for applying the above transformations would be:\n\n      r1: a b c d\n      r2: b c d a\n      r3: c d a b\n      r4: d a b c\n\n      If we did the same in decryption mode we would get:\n\n      r1: a d c b\n      r2: b a d c\n      r3: c b a d\n      r4: d c b a\n\n      If instead we swap d and b (set b=c3 and d=c1), then we get:\n\n      r1: a b c d\n      r2: d a b c\n      r3: c d a b\n      r4: b c d a\n\n      Now the 1st and 3rd rows are the same as the encryption matrix. All\n      we need to do then to make the mapping exactly the same is to swap\n      the 2nd and 4th rows when in decryption mode. To do this without\n      having to do it on each iteration, we swapped the 2nd and 4th rows\n      in the decryption key schedule. We also have to do the swap above\n      when we first pull in the input and when we set the final output. */\n    a2 =\n      m0[a >>> 24] ^\n      m1[b >>> 16 & 255] ^\n      m2[c >>> 8 & 255] ^\n      m3[d & 255] ^ w[++i];\n    b2 =\n      m0[b >>> 24] ^\n      m1[c >>> 16 & 255] ^\n      m2[d >>> 8 & 255] ^\n      m3[a & 255] ^ w[++i];\n    c2 =\n      m0[c >>> 24] ^\n      m1[d >>> 16 & 255] ^\n      m2[a >>> 8 & 255] ^\n      m3[b & 255] ^ w[++i];\n    d =\n      m0[d >>> 24] ^\n      m1[a >>> 16 & 255] ^\n      m2[b >>> 8 & 255] ^\n      m3[c & 255] ^ w[++i];\n    a = a2;\n    b = b2;\n    c = c2;\n  }\n\n  /*\n    Encrypt:\n    SubBytes(state)\n    ShiftRows(state)\n    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])\n\n    Decrypt:\n    InvShiftRows(state)\n    InvSubBytes(state)\n    AddRoundKey(state, w[0, Nb-1])\n   */\n  // Note: rows are shifted inline\n  output[0] =\n    (sub[a >>> 24] << 24) ^\n    (sub[b >>> 16 & 255] << 16) ^\n    (sub[c >>> 8 & 255] << 8) ^\n    (sub[d & 255]) ^ w[++i];\n  output[decrypt ? 3 : 1] =\n    (sub[b >>> 24] << 24) ^\n    (sub[c >>> 16 & 255] << 16) ^\n    (sub[d >>> 8 & 255] << 8) ^\n    (sub[a & 255]) ^ w[++i];\n  output[2] =\n    (sub[c >>> 24] << 24) ^\n    (sub[d >>> 16 & 255] << 16) ^\n    (sub[a >>> 8 & 255] << 8) ^\n    (sub[b & 255]) ^ w[++i];\n  output[decrypt ? 1 : 3] =\n    (sub[d >>> 24] << 24) ^\n    (sub[a >>> 16 & 255] << 16) ^\n    (sub[b >>> 8 & 255] << 8) ^\n    (sub[c & 255]) ^ w[++i];\n}\n\n/**\n * Deprecated. Instead, use:\n *\n * forge.cipher.createCipher('AES-<mode>', key);\n * forge.cipher.createDecipher('AES-<mode>', key);\n *\n * Creates a deprecated AES cipher object. This object's mode will default to\n * CBC (cipher-block-chaining).\n *\n * The key and iv may be given as a string of bytes, an array of bytes, a\n * byte buffer, or an array of 32-bit words.\n *\n * @param options the options to use.\n *          key the symmetric key to use.\n *          output the buffer to write to.\n *          decrypt true for decryption, false for encryption.\n *          mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nfunction _createCipher(options) {\n  options = options || {};\n  var mode = (options.mode || 'CBC').toUpperCase();\n  var algorithm = 'AES-' + mode;\n\n  var cipher;\n  if(options.decrypt) {\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\n  } else {\n    cipher = forge.cipher.createCipher(algorithm, options.key);\n  }\n\n  // backwards compatible start API\n  var start = cipher.start;\n  cipher.start = function(iv, options) {\n    // backwards compatibility: support second arg as output buffer\n    var output = null;\n    if(options instanceof forge.util.ByteBuffer) {\n      output = options;\n      options = {};\n    }\n    options = options || {};\n    options.output = output;\n    options.iv = iv;\n    start.call(cipher, options);\n  };\n\n  return cipher;\n}\n","/**\n * Hash-based Message Authentication Code implementation. Requires a message\n * digest object that can be obtained, for example, from forge.md.sha1 or\n * forge.md.md5.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\n/* HMAC API */\nvar hmac = module.exports = forge.hmac = forge.hmac || {};\n\n/**\n * Creates an HMAC object that uses the given message digest object.\n *\n * @return an HMAC object.\n */\nhmac.create = function() {\n  // the hmac key to use\n  var _key = null;\n\n  // the message digest to use\n  var _md = null;\n\n  // the inner padding\n  var _ipadding = null;\n\n  // the outer padding\n  var _opadding = null;\n\n  // hmac context\n  var ctx = {};\n\n  /**\n   * Starts or restarts the HMAC with the given key and message digest.\n   *\n   * @param md the message digest to use, null to reuse the previous one,\n   *           a string to use builtin 'sha1', 'md5', 'sha256'.\n   * @param key the key to use as a string, array of bytes, byte buffer,\n   *           or null to reuse the previous key.\n   */\n  ctx.start = function(md, key) {\n    if(md !== null) {\n      if(typeof md === 'string') {\n        // create builtin message digest\n        md = md.toLowerCase();\n        if(md in forge.md.algorithms) {\n          _md = forge.md.algorithms[md].create();\n        } else {\n          throw new Error('Unknown hash algorithm \"' + md + '\"');\n        }\n      } else {\n        // store message digest\n        _md = md;\n      }\n    }\n\n    if(key === null) {\n      // reuse previous key\n      key = _key;\n    } else {\n      if(typeof key === 'string') {\n        // convert string into byte buffer\n        key = forge.util.createBuffer(key);\n      } else if(forge.util.isArray(key)) {\n        // convert byte array into byte buffer\n        var tmp = key;\n        key = forge.util.createBuffer();\n        for(var i = 0; i < tmp.length; ++i) {\n          key.putByte(tmp[i]);\n        }\n      }\n\n      // if key is longer than blocksize, hash it\n      var keylen = key.length();\n      if(keylen > _md.blockLength) {\n        _md.start();\n        _md.update(key.bytes());\n        key = _md.digest();\n      }\n\n      // mix key into inner and outer padding\n      // ipadding = [0x36 * blocksize] ^ key\n      // opadding = [0x5C * blocksize] ^ key\n      _ipadding = forge.util.createBuffer();\n      _opadding = forge.util.createBuffer();\n      keylen = key.length();\n      for(var i = 0; i < keylen; ++i) {\n        var tmp = key.at(i);\n        _ipadding.putByte(0x36 ^ tmp);\n        _opadding.putByte(0x5C ^ tmp);\n      }\n\n      // if key is shorter than blocksize, add additional padding\n      if(keylen < _md.blockLength) {\n        var tmp = _md.blockLength - keylen;\n        for(var i = 0; i < tmp; ++i) {\n          _ipadding.putByte(0x36);\n          _opadding.putByte(0x5C);\n        }\n      }\n      _key = key;\n      _ipadding = _ipadding.bytes();\n      _opadding = _opadding.bytes();\n    }\n\n    // digest is done like so: hash(opadding | hash(ipadding | message))\n\n    // prepare to do inner hash\n    // hash(ipadding | message)\n    _md.start();\n    _md.update(_ipadding);\n  };\n\n  /**\n   * Updates the HMAC with the given message bytes.\n   *\n   * @param bytes the bytes to update with.\n   */\n  ctx.update = function(bytes) {\n    _md.update(bytes);\n  };\n\n  /**\n   * Produces the Message Authentication Code (MAC).\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  ctx.getMac = function() {\n    // digest is done like so: hash(opadding | hash(ipadding | message))\n    // here we do the outer hashing\n    var inner = _md.digest().bytes();\n    _md.start();\n    _md.update(_opadding);\n    _md.update(inner);\n    return _md.digest();\n  };\n  // alias for getMac\n  ctx.digest = ctx.getMac;\n\n  return ctx;\n};\n","/**\n * Cipher base API.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nmodule.exports = forge.cipher = forge.cipher || {};\n\n// registered algorithms\nforge.cipher.algorithms = forge.cipher.algorithms || {};\n\n/**\n * Creates a cipher object that can be used to encrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */\nforge.cipher.createCipher = function(algorithm, key) {\n  var api = algorithm;\n  if(typeof api === 'string') {\n    api = forge.cipher.getAlgorithm(api);\n    if(api) {\n      api = api();\n    }\n  }\n  if(!api) {\n    throw new Error('Unsupported algorithm: ' + algorithm);\n  }\n\n  // assume block cipher\n  return new forge.cipher.BlockCipher({\n    algorithm: api,\n    key: key,\n    decrypt: false\n  });\n};\n\n/**\n * Creates a decipher object that can be used to decrypt data using the given\n * algorithm and key. The algorithm may be provided as a string value for a\n * previously registered algorithm or it may be given as a cipher algorithm\n * API object.\n *\n * @param algorithm the algorithm to use, either a string or an algorithm API\n *          object.\n * @param key the key to use, as a binary-encoded string of bytes or a\n *          byte buffer.\n *\n * @return the cipher.\n */\nforge.cipher.createDecipher = function(algorithm, key) {\n  var api = algorithm;\n  if(typeof api === 'string') {\n    api = forge.cipher.getAlgorithm(api);\n    if(api) {\n      api = api();\n    }\n  }\n  if(!api) {\n    throw new Error('Unsupported algorithm: ' + algorithm);\n  }\n\n  // assume block cipher\n  return new forge.cipher.BlockCipher({\n    algorithm: api,\n    key: key,\n    decrypt: true\n  });\n};\n\n/**\n * Registers an algorithm by name. If the name was already registered, the\n * algorithm API object will be overwritten.\n *\n * @param name the name of the algorithm.\n * @param algorithm the algorithm API object.\n */\nforge.cipher.registerAlgorithm = function(name, algorithm) {\n  name = name.toUpperCase();\n  forge.cipher.algorithms[name] = algorithm;\n};\n\n/**\n * Gets a registered algorithm by name.\n *\n * @param name the name of the algorithm.\n *\n * @return the algorithm, if found, null if not.\n */\nforge.cipher.getAlgorithm = function(name) {\n  name = name.toUpperCase();\n  if(name in forge.cipher.algorithms) {\n    return forge.cipher.algorithms[name];\n  }\n  return null;\n};\n\nvar BlockCipher = forge.cipher.BlockCipher = function(options) {\n  this.algorithm = options.algorithm;\n  this.mode = this.algorithm.mode;\n  this.blockSize = this.mode.blockSize;\n  this._finish = false;\n  this._input = null;\n  this.output = null;\n  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;\n  this._decrypt = options.decrypt;\n  this.algorithm.initialize(options);\n};\n\n/**\n * Starts or restarts the encryption or decryption process, whichever\n * was previously configured.\n *\n * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array\n * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in\n * bytes, then it must be Nb (16) bytes in length. If the IV is given in as\n * 32-bit integers, then it must be 4 integers long.\n *\n * Note: an IV is not required or used in ECB mode.\n *\n * For GCM-mode, the IV must be given as a binary-encoded string of bytes or\n * a byte buffer. The number of bytes should be 12 (96 bits) as recommended\n * by NIST SP-800-38D but another length may be given.\n *\n * @param options the options to use:\n *          iv the initialization vector to use as a binary-encoded string of\n *            bytes, null to reuse the last ciphered block from a previous\n *            update() (this \"residue\" method is for legacy support only).\n *          additionalData additional authentication data as a binary-encoded\n *            string of bytes, for 'GCM' mode, (default: none).\n *          tagLength desired length of authentication tag, in bits, for\n *            'GCM' mode (0-128, default: 128).\n *          tag the authentication tag to check if decrypting, as a\n *             binary-encoded string of bytes.\n *          output the output the buffer to write to, null to create one.\n */\nBlockCipher.prototype.start = function(options) {\n  options = options || {};\n  var opts = {};\n  for(var key in options) {\n    opts[key] = options[key];\n  }\n  opts.decrypt = this._decrypt;\n  this._finish = false;\n  this._input = forge.util.createBuffer();\n  this.output = options.output || forge.util.createBuffer();\n  this.mode.start(opts);\n};\n\n/**\n * Updates the next block according to the cipher mode.\n *\n * @param input the buffer to read from.\n */\nBlockCipher.prototype.update = function(input) {\n  if(input) {\n    // input given, so empty it into the input buffer\n    this._input.putBuffer(input);\n  }\n\n  // do cipher operation until it needs more input and not finished\n  while(!this._op.call(this.mode, this._input, this.output, this._finish) &&\n    !this._finish) {}\n\n  // free consumed memory from input buffer\n  this._input.compact();\n};\n\n/**\n * Finishes encrypting or decrypting.\n *\n * @param pad a padding function to use in CBC mode, null for default,\n *          signature(blockSize, buffer, decrypt).\n *\n * @return true if successful, false on error.\n */\nBlockCipher.prototype.finish = function(pad) {\n  // backwards-compatibility w/deprecated padding API\n  // Note: will overwrite padding functions even after another start() call\n  if(pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {\n    this.mode.pad = function(input) {\n      return pad(this.blockSize, input, false);\n    };\n    this.mode.unpad = function(output) {\n      return pad(this.blockSize, output, true);\n    };\n  }\n\n  // build options for padding and afterFinish functions\n  var options = {};\n  options.decrypt = this._decrypt;\n\n  // get # of bytes that won't fill a block\n  options.overflow = this._input.length() % this.blockSize;\n\n  if(!this._decrypt && this.mode.pad) {\n    if(!this.mode.pad(this._input, options)) {\n      return false;\n    }\n  }\n\n  // do final update\n  this._finish = true;\n  this.update();\n\n  if(this._decrypt && this.mode.unpad) {\n    if(!this.mode.unpad(this.output, options)) {\n      return false;\n    }\n  }\n\n  if(this.mode.afterFinish) {\n    if(!this.mode.afterFinish(this.output, options)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nvar api = {};\nmodule.exports = api;\n\n// baseN alphabet indexes\nvar _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the baseN-encoded output string.\n */\napi.encode = function(input, alphabet, maxline) {\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n\n  var output = '';\n\n  if(!(input instanceof Uint8Array)) {\n    // assume forge byte buffer\n    output = _encodeWithByteBuffer(input, alphabet);\n  } else {\n    var i = 0;\n    var base = alphabet.length;\n    var first = alphabet.charAt(0);\n    var digits = [0];\n    for(i = 0; i < input.length; ++i) {\n      for(var j = 0, carry = input[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % base;\n        carry = (carry / base) | 0;\n      }\n\n      while(carry > 0) {\n        digits.push(carry % base);\n        carry = (carry / base) | 0;\n      }\n    }\n\n    // deal with leading zeros\n    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n      output += first;\n    }\n    // convert digits to a string\n    for(i = digits.length - 1; i >= 0; --i) {\n      output += alphabet[digits[i]];\n    }\n  }\n\n  if(maxline) {\n    var regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n};\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param input the baseN-encoded input string.\n *\n * @return the Uint8Array.\n */\napi.decode = function(input, alphabet) {\n  if(typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n\n  var table = _reverseAlphabets[alphabet];\n  if(!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for(var i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var bytes = [0];\n  for(var i = 0; i < input.length; i++) {\n    var value = table[input.charCodeAt(i)];\n    if(value === undefined) {\n      return;\n    }\n\n    for(var j = 0, carry = value; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while(carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  if(typeof Buffer !== 'undefined') {\n    return Buffer.from(bytes.reverse());\n  }\n\n  return new Uint8Array(bytes.reverse());\n};\n\nfunction _encodeWithByteBuffer(input, alphabet) {\n  var i = 0;\n  var base = alphabet.length;\n  var first = alphabet.charAt(0);\n  var digits = [0];\n  for(i = 0; i < input.length(); ++i) {\n    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = (carry / base) | 0;\n    }\n\n    while(carry > 0) {\n      digits.push(carry % base);\n      carry = (carry / base) | 0;\n    }\n  }\n\n  var output = '';\n\n  // deal with leading zeros\n  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for(i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  return output;\n}\n","/**\n * DES (Data Encryption Standard) implementation.\n *\n * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.\n * It is based on the BSD-licensed implementation by Paul Tero:\n *\n * Paul Tero, July 2001\n * http://www.tero.co.uk/des/\n *\n * Optimised for performance with large blocks by\n * Michael Hayworth, November 2001\n * http://www.netdealing.com\n *\n * THIS SOFTWARE IS PROVIDED \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n * SUCH DAMAGE.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2012-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./cipher');\nrequire('./cipherModes');\nrequire('./util');\n\n/* DES API */\nmodule.exports = forge.des = forge.des || {};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n * cipher.start({iv: iv});\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */\nforge.des.startEncrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: false,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var cipher = forge.cipher.createCipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to encrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.des.createEncryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: false,\n    mode: mode\n  });\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n * decipher.start({iv: iv});\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n * The output will be stored in the 'output' member of the returned cipher.\n *\n * The key and iv may be given as binary-encoded strings of bytes or\n * byte buffers.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n * @param mode the cipher mode to use (default: 'CBC' if IV is\n *          given, 'ECB' if null).\n *\n * @return the cipher.\n */\nforge.des.startDecrypting = function(key, iv, output, mode) {\n  var cipher = _createCipher({\n    key: key,\n    output: output,\n    decrypt: true,\n    mode: mode || (iv === null ? 'ECB' : 'CBC')\n  });\n  cipher.start(iv);\n  return cipher;\n};\n\n/**\n * Deprecated. Instead, use:\n *\n * var decipher = forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates an DES cipher object to decrypt data using the given symmetric key.\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param key the symmetric key to use (64 or 192 bits).\n * @param mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nforge.des.createDecryptionCipher = function(key, mode) {\n  return _createCipher({\n    key: key,\n    output: null,\n    decrypt: true,\n    mode: mode\n  });\n};\n\n/**\n * Creates a new DES cipher algorithm object.\n *\n * @param name the name of the algorithm.\n * @param mode the mode factory function.\n *\n * @return the DES algorithm object.\n */\nforge.des.Algorithm = function(name, mode) {\n  var self = this;\n  self.name = name;\n  self.mode = new mode({\n    blockSize: 8,\n    cipher: {\n      encrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, false);\n      },\n      decrypt: function(inBlock, outBlock) {\n        return _updateBlock(self._keys, inBlock, outBlock, true);\n      }\n    }\n  });\n  self._init = false;\n};\n\n/**\n * Initializes this DES algorithm by expanding its key.\n *\n * @param options the options to use.\n *          key the key to use with this algorithm.\n *          decrypt true if the algorithm should be initialized for decryption,\n *            false for encryption.\n */\nforge.des.Algorithm.prototype.initialize = function(options) {\n  if(this._init) {\n    return;\n  }\n\n  var key = forge.util.createBuffer(options.key);\n  if(this.name.indexOf('3DES') === 0) {\n    if(key.length() !== 24) {\n      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);\n    }\n  }\n\n  // do key expansion to 16 or 48 subkeys (single or triple DES)\n  this._keys = _createKeys(key);\n  this._init = true;\n};\n\n/** Register DES algorithms **/\n\nregisterAlgorithm('DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('DES-CTR', forge.cipher.modes.ctr);\n\nregisterAlgorithm('3DES-ECB', forge.cipher.modes.ecb);\nregisterAlgorithm('3DES-CBC', forge.cipher.modes.cbc);\nregisterAlgorithm('3DES-CFB', forge.cipher.modes.cfb);\nregisterAlgorithm('3DES-OFB', forge.cipher.modes.ofb);\nregisterAlgorithm('3DES-CTR', forge.cipher.modes.ctr);\n\nfunction registerAlgorithm(name, mode) {\n  var factory = function() {\n    return new forge.des.Algorithm(name, mode);\n  };\n  forge.cipher.registerAlgorithm(name, factory);\n}\n\n/** DES implementation **/\n\nvar spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];\nvar spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];\nvar spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];\nvar spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];\nvar spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];\nvar spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];\nvar spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];\nvar spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];\n\n/**\n * Create necessary sub keys.\n *\n * @param key the 64-bit or 192-bit key.\n *\n * @return the expanded keys.\n */\nfunction _createKeys(key) {\n  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],\n      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],\n      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],\n      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],\n      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],\n      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],\n      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],\n      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],\n      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],\n      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],\n      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],\n      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],\n      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],\n      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];\n\n  // how many iterations (1 for des, 3 for triple des)\n  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n  var iterations = key.length() > 8 ? 3 : 1;\n\n  // stores the return keys\n  var keys = [];\n\n  // now define the left shifts which need to be done\n  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];\n\n  var n = 0, tmp;\n  for(var j = 0; j < iterations; j++) {\n    var left = key.getInt32();\n    var right = key.getInt32();\n\n    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n    right ^= tmp;\n    left ^= (tmp << 4);\n\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= (tmp << -16);\n\n    tmp = ((left >>> 2) ^ right) & 0x33333333;\n    right ^= tmp;\n    left ^= (tmp << 2);\n\n    tmp = ((right >>> -16) ^ left) & 0x0000ffff;\n    left ^= tmp;\n    right ^= (tmp << -16);\n\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= (tmp << 1);\n\n    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n    left ^= tmp;\n    right ^= (tmp << 8);\n\n    tmp = ((left >>> 1) ^ right) & 0x55555555;\n    right ^= tmp;\n    left ^= (tmp << 1);\n\n    // right needs to be shifted and OR'd with last four bits of left\n    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);\n\n    // left needs to be put upside down\n    left = ((right << 24) | ((right << 8) & 0xff0000) |\n      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));\n    right = tmp;\n\n    // now go through and perform these shifts on the left and right keys\n    for(var i = 0; i < shifts.length; ++i) {\n      //shift the keys either one or two bits to the left\n      if(shifts[i]) {\n        left = (left << 2) | (left >>> 26);\n        right = (right << 2) | (right >>> 26);\n      } else {\n        left = (left << 1) | (left >>> 27);\n        right = (right << 1) | (right >>> 27);\n      }\n      left &= -0xf;\n      right &= -0xf;\n\n      // now apply PC-2, in such a way that E is easier when encrypting or\n      // decrypting this conversion will look like PC-2 except only the last 6\n      // bits of each byte are used rather than 48 consecutive bits and the\n      // order of lines will be according to how the S selection functions will\n      // be applied: S2, S4, S6, S8, S1, S3, S5, S7\n      var lefttmp = (\n        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |\n        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |\n        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |\n        pc2bytes6[(left >>> 4) & 0xf]);\n      var righttmp = (\n        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |\n        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |\n        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |\n        pc2bytes13[(right >>> 4) & 0xf]);\n      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;\n      keys[n++] = lefttmp ^ tmp;\n      keys[n++] = righttmp ^ (tmp << 16);\n    }\n  }\n\n  return keys;\n}\n\n/**\n * Updates a single block (1 byte) using DES. The update will either\n * encrypt or decrypt the block.\n *\n * @param keys the expanded keys.\n * @param input the input block (an array of 32-bit words).\n * @param output the updated output block.\n * @param decrypt true to decrypt the block, false to encrypt it.\n */\nfunction _updateBlock(keys, input, output, decrypt) {\n  // set up loops for single or triple DES\n  var iterations = keys.length === 32 ? 3 : 9;\n  var looping;\n  if(iterations === 3) {\n    looping = decrypt ? [30, -2, -2] : [0, 32, 2];\n  } else {\n    looping = (decrypt ?\n      [94, 62, -2, 32, 64, 2, 30, -2, -2] :\n      [0, 32, 2, 62, 30, -2, 64, 96, 2]);\n  }\n\n  var tmp;\n\n  var left = input[0];\n  var right = input[1];\n\n  // first each 64 bit chunk of the message must be permuted according to IP\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= (tmp << 4);\n\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= (tmp << 16);\n\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= (tmp << 2);\n\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= (tmp << 8);\n\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= (tmp << 1);\n\n  // rotate left 1 bit\n  left = ((left << 1) | (left >>> 31));\n  right = ((right << 1) | (right >>> 31));\n\n  for(var j = 0; j < iterations; j += 3) {\n    var endloop = looping[j + 1];\n    var loopinc = looping[j + 2];\n\n    // now go through and perform the encryption or decryption\n    for(var i = looping[j]; i != endloop; i += loopinc) {\n      var right1 = right ^ keys[i];\n      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];\n\n      // passing these bytes through the S selection functions\n      tmp = left;\n      left = right;\n      right = tmp ^ (\n        spfunction2[(right1 >>> 24) & 0x3f] |\n        spfunction4[(right1 >>> 16) & 0x3f] |\n        spfunction6[(right1 >>>  8) & 0x3f] |\n        spfunction8[right1 & 0x3f] |\n        spfunction1[(right2 >>> 24) & 0x3f] |\n        spfunction3[(right2 >>> 16) & 0x3f] |\n        spfunction5[(right2 >>>  8) & 0x3f] |\n        spfunction7[right2 & 0x3f]);\n    }\n    // unreverse left and right\n    tmp = left;\n    left = right;\n    right = tmp;\n  }\n\n  // rotate right 1 bit\n  left = ((left >>> 1) | (left << 31));\n  right = ((right >>> 1) | (right << 31));\n\n  // now perform IP-1, which is IP in the opposite direction\n  tmp = ((left >>> 1) ^ right) & 0x55555555;\n  right ^= tmp;\n  left ^= (tmp << 1);\n\n  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;\n  left ^= tmp;\n  right ^= (tmp << 8);\n\n  tmp = ((right >>> 2) ^ left) & 0x33333333;\n  left ^= tmp;\n  right ^= (tmp << 2);\n\n  tmp = ((left >>> 16) ^ right) & 0x0000ffff;\n  right ^= tmp;\n  left ^= (tmp << 16);\n\n  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;\n  right ^= tmp;\n  left ^= (tmp << 4);\n\n  output[0] = left;\n  output[1] = right;\n}\n\n/**\n * Deprecated. Instead, use:\n *\n * forge.cipher.createCipher('DES-<mode>', key);\n * forge.cipher.createDecipher('DES-<mode>', key);\n *\n * Creates a deprecated DES cipher object. This object's mode will default to\n * CBC (cipher-block-chaining).\n *\n * The key may be given as a binary-encoded string of bytes or a byte buffer.\n *\n * @param options the options to use.\n *          key the symmetric key to use (64 or 192 bits).\n *          output the buffer to write to.\n *          decrypt true for decryption, false for encryption.\n *          mode the cipher mode to use (default: 'CBC').\n *\n * @return the cipher.\n */\nfunction _createCipher(options) {\n  options = options || {};\n  var mode = (options.mode || 'CBC').toUpperCase();\n  var algorithm = 'DES-' + mode;\n\n  var cipher;\n  if(options.decrypt) {\n    cipher = forge.cipher.createDecipher(algorithm, options.key);\n  } else {\n    cipher = forge.cipher.createCipher(algorithm, options.key);\n  }\n\n  // backwards compatible start API\n  var start = cipher.start;\n  cipher.start = function(iv, options) {\n    // backwards compatibility: support second arg as output buffer\n    var output = null;\n    if(options instanceof forge.util.ByteBuffer) {\n      output = options;\n      options = {};\n    }\n    options = options || {};\n    options.output = output;\n    options.iv = iv;\n    start.call(cipher, options);\n  };\n\n  return cipher;\n}\n","/**\n * Copyright (c) 2019 Digital Bazaar, Inc.\n */\n\nvar forge = require('./forge');\nrequire('./asn1');\nvar asn1 = forge.asn1;\n\nexports.privateKeyValidator = {\n  // PrivateKeyInfo\n  name: 'PrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'PrivateKeyInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // privateKeyAlgorithm\n    name: 'PrivateKeyInfo.privateKeyAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'privateKeyOid'\n    }]\n  }, {\n    // PrivateKey\n    name: 'PrivateKeyInfo',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'privateKey'\n  }]\n};\n\nexports.publicKeyValidator = {\n  name: 'SubjectPublicKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  captureAsn1: 'subjectPublicKeyInfo',\n  value: [{\n    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'publicKeyOid'\n    }]\n  },\n  // capture group for ed25519PublicKey\n  {\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.BITSTRING,\n    constructed: false,\n    composed: true,\n    captureBitStringValue: 'ed25519PublicKey'\n  }\n  // FIXME: this is capture group for rsaPublicKey, use it in this API or\n  // discard?\n  /* {\n    // subjectPublicKey\n    name: 'SubjectPublicKeyInfo.subjectPublicKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.BITSTRING,\n    constructed: false,\n    value: [{\n      // RSAPublicKey\n      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      optional: true,\n      captureAsn1: 'rsaPublicKey'\n    }]\n  } */\n  ]\n};\n","/**\n * Node.js module for Forge.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2016 Digital Bazaar, Inc.\n */\nmodule.exports = require('./forge');\nrequire('./aes');\nrequire('./aesCipherSuites');\nrequire('./asn1');\nrequire('./cipher');\nrequire('./des');\nrequire('./ed25519');\nrequire('./hmac');\nrequire('./kem');\nrequire('./log');\nrequire('./md.all');\nrequire('./mgf1');\nrequire('./pbkdf2');\nrequire('./pem');\nrequire('./pkcs1');\nrequire('./pkcs12');\nrequire('./pkcs7');\nrequire('./pki');\nrequire('./prime');\nrequire('./prng');\nrequire('./pss');\nrequire('./random');\nrequire('./rc2');\nrequire('./ssh');\nrequire('./tls');\nrequire('./util');\n","/**\n * Javascript implementation of Abstract Syntax Notation Number One.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n *\n * An API for storing data using the Abstract Syntax Notation Number One\n * format using DER (Distinguished Encoding Rules) encoding. This encoding is\n * commonly used to store data for PKI, i.e. X.509 Certificates, and this\n * implementation exists for that purpose.\n *\n * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract\n * syntax of information without restricting the way the information is encoded\n * for transmission. It provides a standard that allows for open systems\n * communication. ASN.1 defines the syntax of information data and a number of\n * simple data types as well as a notation for describing them and specifying\n * values for them.\n *\n * The RSA algorithm creates public and private keys that are often stored in\n * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This\n * class provides the most basic functionality required to store and load DSA\n * keys that are encoded according to ASN.1.\n *\n * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)\n * and DER (Distinguished Encoding Rules). DER is just a subset of BER that\n * has stricter requirements for how data must be encoded.\n *\n * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)\n * and a byte array for the value of this ASN1 structure which may be data or a\n * list of ASN.1 structures.\n *\n * Each ASN.1 structure using BER is (Tag-Length-Value):\n *\n * | byte 0 | bytes X | bytes Y |\n * |--------|---------|----------\n * |  tag   | length  |  value  |\n *\n * ASN.1 allows for tags to be of \"High-tag-number form\" which allows a tag to\n * be two or more octets, but that is not supported by this class. A tag is\n * only 1 byte. Bits 1-5 give the tag number (ie the data type within a\n * particular 'class'), 6 indicates whether or not the ASN.1 value is\n * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If\n * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,\n * then the class is APPLICATION. If only bit 8 is set, then the class is\n * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.\n * The tag numbers for the data types for the class UNIVERSAL are listed below:\n *\n * UNIVERSAL 0 Reserved for use by the encoding rules\n * UNIVERSAL 1 Boolean type\n * UNIVERSAL 2 Integer type\n * UNIVERSAL 3 Bitstring type\n * UNIVERSAL 4 Octetstring type\n * UNIVERSAL 5 Null type\n * UNIVERSAL 6 Object identifier type\n * UNIVERSAL 7 Object descriptor type\n * UNIVERSAL 8 External type and Instance-of type\n * UNIVERSAL 9 Real type\n * UNIVERSAL 10 Enumerated type\n * UNIVERSAL 11 Embedded-pdv type\n * UNIVERSAL 12 UTF8String type\n * UNIVERSAL 13 Relative object identifier type\n * UNIVERSAL 14-15 Reserved for future editions\n * UNIVERSAL 16 Sequence and Sequence-of types\n * UNIVERSAL 17 Set and Set-of types\n * UNIVERSAL 18-22, 25-30 Character string types\n * UNIVERSAL 23-24 Time types\n *\n * The length of an ASN.1 structure is specified after the tag identifier.\n * There is a definite form and an indefinite form. The indefinite form may\n * be used if the encoding is constructed and not all immediately available.\n * The indefinite form is encoded using a length byte with only the 8th bit\n * set. The end of the constructed object is marked using end-of-contents\n * octets (two zero bytes).\n *\n * The definite form looks like this:\n *\n * The length may take up 1 or more bytes, it depends on the length of the\n * value of the ASN.1 structure. DER encoding requires that if the ASN.1\n * structure has a value that has a length greater than 127, more than 1 byte\n * will be used to store its length, otherwise just one byte will be used.\n * This is strict.\n *\n * In the case that the length of the ASN.1 value is less than 127, 1 octet\n * (byte) is used to store the \"short form\" length. The 8th bit has a value of\n * 0 indicating the length is \"short form\" and not \"long form\" and bits 7-1\n * give the length of the data. (The 8th bit is the left-most, most significant\n * bit: also known as big endian or network format).\n *\n * In the case that the length of the ASN.1 value is greater than 127, 2 to\n * 127 octets (bytes) are used to store the \"long form\" length. The first\n * byte's 8th bit is set to 1 to indicate the length is \"long form.\" Bits 7-1\n * give the number of additional octets. All following octets are in base 256\n * with the most significant digit first (typical big-endian binary unsigned\n * integer storage). So, for instance, if the length of a value was 257, the\n * first byte would be set to:\n *\n * 10000010 = 130 = 0x82.\n *\n * This indicates there are 2 octets (base 256) for the length. The second and\n * third bytes (the octets just mentioned) would store the length in base 256:\n *\n * octet 2: 00000001 = 1 * 256^1 = 256\n * octet 3: 00000001 = 1 * 256^0 = 1\n * total = 257\n *\n * The algorithm for converting a js integer value of 257 to base-256 is:\n *\n * var value = 257;\n * var bytes = [];\n * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first\n * bytes[1] = value & 0xFF;        // least significant byte last\n *\n * On the ASN.1 UNIVERSAL Object Identifier (OID) type:\n *\n * An OID can be written like: \"value1.value2.value3...valueN\"\n *\n * The DER encoding rules:\n *\n * The first byte has the value 40 * value1 + value2.\n * The following bytes, if any, encode the remaining values. Each value is\n * encoded in base 128, most significant digit first (big endian), with as\n * few digits as possible, and the most significant bit of each byte set\n * to 1 except the last in each value's encoding. For example: Given the\n * OID \"1.2.840.113549\", its DER encoding is (remember each byte except the\n * last one in each encoding is OR'd with 0x80):\n *\n * byte 1: 40 * 1 + 2 = 42 = 0x2A.\n * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648\n * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D\n *\n * The final value is: 0x2A864886F70D.\n * The full OID (including ASN.1 tag and length of 6 bytes) is:\n * 0x06062A864886F70D\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./oids');\n\n/* ASN.1 API */\nvar asn1 = module.exports = forge.asn1 = forge.asn1 || {};\n\n/**\n * ASN.1 classes.\n */\nasn1.Class = {\n  UNIVERSAL:        0x00,\n  APPLICATION:      0x40,\n  CONTEXT_SPECIFIC: 0x80,\n  PRIVATE:          0xC0\n};\n\n/**\n * ASN.1 types. Not all types are supported by this implementation, only\n * those necessary to implement a simple PKI are implemented.\n */\nasn1.Type = {\n  NONE:             0,\n  BOOLEAN:          1,\n  INTEGER:          2,\n  BITSTRING:        3,\n  OCTETSTRING:      4,\n  NULL:             5,\n  OID:              6,\n  ODESC:            7,\n  EXTERNAL:         8,\n  REAL:             9,\n  ENUMERATED:      10,\n  EMBEDDED:        11,\n  UTF8:            12,\n  ROID:            13,\n  SEQUENCE:        16,\n  SET:             17,\n  PRINTABLESTRING: 19,\n  IA5STRING:       22,\n  UTCTIME:         23,\n  GENERALIZEDTIME: 24,\n  BMPSTRING:       30\n};\n\n/**\n * Creates a new asn1 object.\n *\n * @param tagClass the tag class for the object.\n * @param type the data type (tag number) for the object.\n * @param constructed true if the asn1 object is in constructed form.\n * @param value the value for the object, if it is not constructed.\n * @param [options] the options to use:\n *          [bitStringContents] the plain BIT STRING content including padding\n *            byte.\n *\n * @return the asn1 object.\n */\nasn1.create = function(tagClass, type, constructed, value, options) {\n  /* An asn1 object has a tagClass, a type, a constructed flag, and a\n    value. The value's type depends on the constructed flag. If\n    constructed, it will contain a list of other asn1 objects. If not,\n    it will contain the ASN.1 value as an array of bytes formatted\n    according to the ASN.1 data type. */\n\n  // remove undefined values\n  if(forge.util.isArray(value)) {\n    var tmp = [];\n    for(var i = 0; i < value.length; ++i) {\n      if(value[i] !== undefined) {\n        tmp.push(value[i]);\n      }\n    }\n    value = tmp;\n  }\n\n  var obj = {\n    tagClass: tagClass,\n    type: type,\n    constructed: constructed,\n    composed: constructed || forge.util.isArray(value),\n    value: value\n  };\n  if(options && 'bitStringContents' in options) {\n    // TODO: copy byte buffer if it's a buffer not a string\n    obj.bitStringContents = options.bitStringContents;\n    // TODO: add readonly flag to avoid this overhead\n    // save copy to detect changes\n    obj.original = asn1.copy(obj);\n  }\n  return obj;\n};\n\n/**\n * Copies an asn1 object.\n *\n * @param obj the asn1 object.\n * @param [options] copy options:\n *          [excludeBitStringContents] true to not copy bitStringContents\n *\n * @return the a copy of the asn1 object.\n */\nasn1.copy = function(obj, options) {\n  var copy;\n\n  if(forge.util.isArray(obj)) {\n    copy = [];\n    for(var i = 0; i < obj.length; ++i) {\n      copy.push(asn1.copy(obj[i], options));\n    }\n    return copy;\n  }\n\n  if(typeof obj === 'string') {\n    // TODO: copy byte buffer if it's a buffer not a string\n    return obj;\n  }\n\n  copy = {\n    tagClass: obj.tagClass,\n    type: obj.type,\n    constructed: obj.constructed,\n    composed: obj.composed,\n    value: asn1.copy(obj.value, options)\n  };\n  if(options && !options.excludeBitStringContents) {\n    // TODO: copy byte buffer if it's a buffer not a string\n    copy.bitStringContents = obj.bitStringContents;\n  }\n  return copy;\n};\n\n/**\n * Compares asn1 objects for equality.\n *\n * Note this function does not run in constant time.\n *\n * @param obj1 the first asn1 object.\n * @param obj2 the second asn1 object.\n * @param [options] compare options:\n *          [includeBitStringContents] true to compare bitStringContents\n *\n * @return true if the asn1 objects are equal.\n */\nasn1.equals = function(obj1, obj2, options) {\n  if(forge.util.isArray(obj1)) {\n    if(!forge.util.isArray(obj2)) {\n      return false;\n    }\n    if(obj1.length !== obj2.length) {\n      return false;\n    }\n    for(var i = 0; i < obj1.length; ++i) {\n      if(!asn1.equals(obj1[i], obj2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if(typeof obj1 !== typeof obj2) {\n    return false;\n  }\n\n  if(typeof obj1 === 'string') {\n    return obj1 === obj2;\n  }\n\n  var equal = obj1.tagClass === obj2.tagClass &&\n    obj1.type === obj2.type &&\n    obj1.constructed === obj2.constructed &&\n    obj1.composed === obj2.composed &&\n    asn1.equals(obj1.value, obj2.value);\n  if(options && options.includeBitStringContents) {\n    equal = equal && (obj1.bitStringContents === obj2.bitStringContents);\n  }\n\n  return equal;\n};\n\n/**\n * Gets the length of a BER-encoded ASN.1 value.\n *\n * In case the length is not specified, undefined is returned.\n *\n * @param b the BER-encoded ASN.1 byte buffer, starting with the first\n *          length byte.\n *\n * @return the length of the BER-encoded ASN.1 value or undefined.\n */\nasn1.getBerValueLength = function(b) {\n  // TODO: move this function and related DER/BER functions to a der.js\n  // file; better abstract ASN.1 away from der/ber.\n  var b2 = b.getByte();\n  if(b2 === 0x80) {\n    return undefined;\n  }\n\n  // see if the length is \"short form\" or \"long form\" (bit 8 set)\n  var length;\n  var longForm = b2 & 0x80;\n  if(!longForm) {\n    // length is just the first byte\n    length = b2;\n  } else {\n    // the number of bytes the length is specified in bits 7 through 1\n    // and each length byte is in big-endian base-256\n    length = b.getInt((b2 & 0x7F) << 3);\n  }\n  return length;\n};\n\n/**\n * Check if the byte buffer has enough bytes. Throws an Error if not.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the bytes remaining in the current parsing state.\n * @param n the number of bytes the buffer must have.\n */\nfunction _checkBufferLength(bytes, remaining, n) {\n  if(n > remaining) {\n    var error = new Error('Too few bytes to parse DER.');\n    error.available = bytes.length();\n    error.remaining = remaining;\n    error.requested = n;\n    throw error;\n  }\n}\n\n/**\n * Gets the length of a BER-encoded ASN.1 value.\n *\n * In case the length is not specified, undefined is returned.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the bytes remaining in the current parsing state.\n *\n * @return the length of the BER-encoded ASN.1 value or undefined.\n */\nvar _getValueLength = function(bytes, remaining) {\n  // TODO: move this function and related DER/BER functions to a der.js\n  // file; better abstract ASN.1 away from der/ber.\n  // fromDer already checked that this byte exists\n  var b2 = bytes.getByte();\n  remaining--;\n  if(b2 === 0x80) {\n    return undefined;\n  }\n\n  // see if the length is \"short form\" or \"long form\" (bit 8 set)\n  var length;\n  var longForm = b2 & 0x80;\n  if(!longForm) {\n    // length is just the first byte\n    length = b2;\n  } else {\n    // the number of bytes the length is specified in bits 7 through 1\n    // and each length byte is in big-endian base-256\n    var longFormBytes = b2 & 0x7F;\n    _checkBufferLength(bytes, remaining, longFormBytes);\n    length = bytes.getInt(longFormBytes << 3);\n  }\n  // FIXME: this will only happen for 32 bit getInt with high bit set\n  if(length < 0) {\n    throw new Error('Negative length: ' + length);\n  }\n  return length;\n};\n\n/**\n * Parses an asn1 object from a byte buffer in DER format.\n *\n * @param bytes the byte buffer to parse from.\n * @param [strict] true to be strict when checking value lengths, false to\n *          allow truncated values (default: true).\n * @param [options] object with options or boolean strict flag\n *          [strict] true to be strict when checking value lengths, false to\n *            allow truncated values (default: true).\n *          [parseAllBytes] true to ensure all bytes are parsed\n *            (default: true)\n *          [decodeBitStrings] true to attempt to decode the content of\n *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that\n *            without schema support to understand the data context this can\n *            erroneously decode values that happen to be valid ASN.1. This\n *            flag will be deprecated or removed as soon as schema support is\n *            available. (default: true)\n *\n * @throws Will throw an error for various malformed input conditions.\n *\n * @return the parsed asn1 object.\n */\nasn1.fromDer = function(bytes, options) {\n  if(options === undefined) {\n    options = {\n      strict: true,\n      parseAllBytes: true,\n      decodeBitStrings: true\n    };\n  }\n  if(typeof options === 'boolean') {\n    options = {\n      strict: options,\n      parseAllBytes: true,\n      decodeBitStrings: true\n    };\n  }\n  if(!('strict' in options)) {\n    options.strict = true;\n  }\n  if(!('parseAllBytes' in options)) {\n    options.parseAllBytes = true;\n  }\n  if(!('decodeBitStrings' in options)) {\n    options.decodeBitStrings = true;\n  }\n\n  // wrap in buffer if needed\n  if(typeof bytes === 'string') {\n    bytes = forge.util.createBuffer(bytes);\n  }\n\n  var byteCount = bytes.length();\n  var value = _fromDer(bytes, bytes.length(), 0, options);\n  if(options.parseAllBytes && bytes.length() !== 0) {\n    var error = new Error('Unparsed DER bytes remain after ASN.1 parsing.');\n    error.byteCount = byteCount;\n    error.remaining = bytes.length();\n    throw error;\n  }\n  return value;\n};\n\n/**\n * Internal function to parse an asn1 object from a byte buffer in DER format.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the number of bytes remaining for this chunk.\n * @param depth the current parsing depth.\n * @param options object with same options as fromDer().\n *\n * @return the parsed asn1 object.\n */\nfunction _fromDer(bytes, remaining, depth, options) {\n  // temporary storage for consumption calculations\n  var start;\n\n  // minimum length for ASN.1 DER structure is 2\n  _checkBufferLength(bytes, remaining, 2);\n\n  // get the first byte\n  var b1 = bytes.getByte();\n  // consumed one byte\n  remaining--;\n\n  // get the tag class\n  var tagClass = (b1 & 0xC0);\n\n  // get the type (bits 1-5)\n  var type = b1 & 0x1F;\n\n  // get the variable value length and adjust remaining bytes\n  start = bytes.length();\n  var length = _getValueLength(bytes, remaining);\n  remaining -= start - bytes.length();\n\n  // ensure there are enough bytes to get the value\n  if(length !== undefined && length > remaining) {\n    if(options.strict) {\n      var error = new Error('Too few bytes to read ASN.1 value.');\n      error.available = bytes.length();\n      error.remaining = remaining;\n      error.requested = length;\n      throw error;\n    }\n    // Note: be lenient with truncated values and use remaining state bytes\n    length = remaining;\n  }\n\n  // value storage\n  var value;\n  // possible BIT STRING contents storage\n  var bitStringContents;\n\n  // constructed flag is bit 6 (32 = 0x20) of the first byte\n  var constructed = ((b1 & 0x20) === 0x20);\n  if(constructed) {\n    // parse child asn1 objects from the value\n    value = [];\n    if(length === undefined) {\n      // asn1 object of indefinite length, read until end tag\n      for(;;) {\n        _checkBufferLength(bytes, remaining, 2);\n        if(bytes.bytes(2) === String.fromCharCode(0, 0)) {\n          bytes.getBytes(2);\n          remaining -= 2;\n          break;\n        }\n        start = bytes.length();\n        value.push(_fromDer(bytes, remaining, depth + 1, options));\n        remaining -= start - bytes.length();\n      }\n    } else {\n      // parsing asn1 object of definite length\n      while(length > 0) {\n        start = bytes.length();\n        value.push(_fromDer(bytes, length, depth + 1, options));\n        remaining -= start - bytes.length();\n        length -= start - bytes.length();\n      }\n    }\n  }\n\n  // if a BIT STRING, save the contents including padding\n  if(value === undefined && tagClass === asn1.Class.UNIVERSAL &&\n    type === asn1.Type.BITSTRING) {\n    bitStringContents = bytes.bytes(length);\n  }\n\n  // determine if a non-constructed value should be decoded as a composed\n  // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)\n  // can be used this way.\n  if(value === undefined && options.decodeBitStrings &&\n    tagClass === asn1.Class.UNIVERSAL &&\n    // FIXME: OCTET STRINGs not yet supported here\n    // .. other parts of forge expect to decode OCTET STRINGs manually\n    (type === asn1.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/) &&\n    length > 1) {\n    // save read position\n    var savedRead = bytes.read;\n    var savedRemaining = remaining;\n    var unused = 0;\n    if(type === asn1.Type.BITSTRING) {\n      /* The first octet gives the number of bits by which the length of the\n        bit string is less than the next multiple of eight (this is called\n        the \"number of unused bits\").\n\n        The second and following octets give the value of the bit string\n        converted to an octet string. */\n      _checkBufferLength(bytes, remaining, 1);\n      unused = bytes.getByte();\n      remaining--;\n    }\n    // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs\n    if(unused === 0) {\n      try {\n        // attempt to parse child asn1 object from the value\n        // (stored in array to signal composed value)\n        start = bytes.length();\n        var subOptions = {\n          // enforce strict mode to avoid parsing ASN.1 from plain data\n          strict: true,\n          decodeBitStrings: true\n        };\n        var composed = _fromDer(bytes, remaining, depth + 1, subOptions);\n        var used = start - bytes.length();\n        remaining -= used;\n        if(type == asn1.Type.BITSTRING) {\n          used++;\n        }\n\n        // if the data all decoded and the class indicates UNIVERSAL or\n        // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object\n        var tc = composed.tagClass;\n        if(used === length &&\n          (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {\n          value = [composed];\n        }\n      } catch(ex) {\n      }\n    }\n    if(value === undefined) {\n      // restore read position\n      bytes.read = savedRead;\n      remaining = savedRemaining;\n    }\n  }\n\n  if(value === undefined) {\n    // asn1 not constructed or composed, get raw value\n    // TODO: do DER to OID conversion and vice-versa in .toDer?\n\n    if(length === undefined) {\n      if(options.strict) {\n        throw new Error('Non-constructed ASN.1 object of indefinite length.');\n      }\n      // be lenient and use remaining state bytes\n      length = remaining;\n    }\n\n    if(type === asn1.Type.BMPSTRING) {\n      value = '';\n      for(; length > 0; length -= 2) {\n        _checkBufferLength(bytes, remaining, 2);\n        value += String.fromCharCode(bytes.getInt16());\n        remaining -= 2;\n      }\n    } else {\n      value = bytes.getBytes(length);\n      remaining -= length;\n    }\n  }\n\n  // add BIT STRING contents if available\n  var asn1Options = bitStringContents === undefined ? null : {\n    bitStringContents: bitStringContents\n  };\n\n  // create and return asn1 object\n  return asn1.create(tagClass, type, constructed, value, asn1Options);\n}\n\n/**\n * Converts the given asn1 object to a buffer of bytes in DER format.\n *\n * @param asn1 the asn1 object to convert to bytes.\n *\n * @return the buffer of bytes.\n */\nasn1.toDer = function(obj) {\n  var bytes = forge.util.createBuffer();\n\n  // build the first byte\n  var b1 = obj.tagClass | obj.type;\n\n  // for storing the ASN.1 value\n  var value = forge.util.createBuffer();\n\n  // use BIT STRING contents if available and data not changed\n  var useBitStringContents = false;\n  if('bitStringContents' in obj) {\n    useBitStringContents = true;\n    if(obj.original) {\n      useBitStringContents = asn1.equals(obj, obj.original);\n    }\n  }\n\n  if(useBitStringContents) {\n    value.putBytes(obj.bitStringContents);\n  } else if(obj.composed) {\n    // if composed, use each child asn1 object's DER bytes as value\n    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed\n    // from other asn1 objects\n    if(obj.constructed) {\n      b1 |= 0x20;\n    } else {\n      // type is a bit string, add unused bits of 0x00\n      value.putByte(0x00);\n    }\n\n    // add all of the child DER bytes together\n    for(var i = 0; i < obj.value.length; ++i) {\n      if(obj.value[i] !== undefined) {\n        value.putBuffer(asn1.toDer(obj.value[i]));\n      }\n    }\n  } else {\n    // use asn1.value directly\n    if(obj.type === asn1.Type.BMPSTRING) {\n      for(var i = 0; i < obj.value.length; ++i) {\n        value.putInt16(obj.value.charCodeAt(i));\n      }\n    } else {\n      // ensure integer is minimally-encoded\n      // TODO: should all leading bytes be stripped vs just one?\n      // .. ex '00 00 01' => '01'?\n      if(obj.type === asn1.Type.INTEGER &&\n        obj.value.length > 1 &&\n        // leading 0x00 for positive integer\n        ((obj.value.charCodeAt(0) === 0 &&\n        (obj.value.charCodeAt(1) & 0x80) === 0) ||\n        // leading 0xFF for negative integer\n        (obj.value.charCodeAt(0) === 0xFF &&\n        (obj.value.charCodeAt(1) & 0x80) === 0x80))) {\n        value.putBytes(obj.value.substr(1));\n      } else {\n        value.putBytes(obj.value);\n      }\n    }\n  }\n\n  // add tag byte\n  bytes.putByte(b1);\n\n  // use \"short form\" encoding\n  if(value.length() <= 127) {\n    // one byte describes the length\n    // bit 8 = 0 and bits 7-1 = length\n    bytes.putByte(value.length() & 0x7F);\n  } else {\n    // use \"long form\" encoding\n    // 2 to 127 bytes describe the length\n    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes\n    // other bytes: length in base 256, big-endian\n    var len = value.length();\n    var lenBytes = '';\n    do {\n      lenBytes += String.fromCharCode(len & 0xFF);\n      len = len >>> 8;\n    } while(len > 0);\n\n    // set first byte to # bytes used to store the length and turn on\n    // bit 8 to indicate long-form length is used\n    bytes.putByte(lenBytes.length | 0x80);\n\n    // concatenate length bytes in reverse since they were generated\n    // little endian and we need big endian\n    for(var i = lenBytes.length - 1; i >= 0; --i) {\n      bytes.putByte(lenBytes.charCodeAt(i));\n    }\n  }\n\n  // concatenate value bytes\n  bytes.putBuffer(value);\n  return bytes;\n};\n\n/**\n * Converts an OID dot-separated string to a byte buffer. The byte buffer\n * contains only the DER-encoded value, not any tag or length bytes.\n *\n * @param oid the OID dot-separated string.\n *\n * @return the byte buffer.\n */\nasn1.oidToDer = function(oid) {\n  // split OID into individual values\n  var values = oid.split('.');\n  var bytes = forge.util.createBuffer();\n\n  // first byte is 40 * value1 + value2\n  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));\n  // other bytes are each value in base 128 with 8th bit set except for\n  // the last byte for each value\n  var last, valueBytes, value, b;\n  for(var i = 2; i < values.length; ++i) {\n    // produce value bytes in reverse because we don't know how many\n    // bytes it will take to store the value\n    last = true;\n    valueBytes = [];\n    value = parseInt(values[i], 10);\n    do {\n      b = value & 0x7F;\n      value = value >>> 7;\n      // if value is not last, then turn on 8th bit\n      if(!last) {\n        b |= 0x80;\n      }\n      valueBytes.push(b);\n      last = false;\n    } while(value > 0);\n\n    // add value bytes in reverse (needs to be in big endian)\n    for(var n = valueBytes.length - 1; n >= 0; --n) {\n      bytes.putByte(valueBytes[n]);\n    }\n  }\n\n  return bytes;\n};\n\n/**\n * Converts a DER-encoded byte buffer to an OID dot-separated string. The\n * byte buffer should contain only the DER-encoded value, not any tag or\n * length bytes.\n *\n * @param bytes the byte buffer.\n *\n * @return the OID dot-separated string.\n */\nasn1.derToOid = function(bytes) {\n  var oid;\n\n  // wrap in buffer if needed\n  if(typeof bytes === 'string') {\n    bytes = forge.util.createBuffer(bytes);\n  }\n\n  // first byte is 40 * value1 + value2\n  var b = bytes.getByte();\n  oid = Math.floor(b / 40) + '.' + (b % 40);\n\n  // other bytes are each value in base 128 with 8th bit set except for\n  // the last byte for each value\n  var value = 0;\n  while(bytes.length() > 0) {\n    b = bytes.getByte();\n    value = value << 7;\n    // not the last byte for the value\n    if(b & 0x80) {\n      value += b & 0x7F;\n    } else {\n      // last byte\n      oid += '.' + (value + b);\n      value = 0;\n    }\n  }\n\n  return oid;\n};\n\n/**\n * Converts a UTCTime value to a date.\n *\n * Note: GeneralizedTime has 4 digits for the year and is used for X.509\n * dates past 2049. Parsing that structure hasn't been implemented yet.\n *\n * @param utc the UTCTime value to convert.\n *\n * @return the date.\n */\nasn1.utcTimeToDate = function(utc) {\n  /* The following formats can be used:\n\n    YYMMDDhhmmZ\n    YYMMDDhhmm+hh'mm'\n    YYMMDDhhmm-hh'mm'\n    YYMMDDhhmmssZ\n    YYMMDDhhmmss+hh'mm'\n    YYMMDDhhmmss-hh'mm'\n\n    Where:\n\n    YY is the least significant two digits of the year\n    MM is the month (01 to 12)\n    DD is the day (01 to 31)\n    hh is the hour (00 to 23)\n    mm are the minutes (00 to 59)\n    ss are the seconds (00 to 59)\n    Z indicates that local time is GMT, + indicates that local time is\n    later than GMT, and - indicates that local time is earlier than GMT\n    hh' is the absolute value of the offset from GMT in hours\n    mm' is the absolute value of the offset from GMT in minutes */\n  var date = new Date();\n\n  // if YY >= 50 use 19xx, if YY < 50 use 20xx\n  var year = parseInt(utc.substr(0, 2), 10);\n  year = (year >= 50) ? 1900 + year : 2000 + year;\n  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month\n  var DD = parseInt(utc.substr(4, 2), 10);\n  var hh = parseInt(utc.substr(6, 2), 10);\n  var mm = parseInt(utc.substr(8, 2), 10);\n  var ss = 0;\n\n  // not just YYMMDDhhmmZ\n  if(utc.length > 11) {\n    // get character after minutes\n    var c = utc.charAt(10);\n    var end = 10;\n\n    // see if seconds are present\n    if(c !== '+' && c !== '-') {\n      // get seconds\n      ss = parseInt(utc.substr(10, 2), 10);\n      end += 2;\n    }\n  }\n\n  // update date\n  date.setUTCFullYear(year, MM, DD);\n  date.setUTCHours(hh, mm, ss, 0);\n\n  if(end) {\n    // get +/- after end of time\n    c = utc.charAt(end);\n    if(c === '+' || c === '-') {\n      // get hours+minutes offset\n      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);\n      var mmoffset = parseInt(utc.substr(end + 4, 2), 10);\n\n      // calculate offset in milliseconds\n      var offset = hhoffset * 60 + mmoffset;\n      offset *= 60000;\n\n      // apply offset\n      if(c === '+') {\n        date.setTime(+date - offset);\n      } else {\n        date.setTime(+date + offset);\n      }\n    }\n  }\n\n  return date;\n};\n\n/**\n * Converts a GeneralizedTime value to a date.\n *\n * @param gentime the GeneralizedTime value to convert.\n *\n * @return the date.\n */\nasn1.generalizedTimeToDate = function(gentime) {\n  /* The following formats can be used:\n\n    YYYYMMDDHHMMSS\n    YYYYMMDDHHMMSS.fff\n    YYYYMMDDHHMMSSZ\n    YYYYMMDDHHMMSS.fffZ\n    YYYYMMDDHHMMSS+hh'mm'\n    YYYYMMDDHHMMSS.fff+hh'mm'\n    YYYYMMDDHHMMSS-hh'mm'\n    YYYYMMDDHHMMSS.fff-hh'mm'\n\n    Where:\n\n    YYYY is the year\n    MM is the month (01 to 12)\n    DD is the day (01 to 31)\n    hh is the hour (00 to 23)\n    mm are the minutes (00 to 59)\n    ss are the seconds (00 to 59)\n    .fff is the second fraction, accurate to three decimal places\n    Z indicates that local time is GMT, + indicates that local time is\n    later than GMT, and - indicates that local time is earlier than GMT\n    hh' is the absolute value of the offset from GMT in hours\n    mm' is the absolute value of the offset from GMT in minutes */\n  var date = new Date();\n\n  var YYYY = parseInt(gentime.substr(0, 4), 10);\n  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month\n  var DD = parseInt(gentime.substr(6, 2), 10);\n  var hh = parseInt(gentime.substr(8, 2), 10);\n  var mm = parseInt(gentime.substr(10, 2), 10);\n  var ss = parseInt(gentime.substr(12, 2), 10);\n  var fff = 0;\n  var offset = 0;\n  var isUTC = false;\n\n  if(gentime.charAt(gentime.length - 1) === 'Z') {\n    isUTC = true;\n  }\n\n  var end = gentime.length - 5, c = gentime.charAt(end);\n  if(c === '+' || c === '-') {\n    // get hours+minutes offset\n    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);\n    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);\n\n    // calculate offset in milliseconds\n    offset = hhoffset * 60 + mmoffset;\n    offset *= 60000;\n\n    // apply offset\n    if(c === '+') {\n      offset *= -1;\n    }\n\n    isUTC = true;\n  }\n\n  // check for second fraction\n  if(gentime.charAt(14) === '.') {\n    fff = parseFloat(gentime.substr(14), 10) * 1000;\n  }\n\n  if(isUTC) {\n    date.setUTCFullYear(YYYY, MM, DD);\n    date.setUTCHours(hh, mm, ss, fff);\n\n    // apply offset\n    date.setTime(+date + offset);\n  } else {\n    date.setFullYear(YYYY, MM, DD);\n    date.setHours(hh, mm, ss, fff);\n  }\n\n  return date;\n};\n\n/**\n * Converts a date to a UTCTime value.\n *\n * Note: GeneralizedTime has 4 digits for the year and is used for X.509\n * dates past 2049. Converting to a GeneralizedTime hasn't been\n * implemented yet.\n *\n * @param date the date to convert.\n *\n * @return the UTCTime value.\n */\nasn1.dateToUtcTime = function(date) {\n  // TODO: validate; currently assumes proper format\n  if(typeof date === 'string') {\n    return date;\n  }\n\n  var rval = '';\n\n  // create format YYMMDDhhmmssZ\n  var format = [];\n  format.push(('' + date.getUTCFullYear()).substr(2));\n  format.push('' + (date.getUTCMonth() + 1));\n  format.push('' + date.getUTCDate());\n  format.push('' + date.getUTCHours());\n  format.push('' + date.getUTCMinutes());\n  format.push('' + date.getUTCSeconds());\n\n  // ensure 2 digits are used for each format entry\n  for(var i = 0; i < format.length; ++i) {\n    if(format[i].length < 2) {\n      rval += '0';\n    }\n    rval += format[i];\n  }\n  rval += 'Z';\n\n  return rval;\n};\n\n/**\n * Converts a date to a GeneralizedTime value.\n *\n * @param date the date to convert.\n *\n * @return the GeneralizedTime value as a string.\n */\nasn1.dateToGeneralizedTime = function(date) {\n  // TODO: validate; currently assumes proper format\n  if(typeof date === 'string') {\n    return date;\n  }\n\n  var rval = '';\n\n  // create format YYYYMMDDHHMMSSZ\n  var format = [];\n  format.push('' + date.getUTCFullYear());\n  format.push('' + (date.getUTCMonth() + 1));\n  format.push('' + date.getUTCDate());\n  format.push('' + date.getUTCHours());\n  format.push('' + date.getUTCMinutes());\n  format.push('' + date.getUTCSeconds());\n\n  // ensure 2 digits are used for each format entry\n  for(var i = 0; i < format.length; ++i) {\n    if(format[i].length < 2) {\n      rval += '0';\n    }\n    rval += format[i];\n  }\n  rval += 'Z';\n\n  return rval;\n};\n\n/**\n * Converts a javascript integer to a DER-encoded byte buffer to be used\n * as the value for an INTEGER type.\n *\n * @param x the integer.\n *\n * @return the byte buffer.\n */\nasn1.integerToDer = function(x) {\n  var rval = forge.util.createBuffer();\n  if(x >= -0x80 && x < 0x80) {\n    return rval.putSignedInt(x, 8);\n  }\n  if(x >= -0x8000 && x < 0x8000) {\n    return rval.putSignedInt(x, 16);\n  }\n  if(x >= -0x800000 && x < 0x800000) {\n    return rval.putSignedInt(x, 24);\n  }\n  if(x >= -0x80000000 && x < 0x80000000) {\n    return rval.putSignedInt(x, 32);\n  }\n  var error = new Error('Integer too large; max is 32-bits.');\n  error.integer = x;\n  throw error;\n};\n\n/**\n * Converts a DER-encoded byte buffer to a javascript integer. This is\n * typically used to decode the value of an INTEGER type.\n *\n * @param bytes the byte buffer.\n *\n * @return the integer.\n */\nasn1.derToInteger = function(bytes) {\n  // wrap in buffer if needed\n  if(typeof bytes === 'string') {\n    bytes = forge.util.createBuffer(bytes);\n  }\n\n  var n = bytes.length() * 8;\n  if(n > 32) {\n    throw new Error('Integer too large; max is 32-bits.');\n  }\n  return bytes.getSignedInt(n);\n};\n\n/**\n * Validates that the given ASN.1 object is at least a super set of the\n * given ASN.1 structure. Only tag classes and types are checked. An\n * optional map may also be provided to capture ASN.1 values while the\n * structure is checked.\n *\n * To capture an ASN.1 value, set an object in the validator's 'capture'\n * parameter to the key to use in the capture map. To capture the full\n * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including\n * the leading unused bits counter byte, specify 'captureBitStringContents'.\n * To capture BIT STRING bytes, without the leading unused bits counter byte,\n * specify 'captureBitStringValue'.\n *\n * Objects in the validator may set a field 'optional' to true to indicate\n * that it isn't necessary to pass validation.\n *\n * @param obj the ASN.1 object to validate.\n * @param v the ASN.1 structure validator.\n * @param capture an optional map to capture values in.\n * @param errors an optional array for storing validation errors.\n *\n * @return true on success, false on failure.\n */\nasn1.validate = function(obj, v, capture, errors) {\n  var rval = false;\n\n  // ensure tag class and type are the same if specified\n  if((obj.tagClass === v.tagClass || typeof(v.tagClass) === 'undefined') &&\n    (obj.type === v.type || typeof(v.type) === 'undefined')) {\n    // ensure constructed flag is the same if specified\n    if(obj.constructed === v.constructed ||\n      typeof(v.constructed) === 'undefined') {\n      rval = true;\n\n      // handle sub values\n      if(v.value && forge.util.isArray(v.value)) {\n        var j = 0;\n        for(var i = 0; rval && i < v.value.length; ++i) {\n          rval = v.value[i].optional || false;\n          if(obj.value[j]) {\n            rval = asn1.validate(obj.value[j], v.value[i], capture, errors);\n            if(rval) {\n              ++j;\n            } else if(v.value[i].optional) {\n              rval = true;\n            }\n          }\n          if(!rval && errors) {\n            errors.push(\n              '[' + v.name + '] ' +\n              'Tag class \"' + v.tagClass + '\", type \"' +\n              v.type + '\" expected value length \"' +\n              v.value.length + '\", got \"' +\n              obj.value.length + '\"');\n          }\n        }\n      }\n\n      if(rval && capture) {\n        if(v.capture) {\n          capture[v.capture] = obj.value;\n        }\n        if(v.captureAsn1) {\n          capture[v.captureAsn1] = obj;\n        }\n        if(v.captureBitStringContents && 'bitStringContents' in obj) {\n          capture[v.captureBitStringContents] = obj.bitStringContents;\n        }\n        if(v.captureBitStringValue && 'bitStringContents' in obj) {\n          var value;\n          if(obj.bitStringContents.length < 2) {\n            capture[v.captureBitStringValue] = '';\n          } else {\n            // FIXME: support unused bits with data shifting\n            var unused = obj.bitStringContents.charCodeAt(0);\n            if(unused !== 0) {\n              throw new Error(\n                'captureBitStringValue only supported for zero unused bits');\n            }\n            capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);\n          }\n        }\n      }\n    } else if(errors) {\n      errors.push(\n        '[' + v.name + '] ' +\n        'Expected constructed \"' + v.constructed + '\", got \"' +\n        obj.constructed + '\"');\n    }\n  } else if(errors) {\n    if(obj.tagClass !== v.tagClass) {\n      errors.push(\n        '[' + v.name + '] ' +\n        'Expected tag class \"' + v.tagClass + '\", got \"' +\n        obj.tagClass + '\"');\n    }\n    if(obj.type !== v.type) {\n      errors.push(\n        '[' + v.name + '] ' +\n        'Expected type \"' + v.type + '\", got \"' + obj.type + '\"');\n    }\n  }\n  return rval;\n};\n\n// regex for testing for non-latin characters\nvar _nonLatinRegex = /[^\\\\u0000-\\\\u00ff]/;\n\n/**\n * Pretty prints an ASN.1 object to a string.\n *\n * @param obj the object to write out.\n * @param level the level in the tree.\n * @param indentation the indentation to use.\n *\n * @return the string.\n */\nasn1.prettyPrint = function(obj, level, indentation) {\n  var rval = '';\n\n  // set default level and indentation\n  level = level || 0;\n  indentation = indentation || 2;\n\n  // start new line for deep levels\n  if(level > 0) {\n    rval += '\\n';\n  }\n\n  // create indent\n  var indent = '';\n  for(var i = 0; i < level * indentation; ++i) {\n    indent += ' ';\n  }\n\n  // print class:type\n  rval += indent + 'Tag: ';\n  switch(obj.tagClass) {\n  case asn1.Class.UNIVERSAL:\n    rval += 'Universal:';\n    break;\n  case asn1.Class.APPLICATION:\n    rval += 'Application:';\n    break;\n  case asn1.Class.CONTEXT_SPECIFIC:\n    rval += 'Context-Specific:';\n    break;\n  case asn1.Class.PRIVATE:\n    rval += 'Private:';\n    break;\n  }\n\n  if(obj.tagClass === asn1.Class.UNIVERSAL) {\n    rval += obj.type;\n\n    // known types\n    switch(obj.type) {\n    case asn1.Type.NONE:\n      rval += ' (None)';\n      break;\n    case asn1.Type.BOOLEAN:\n      rval += ' (Boolean)';\n      break;\n    case asn1.Type.INTEGER:\n      rval += ' (Integer)';\n      break;\n    case asn1.Type.BITSTRING:\n      rval += ' (Bit string)';\n      break;\n    case asn1.Type.OCTETSTRING:\n      rval += ' (Octet string)';\n      break;\n    case asn1.Type.NULL:\n      rval += ' (Null)';\n      break;\n    case asn1.Type.OID:\n      rval += ' (Object Identifier)';\n      break;\n    case asn1.Type.ODESC:\n      rval += ' (Object Descriptor)';\n      break;\n    case asn1.Type.EXTERNAL:\n      rval += ' (External or Instance of)';\n      break;\n    case asn1.Type.REAL:\n      rval += ' (Real)';\n      break;\n    case asn1.Type.ENUMERATED:\n      rval += ' (Enumerated)';\n      break;\n    case asn1.Type.EMBEDDED:\n      rval += ' (Embedded PDV)';\n      break;\n    case asn1.Type.UTF8:\n      rval += ' (UTF8)';\n      break;\n    case asn1.Type.ROID:\n      rval += ' (Relative Object Identifier)';\n      break;\n    case asn1.Type.SEQUENCE:\n      rval += ' (Sequence)';\n      break;\n    case asn1.Type.SET:\n      rval += ' (Set)';\n      break;\n    case asn1.Type.PRINTABLESTRING:\n      rval += ' (Printable String)';\n      break;\n    case asn1.Type.IA5String:\n      rval += ' (IA5String (ASCII))';\n      break;\n    case asn1.Type.UTCTIME:\n      rval += ' (UTC time)';\n      break;\n    case asn1.Type.GENERALIZEDTIME:\n      rval += ' (Generalized time)';\n      break;\n    case asn1.Type.BMPSTRING:\n      rval += ' (BMP String)';\n      break;\n    }\n  } else {\n    rval += obj.type;\n  }\n\n  rval += '\\n';\n  rval += indent + 'Constructed: ' + obj.constructed + '\\n';\n\n  if(obj.composed) {\n    var subvalues = 0;\n    var sub = '';\n    for(var i = 0; i < obj.value.length; ++i) {\n      if(obj.value[i] !== undefined) {\n        subvalues += 1;\n        sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);\n        if((i + 1) < obj.value.length) {\n          sub += ',';\n        }\n      }\n    }\n    rval += indent + 'Sub values: ' + subvalues + sub;\n  } else {\n    rval += indent + 'Value: ';\n    if(obj.type === asn1.Type.OID) {\n      var oid = asn1.derToOid(obj.value);\n      rval += oid;\n      if(forge.pki && forge.pki.oids) {\n        if(oid in forge.pki.oids) {\n          rval += ' (' + forge.pki.oids[oid] + ') ';\n        }\n      }\n    }\n    if(obj.type === asn1.Type.INTEGER) {\n      try {\n        rval += asn1.derToInteger(obj.value);\n      } catch(ex) {\n        rval += '0x' + forge.util.bytesToHex(obj.value);\n      }\n    } else if(obj.type === asn1.Type.BITSTRING) {\n      // TODO: shift bits as needed to display without padding\n      if(obj.value.length > 1) {\n        // remove unused bits field\n        rval += '0x' + forge.util.bytesToHex(obj.value.slice(1));\n      } else {\n        rval += '(none)';\n      }\n      // show unused bit count\n      if(obj.value.length > 0) {\n        var unused = obj.value.charCodeAt(0);\n        if(unused == 1) {\n          rval += ' (1 unused bit shown)';\n        } else if(unused > 1) {\n          rval += ' (' + unused + ' unused bits shown)';\n        }\n      }\n    } else if(obj.type === asn1.Type.OCTETSTRING) {\n      if(!_nonLatinRegex.test(obj.value)) {\n        rval += '(' + obj.value + ') ';\n      }\n      rval += '0x' + forge.util.bytesToHex(obj.value);\n    } else if(obj.type === asn1.Type.UTF8) {\n      try {\n        rval += forge.util.decodeUtf8(obj.value);\n      } catch(e) {\n        if(e.message === 'URI malformed') {\n          rval +=\n            '0x' + forge.util.bytesToHex(obj.value) + ' (malformed UTF8)';\n        } else {\n          throw e;\n        }\n      }\n    } else if(obj.type === asn1.Type.PRINTABLESTRING ||\n      obj.type === asn1.Type.IA5String) {\n      rval += obj.value;\n    } else if(_nonLatinRegex.test(obj.value)) {\n      rval += '0x' + forge.util.bytesToHex(obj.value);\n    } else if(obj.value.length === 0) {\n      rval += '[null]';\n    } else {\n      rval += obj.value;\n    }\n  }\n\n  return rval;\n};\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n","/**\n * Supported cipher modes.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nforge.cipher = forge.cipher || {};\n\n// supported cipher modes\nvar modes = module.exports = forge.cipher.modes = forge.cipher.modes || {};\n\n/** Electronic codebook (ECB) (Don't use this; it's not secure) **/\n\nmodes.ecb = function(options) {\n  options = options || {};\n  this.name = 'ECB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n};\n\nmodes.ecb.prototype.start = function(options) {};\n\nmodes.ecb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodes.ecb.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // decrypt block\n  this.cipher.decrypt(this._inBlock, this._outBlock);\n\n  // write output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n};\n\nmodes.ecb.prototype.pad = function(input, options) {\n  // add PKCS#7 padding to block (each pad byte is the\n  // value of the number of pad bytes)\n  var padding = (input.length() === this.blockSize ?\n    this.blockSize : (this.blockSize - input.length()));\n  input.fillWithByte(padding, padding);\n  return true;\n};\n\nmodes.ecb.prototype.unpad = function(output, options) {\n  // check for error: input data not a multiple of blockSize\n  if(options.overflow > 0) {\n    return false;\n  }\n\n  // ensure padding byte count is valid\n  var len = output.length();\n  var count = output.at(len - 1);\n  if(count > (this.blockSize << 2)) {\n    return false;\n  }\n\n  // trim off padding bytes\n  output.truncate(count);\n  return true;\n};\n\n/** Cipher-block Chaining (CBC) **/\n\nmodes.cbc = function(options) {\n  options = options || {};\n  this.name = 'CBC';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n};\n\nmodes.cbc.prototype.start = function(options) {\n  // Note: legacy support for using IV residue (has security flaws)\n  // if IV is null, reuse block from previous processing\n  if(options.iv === null) {\n    // must have a previous block\n    if(!this._prev) {\n      throw new Error('Invalid IV parameter.');\n    }\n    this._iv = this._prev.slice(0);\n  } else if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  } else {\n    // save IV as \"previous\" block\n    this._iv = transformIV(options.iv, this.blockSize);\n    this._prev = this._iv.slice(0);\n  }\n};\n\nmodes.cbc.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  // CBC XOR's IV (or previous block) with plaintext\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = this._prev[i] ^ input.getInt32();\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // write output, save previous block\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i]);\n  }\n  this._prev = this._outBlock;\n};\n\nmodes.cbc.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {\n    return true;\n  }\n\n  // get next block\n  for(var i = 0; i < this._ints; ++i) {\n    this._inBlock[i] = input.getInt32();\n  }\n\n  // decrypt block\n  this.cipher.decrypt(this._inBlock, this._outBlock);\n\n  // write output, save previous ciphered block\n  // CBC XOR's IV (or previous block) with ciphertext\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._prev[i] ^ this._outBlock[i]);\n  }\n  this._prev = this._inBlock.slice(0);\n};\n\nmodes.cbc.prototype.pad = function(input, options) {\n  // add PKCS#7 padding to block (each pad byte is the\n  // value of the number of pad bytes)\n  var padding = (input.length() === this.blockSize ?\n    this.blockSize : (this.blockSize - input.length()));\n  input.fillWithByte(padding, padding);\n  return true;\n};\n\nmodes.cbc.prototype.unpad = function(output, options) {\n  // check for error: input data not a multiple of blockSize\n  if(options.overflow > 0) {\n    return false;\n  }\n\n  // ensure padding byte count is valid\n  var len = output.length();\n  var count = output.at(len - 1);\n  if(count > (this.blockSize << 2)) {\n    return false;\n  }\n\n  // trim off padding bytes\n  output.truncate(count);\n  return true;\n};\n\n/** Cipher feedback (CFB) **/\n\nmodes.cfb = function(options) {\n  options = options || {};\n  this.name = 'CFB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv, this.blockSize);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output, write input as output\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];\n      output.putInt32(this._inBlock[i]);\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output, write input as partial output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];\n    this._partialOutput.putInt32(this._partialBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._partialBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\nmodes.cfb.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block (CFB always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output, write input as output\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = input.getInt32();\n      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output, write input as partial output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialBlock[i] = input.getInt32();\n    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._partialBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\n/** Output feedback (OFB) **/\n\nmodes.ofb = function(options) {\n  options = options || {};\n  this.name = 'OFB';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv, this.blockSize);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(input.length() === 0) {\n    return true;\n  }\n\n  // encrypt block (OFB always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output and update next input\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(input.getInt32() ^ this._outBlock[i]);\n      this._inBlock[i] = this._outBlock[i];\n    }\n    return;\n  }\n\n  // handle partial block\n  var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n  if(partialBytes > 0) {\n    partialBytes = this.blockSize - partialBytes;\n  }\n\n  // XOR input with output\n  this._partialOutput.clear();\n  for(var i = 0; i < this._ints; ++i) {\n    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n  }\n\n  if(partialBytes > 0) {\n    // block still incomplete, restore input buffer\n    input.read -= this.blockSize;\n  } else {\n    // block complete, update input block\n    for(var i = 0; i < this._ints; ++i) {\n      this._inBlock[i] = this._outBlock[i];\n    }\n  }\n\n  // skip any previous partial bytes\n  if(this._partialBytes > 0) {\n    this._partialOutput.getBytes(this._partialBytes);\n  }\n\n  if(partialBytes > 0 && !finish) {\n    output.putBytes(this._partialOutput.getBytes(\n      partialBytes - this._partialBytes));\n    this._partialBytes = partialBytes;\n    return true;\n  }\n\n  output.putBytes(this._partialOutput.getBytes(\n    inputLength - this._partialBytes));\n  this._partialBytes = 0;\n};\n\nmodes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;\n\n/** Counter (CTR) **/\n\nmodes.ctr = function(options) {\n  options = options || {};\n  this.name = 'CTR';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = null;\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n};\n\nmodes.ctr.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // use IV as first input\n  this._iv = transformIV(options.iv, this.blockSize);\n  this._inBlock = this._iv.slice(0);\n  this._partialBytes = 0;\n};\n\nmodes.ctr.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block (CTR always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n  } else {\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if(partialBytes > 0) {\n      partialBytes = this.blockSize - partialBytes;\n    }\n\n    // XOR input with output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i) {\n      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n\n    if(partialBytes > 0) {\n      // block still incomplete, restore input buffer\n      input.read -= this.blockSize;\n    }\n\n    // skip any previous partial bytes\n    if(this._partialBytes > 0) {\n      this._partialOutput.getBytes(this._partialBytes);\n    }\n\n    if(partialBytes > 0 && !finish) {\n      output.putBytes(this._partialOutput.getBytes(\n        partialBytes - this._partialBytes));\n      this._partialBytes = partialBytes;\n      return true;\n    }\n\n    output.putBytes(this._partialOutput.getBytes(\n      inputLength - this._partialBytes));\n    this._partialBytes = 0;\n  }\n\n  // block complete, increment counter (input block)\n  inc32(this._inBlock);\n};\n\nmodes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;\n\n/** Galois/Counter Mode (GCM) **/\n\nmodes.gcm = function(options) {\n  options = options || {};\n  this.name = 'GCM';\n  this.cipher = options.cipher;\n  this.blockSize = options.blockSize || 16;\n  this._ints = this.blockSize / 4;\n  this._inBlock = new Array(this._ints);\n  this._outBlock = new Array(this._ints);\n  this._partialOutput = forge.util.createBuffer();\n  this._partialBytes = 0;\n\n  // R is actually this value concatenated with 120 more zero bits, but\n  // we only XOR against R so the other zeros have no effect -- we just\n  // apply this value to the first integer in a block\n  this._R = 0xE1000000;\n};\n\nmodes.gcm.prototype.start = function(options) {\n  if(!('iv' in options)) {\n    throw new Error('Invalid IV parameter.');\n  }\n  // ensure IV is a byte buffer\n  var iv = forge.util.createBuffer(options.iv);\n\n  // no ciphered data processed yet\n  this._cipherLength = 0;\n\n  // default additional data is none\n  var additionalData;\n  if('additionalData' in options) {\n    additionalData = forge.util.createBuffer(options.additionalData);\n  } else {\n    additionalData = forge.util.createBuffer();\n  }\n\n  // default tag length is 128 bits\n  if('tagLength' in options) {\n    this._tagLength = options.tagLength;\n  } else {\n    this._tagLength = 128;\n  }\n\n  // if tag is given, ensure tag matches tag length\n  this._tag = null;\n  if(options.decrypt) {\n    // save tag to check later\n    this._tag = forge.util.createBuffer(options.tag).getBytes();\n    if(this._tag.length !== (this._tagLength / 8)) {\n      throw new Error('Authentication tag does not match tag length.');\n    }\n  }\n\n  // create tmp storage for hash calculation\n  this._hashBlock = new Array(this._ints);\n\n  // no tag generated yet\n  this.tag = null;\n\n  // generate hash subkey\n  // (apply block cipher to \"zero\" block)\n  this._hashSubkey = new Array(this._ints);\n  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);\n\n  // generate table M\n  // use 4-bit tables (32 component decomposition of a 16 byte value)\n  // 8-bit tables take more space and are known to have security\n  // vulnerabilities (in native implementations)\n  this.componentBits = 4;\n  this._m = this.generateHashTable(this._hashSubkey, this.componentBits);\n\n  // Note: support IV length different from 96 bits? (only supporting\n  // 96 bits is recommended by NIST SP-800-38D)\n  // generate J_0\n  var ivLength = iv.length();\n  if(ivLength === 12) {\n    // 96-bit IV\n    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];\n  } else {\n    // IV is NOT 96-bits\n    this._j0 = [0, 0, 0, 0];\n    while(iv.length() > 0) {\n      this._j0 = this.ghash(\n        this._hashSubkey, this._j0,\n        [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);\n    }\n    this._j0 = this.ghash(\n      this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));\n  }\n\n  // generate ICB (initial counter block)\n  this._inBlock = this._j0.slice(0);\n  inc32(this._inBlock);\n  this._partialBytes = 0;\n\n  // consume authentication data\n  additionalData = forge.util.createBuffer(additionalData);\n  // save additional data length as a BE 64-bit number\n  this._aDataLength = from64To32(additionalData.length() * 8);\n  // pad additional data to 128 bit (16 byte) block size\n  var overflow = additionalData.length() % this.blockSize;\n  if(overflow) {\n    additionalData.fillWithByte(0, this.blockSize - overflow);\n  }\n  this._s = [0, 0, 0, 0];\n  while(additionalData.length() > 0) {\n    this._s = this.ghash(this._hashSubkey, this._s, [\n      additionalData.getInt32(),\n      additionalData.getInt32(),\n      additionalData.getInt32(),\n      additionalData.getInt32()\n    ]);\n  }\n};\n\nmodes.gcm.prototype.encrypt = function(input, output, finish) {\n  // not enough input to encrypt\n  var inputLength = input.length();\n  if(inputLength === 0) {\n    return true;\n  }\n\n  // encrypt block\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // handle full block\n  if(this._partialBytes === 0 && inputLength >= this.blockSize) {\n    // XOR input with output\n    for(var i = 0; i < this._ints; ++i) {\n      output.putInt32(this._outBlock[i] ^= input.getInt32());\n    }\n    this._cipherLength += this.blockSize;\n  } else {\n    // handle partial block\n    var partialBytes = (this.blockSize - inputLength) % this.blockSize;\n    if(partialBytes > 0) {\n      partialBytes = this.blockSize - partialBytes;\n    }\n\n    // XOR input with output\n    this._partialOutput.clear();\n    for(var i = 0; i < this._ints; ++i) {\n      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);\n    }\n\n    if(partialBytes <= 0 || finish) {\n      // handle overflow prior to hashing\n      if(finish) {\n        // get block overflow\n        var overflow = inputLength % this.blockSize;\n        this._cipherLength += overflow;\n        // truncate for hash function\n        this._partialOutput.truncate(this.blockSize - overflow);\n      } else {\n        this._cipherLength += this.blockSize;\n      }\n\n      // get output block for hashing\n      for(var i = 0; i < this._ints; ++i) {\n        this._outBlock[i] = this._partialOutput.getInt32();\n      }\n      this._partialOutput.read -= this.blockSize;\n    }\n\n    // skip any previous partial bytes\n    if(this._partialBytes > 0) {\n      this._partialOutput.getBytes(this._partialBytes);\n    }\n\n    if(partialBytes > 0 && !finish) {\n      // block still incomplete, restore input buffer, get partial output,\n      // and return early\n      input.read -= this.blockSize;\n      output.putBytes(this._partialOutput.getBytes(\n        partialBytes - this._partialBytes));\n      this._partialBytes = partialBytes;\n      return true;\n    }\n\n    output.putBytes(this._partialOutput.getBytes(\n      inputLength - this._partialBytes));\n    this._partialBytes = 0;\n  }\n\n  // update hash block S\n  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);\n\n  // increment counter (input block)\n  inc32(this._inBlock);\n};\n\nmodes.gcm.prototype.decrypt = function(input, output, finish) {\n  // not enough input to decrypt\n  var inputLength = input.length();\n  if(inputLength < this.blockSize && !(finish && inputLength > 0)) {\n    return true;\n  }\n\n  // encrypt block (GCM always uses encryption mode)\n  this.cipher.encrypt(this._inBlock, this._outBlock);\n\n  // increment counter (input block)\n  inc32(this._inBlock);\n\n  // update hash block S\n  this._hashBlock[0] = input.getInt32();\n  this._hashBlock[1] = input.getInt32();\n  this._hashBlock[2] = input.getInt32();\n  this._hashBlock[3] = input.getInt32();\n  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);\n\n  // XOR hash input with output\n  for(var i = 0; i < this._ints; ++i) {\n    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);\n  }\n\n  // increment cipher data length\n  if(inputLength < this.blockSize) {\n    this._cipherLength += inputLength % this.blockSize;\n  } else {\n    this._cipherLength += this.blockSize;\n  }\n};\n\nmodes.gcm.prototype.afterFinish = function(output, options) {\n  var rval = true;\n\n  // handle overflow\n  if(options.decrypt && options.overflow) {\n    output.truncate(this.blockSize - options.overflow);\n  }\n\n  // handle authentication tag\n  this.tag = forge.util.createBuffer();\n\n  // concatenate additional data length with cipher length\n  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));\n\n  // include lengths in hash\n  this._s = this.ghash(this._hashSubkey, this._s, lengths);\n\n  // do GCTR(J_0, S)\n  var tag = [];\n  this.cipher.encrypt(this._j0, tag);\n  for(var i = 0; i < this._ints; ++i) {\n    this.tag.putInt32(this._s[i] ^ tag[i]);\n  }\n\n  // trim tag to length\n  this.tag.truncate(this.tag.length() % (this._tagLength / 8));\n\n  // check authentication tag\n  if(options.decrypt && this.tag.bytes() !== this._tag) {\n    rval = false;\n  }\n\n  return rval;\n};\n\n/**\n * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois\n * field multiplication. The field, GF(2^128), is defined by the polynomial:\n *\n * x^128 + x^7 + x^2 + x + 1\n *\n * Which is represented in little-endian binary form as: 11100001 (0xe1). When\n * the value of a coefficient is 1, a bit is set. The value R, is the\n * concatenation of this value and 120 zero bits, yielding a 128-bit value\n * which matches the block size.\n *\n * This function will multiply two elements (vectors of bytes), X and Y, in\n * the field GF(2^128). The result is initialized to zero. For each bit of\n * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)\n * by the current value of Y. For each bit, the value of Y will be raised by\n * a power of x (multiplied by the polynomial x). This can be achieved by\n * shifting Y once to the right. If the current value of Y, prior to being\n * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.\n * Otherwise, we must divide by R after shifting to find the remainder.\n *\n * @param x the first block to multiply by the second.\n * @param y the second block to multiply by the first.\n *\n * @return the block result of the multiplication.\n */\nmodes.gcm.prototype.multiply = function(x, y) {\n  var z_i = [0, 0, 0, 0];\n  var v_i = y.slice(0);\n\n  // calculate Z_128 (block has 128 bits)\n  for(var i = 0; i < 128; ++i) {\n    // if x_i is 0, Z_{i+1} = Z_i (unchanged)\n    // else Z_{i+1} = Z_i ^ V_i\n    // get x_i by finding 32-bit int position, then left shift 1 by remainder\n    var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));\n    if(x_i) {\n      z_i[0] ^= v_i[0];\n      z_i[1] ^= v_i[1];\n      z_i[2] ^= v_i[2];\n      z_i[3] ^= v_i[3];\n    }\n\n    // if LSB(V_i) is 1, V_i = V_i >> 1\n    // else V_i = (V_i >> 1) ^ R\n    this.pow(v_i, v_i);\n  }\n\n  return z_i;\n};\n\nmodes.gcm.prototype.pow = function(x, out) {\n  // if LSB(x) is 1, x = x >>> 1\n  // else x = (x >>> 1) ^ R\n  var lsb = x[3] & 1;\n\n  // always do x >>> 1:\n  // starting with the rightmost integer, shift each integer to the right\n  // one bit, pulling in the bit from the integer to the left as its top\n  // most bit (do this for the last 3 integers)\n  for(var i = 3; i > 0; --i) {\n    out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);\n  }\n  // shift the first integer normally\n  out[0] = x[0] >>> 1;\n\n  // if lsb was not set, then polynomial had a degree of 127 and doesn't\n  // need to divided; otherwise, XOR with R to find the remainder; we only\n  // need to XOR the first integer since R technically ends w/120 zero bits\n  if(lsb) {\n    out[0] ^= this._R;\n  }\n};\n\nmodes.gcm.prototype.tableMultiply = function(x) {\n  // assumes 4-bit tables are used\n  var z = [0, 0, 0, 0];\n  for(var i = 0; i < 32; ++i) {\n    var idx = (i / 8) | 0;\n    var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;\n    var ah = this._m[i][x_i];\n    z[0] ^= ah[0];\n    z[1] ^= ah[1];\n    z[2] ^= ah[2];\n    z[3] ^= ah[3];\n  }\n  return z;\n};\n\n/**\n * A continuing version of the GHASH algorithm that operates on a single\n * block. The hash block, last hash value (Ym) and the new block to hash\n * are given.\n *\n * @param h the hash block.\n * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.\n * @param x the block to hash.\n *\n * @return the hashed value (Ym).\n */\nmodes.gcm.prototype.ghash = function(h, y, x) {\n  y[0] ^= x[0];\n  y[1] ^= x[1];\n  y[2] ^= x[2];\n  y[3] ^= x[3];\n  return this.tableMultiply(y);\n  //return this.multiply(y, h);\n};\n\n/**\n * Precomputes a table for multiplying against the hash subkey. This\n * mechanism provides a substantial speed increase over multiplication\n * performed without a table. The table-based multiplication this table is\n * for solves X * H by multiplying each component of X by H and then\n * composing the results together using XOR.\n *\n * This function can be used to generate tables with different bit sizes\n * for the components, however, this implementation assumes there are\n * 32 components of X (which is a 16 byte vector), therefore each component\n * takes 4-bits (so the table is constructed with bits=4).\n *\n * @param h the hash subkey.\n * @param bits the bit size for a component.\n */\nmodes.gcm.prototype.generateHashTable = function(h, bits) {\n  // TODO: There are further optimizations that would use only the\n  // first table M_0 (or some variant) along with a remainder table;\n  // this can be explored in the future\n  var multiplier = 8 / bits;\n  var perInt = 4 * multiplier;\n  var size = 16 * multiplier;\n  var m = new Array(size);\n  for(var i = 0; i < size; ++i) {\n    var tmp = [0, 0, 0, 0];\n    var idx = (i / perInt) | 0;\n    var shft = ((perInt - 1 - (i % perInt)) * bits);\n    tmp[idx] = (1 << (bits - 1)) << shft;\n    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);\n  }\n  return m;\n};\n\n/**\n * Generates a table for multiplying against the hash subkey for one\n * particular component (out of all possible component values).\n *\n * @param mid the pre-multiplied value for the middle key of the table.\n * @param bits the bit size for a component.\n */\nmodes.gcm.prototype.generateSubHashTable = function(mid, bits) {\n  // compute the table quickly by minimizing the number of\n  // POW operations -- they only need to be performed for powers of 2,\n  // all other entries can be composed from those powers using XOR\n  var size = 1 << bits;\n  var half = size >>> 1;\n  var m = new Array(size);\n  m[half] = mid.slice(0);\n  var i = half >>> 1;\n  while(i > 0) {\n    // raise m0[2 * i] and store in m0[i]\n    this.pow(m[2 * i], m[i] = []);\n    i >>= 1;\n  }\n  i = 2;\n  while(i < half) {\n    for(var j = 1; j < i; ++j) {\n      var m_i = m[i];\n      var m_j = m[j];\n      m[i + j] = [\n        m_i[0] ^ m_j[0],\n        m_i[1] ^ m_j[1],\n        m_i[2] ^ m_j[2],\n        m_i[3] ^ m_j[3]\n      ];\n    }\n    i *= 2;\n  }\n  m[0] = [0, 0, 0, 0];\n  /* Note: We could avoid storing these by doing composition during multiply\n  calculate top half using composition by speed is preferred. */\n  for(i = half + 1; i < size; ++i) {\n    var c = m[i ^ half];\n    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];\n  }\n  return m;\n};\n\n/** Utility functions */\n\nfunction transformIV(iv, blockSize) {\n  if(typeof iv === 'string') {\n    // convert iv string into byte buffer\n    iv = forge.util.createBuffer(iv);\n  }\n\n  if(forge.util.isArray(iv) && iv.length > 4) {\n    // convert iv byte array into byte buffer\n    var tmp = iv;\n    iv = forge.util.createBuffer();\n    for(var i = 0; i < tmp.length; ++i) {\n      iv.putByte(tmp[i]);\n    }\n  }\n\n  if(iv.length() < blockSize) {\n    throw new Error(\n      'Invalid IV length; got ' + iv.length() +\n      ' bytes and expected ' + blockSize + ' bytes.');\n  }\n\n  if(!forge.util.isArray(iv)) {\n    // convert iv byte buffer into 32-bit integer array\n    var ints = [];\n    var blocks = blockSize / 4;\n    for(var i = 0; i < blocks; ++i) {\n      ints.push(iv.getInt32());\n    }\n    iv = ints;\n  }\n\n  return iv;\n}\n\nfunction inc32(block) {\n  // increment last 32 bits of block only\n  block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;\n}\n\nfunction from64To32(num) {\n  // convert 64-bit number to two BE Int32s\n  return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];\n}\n","/**\n * JavaScript implementation of Ed25519.\n *\n * Copyright (c) 2017-2019 Digital Bazaar, Inc.\n *\n * This implementation is based on the most excellent TweetNaCl which is\n * in the public domain. Many thanks to its contributors:\n *\n * https://github.com/dchest/tweetnacl-js\n */\nvar forge = require('./forge');\nrequire('./jsbn');\nrequire('./random');\nrequire('./sha512');\nrequire('./util');\nvar asn1Validator = require('./asn1-validator');\nvar publicKeyValidator = asn1Validator.publicKeyValidator;\nvar privateKeyValidator = asn1Validator.privateKeyValidator;\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\nvar ByteBuffer = forge.util.ByteBuffer;\nvar NativeBuffer = typeof Buffer === 'undefined' ? Uint8Array : Buffer;\n\n/*\n * Ed25519 algorithms, see RFC 8032:\n * https://tools.ietf.org/html/rfc8032\n */\nforge.pki = forge.pki || {};\nmodule.exports = forge.pki.ed25519 = forge.ed25519 = forge.ed25519 || {};\nvar ed25519 = forge.ed25519;\n\ned25519.constants = {};\ned25519.constants.PUBLIC_KEY_BYTE_LENGTH = 32;\ned25519.constants.PRIVATE_KEY_BYTE_LENGTH = 64;\ned25519.constants.SEED_BYTE_LENGTH = 32;\ned25519.constants.SIGN_BYTE_LENGTH = 64;\ned25519.constants.HASH_BYTE_LENGTH = 64;\n\ned25519.generateKeyPair = function(options) {\n  options = options || {};\n  var seed = options.seed;\n  if(seed === undefined) {\n    // generate seed\n    seed = forge.random.getBytesSync(ed25519.constants.SEED_BYTE_LENGTH);\n  } else if(typeof seed === 'string') {\n    if(seed.length !== ed25519.constants.SEED_BYTE_LENGTH) {\n      throw new TypeError(\n        '\"seed\" must be ' + ed25519.constants.SEED_BYTE_LENGTH +\n        ' bytes in length.');\n    }\n  } else if(!(seed instanceof Uint8Array)) {\n    throw new TypeError(\n      '\"seed\" must be a node.js Buffer, Uint8Array, or a binary string.');\n  }\n\n  seed = messageToNativeBuffer({message: seed, encoding: 'binary'});\n\n  var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);\n  var sk = new NativeBuffer(ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);\n  for(var i = 0; i < 32; ++i) {\n    sk[i] = seed[i];\n  }\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, privateKey: sk};\n};\n\n/**\n * Converts a private key from a RFC8410 ASN.1 encoding.\n *\n * @param obj - The asn1 representation of a private key.\n *\n * @returns {Object} keyInfo - The key information.\n * @returns {Buffer|Uint8Array} keyInfo.privateKeyBytes - 32 private key bytes.\n */\ned25519.privateKeyFromAsn1 = function(obj) {\n  var capture = {};\n  var errors = [];\n  var valid = forge.asn1.validate(obj, privateKeyValidator, capture, errors);\n  if(!valid) {\n    var error = new Error('Invalid Key.');\n    error.errors = errors;\n    throw error;\n  }\n  var oid = forge.asn1.derToOid(capture.privateKeyOid);\n  var ed25519Oid = forge.oids.EdDSA25519;\n  if(oid !== ed25519Oid) {\n    throw new Error('Invalid OID \"' + oid + '\"; OID must be \"' +\n      ed25519Oid + '\".');\n  }\n  var privateKey = capture.privateKey;\n  // manually extract the private key bytes from nested octet string, see FIXME:\n  // https://github.com/digitalbazaar/forge/blob/master/lib/asn1.js#L542\n  var privateKeyBytes = messageToNativeBuffer({\n    message: forge.asn1.fromDer(privateKey).value,\n    encoding: 'binary'\n  });\n  // TODO: RFC8410 specifies a format for encoding the public key bytes along\n  // with the private key bytes. `publicKeyBytes` can be returned in the\n  // future. https://tools.ietf.org/html/rfc8410#section-10.3\n  return {privateKeyBytes: privateKeyBytes};\n};\n\n/**\n * Converts a public key from a RFC8410 ASN.1 encoding.\n *\n * @param obj - The asn1 representation of a public key.\n *\n * @return {Buffer|Uint8Array} - 32 public key bytes.\n */\ned25519.publicKeyFromAsn1 = function(obj) {\n  // get SubjectPublicKeyInfo\n  var capture = {};\n  var errors = [];\n  var valid = forge.asn1.validate(obj, publicKeyValidator, capture, errors);\n  if(!valid) {\n    var error = new Error('Invalid Key.');\n    error.errors = errors;\n    throw error;\n  }\n  var oid = forge.asn1.derToOid(capture.publicKeyOid);\n  var ed25519Oid = forge.oids.EdDSA25519;\n  if(oid !== ed25519Oid) {\n    throw new Error('Invalid OID \"' + oid + '\"; OID must be \"' +\n      ed25519Oid + '\".');\n  }\n  var publicKeyBytes = capture.ed25519PublicKey;\n  if(publicKeyBytes.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {\n    throw new Error('Key length is invalid.');\n  }\n  return messageToNativeBuffer({\n    message: publicKeyBytes,\n    encoding: 'binary'\n  });\n};\n\ned25519.publicKeyFromPrivateKey = function(options) {\n  options = options || {};\n  var privateKey = messageToNativeBuffer({\n    message: options.privateKey, encoding: 'binary'\n  });\n  if(privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {\n    throw new TypeError(\n      '\"options.privateKey\" must have a byte length of ' +\n      ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);\n  }\n\n  var pk = new NativeBuffer(ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);\n  for(var i = 0; i < pk.length; ++i) {\n    pk[i] = privateKey[32 + i];\n  }\n  return pk;\n};\n\ned25519.sign = function(options) {\n  options = options || {};\n  var msg = messageToNativeBuffer(options);\n  var privateKey = messageToNativeBuffer({\n    message: options.privateKey,\n    encoding: 'binary'\n  });\n  if(privateKey.length === ed25519.constants.SEED_BYTE_LENGTH) {\n    var keyPair = ed25519.generateKeyPair({seed: privateKey});\n    privateKey = keyPair.privateKey;\n  } else if(privateKey.length !== ed25519.constants.PRIVATE_KEY_BYTE_LENGTH) {\n    throw new TypeError(\n      '\"options.privateKey\" must have a byte length of ' +\n      ed25519.constants.SEED_BYTE_LENGTH + ' or ' +\n      ed25519.constants.PRIVATE_KEY_BYTE_LENGTH);\n  }\n\n  var signedMsg = new NativeBuffer(\n    ed25519.constants.SIGN_BYTE_LENGTH + msg.length);\n  crypto_sign(signedMsg, msg, msg.length, privateKey);\n\n  var sig = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH);\n  for(var i = 0; i < sig.length; ++i) {\n    sig[i] = signedMsg[i];\n  }\n  return sig;\n};\n\ned25519.verify = function(options) {\n  options = options || {};\n  var msg = messageToNativeBuffer(options);\n  if(options.signature === undefined) {\n    throw new TypeError(\n      '\"options.signature\" must be a node.js Buffer, a Uint8Array, a forge ' +\n      'ByteBuffer, or a binary string.');\n  }\n  var sig = messageToNativeBuffer({\n    message: options.signature,\n    encoding: 'binary'\n  });\n  if(sig.length !== ed25519.constants.SIGN_BYTE_LENGTH) {\n    throw new TypeError(\n      '\"options.signature\" must have a byte length of ' +\n      ed25519.constants.SIGN_BYTE_LENGTH);\n  }\n  var publicKey = messageToNativeBuffer({\n    message: options.publicKey,\n    encoding: 'binary'\n  });\n  if(publicKey.length !== ed25519.constants.PUBLIC_KEY_BYTE_LENGTH) {\n    throw new TypeError(\n      '\"options.publicKey\" must have a byte length of ' +\n      ed25519.constants.PUBLIC_KEY_BYTE_LENGTH);\n  }\n\n  var sm = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);\n  var m = new NativeBuffer(ed25519.constants.SIGN_BYTE_LENGTH + msg.length);\n  var i;\n  for(i = 0; i < ed25519.constants.SIGN_BYTE_LENGTH; ++i) {\n    sm[i] = sig[i];\n  }\n  for(i = 0; i < msg.length; ++i) {\n    sm[i + ed25519.constants.SIGN_BYTE_LENGTH] = msg[i];\n  }\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nfunction messageToNativeBuffer(options) {\n  var message = options.message;\n  if(message instanceof Uint8Array || message instanceof NativeBuffer) {\n    return message;\n  }\n\n  var encoding = options.encoding;\n  if(message === undefined) {\n    if(options.md) {\n      // TODO: more rigorous validation that `md` is a MessageDigest\n      message = options.md.digest().getBytes();\n      encoding = 'binary';\n    } else {\n      throw new TypeError('\"options.message\" or \"options.md\" not specified.');\n    }\n  }\n\n  if(typeof message === 'string' && !encoding) {\n    throw new TypeError('\"options.encoding\" must be \"binary\" or \"utf8\".');\n  }\n\n  if(typeof message === 'string') {\n    if(typeof Buffer !== 'undefined') {\n      return Buffer.from(message, encoding);\n    }\n    message = new ByteBuffer(message, encoding);\n  } else if(!(message instanceof ByteBuffer)) {\n    throw new TypeError(\n      '\"options.message\" must be a node.js Buffer, a Uint8Array, a forge ' +\n      'ByteBuffer, or a string with \"options.encoding\" specifying its ' +\n      'encoding.');\n  }\n\n  // convert to native buffer\n  var buffer = new NativeBuffer(message.length());\n  for(var i = 0; i < buffer.length; ++i) {\n    buffer[i] = message.at(i);\n  }\n  return buffer;\n}\n\nvar gf0 = gf();\nvar gf1 = gf([1]);\nvar D = gf([\n  0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,\n  0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]);\nvar D2 = gf([\n  0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,\n  0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]);\nvar X = gf([\n  0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,\n  0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]);\nvar Y = gf([\n  0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,\n  0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]);\nvar L = new Float64Array([\n  0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58,\n  0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\nvar I = gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,\n  0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\n// TODO: update forge buffer implementation to use `Buffer` or `Uint8Array`,\n// whichever is available, to improve performance\nfunction sha512(msg, msgLen) {\n  // Note: `out` and `msg` are NativeBuffer\n  var md = forge.md.sha512.create();\n  var buffer = new ByteBuffer(msg);\n  md.update(buffer.getBytes(msgLen), 'binary');\n  var hash = md.digest().getBytes();\n  if(typeof Buffer !== 'undefined') {\n    return Buffer.from(hash, 'binary');\n  }\n  var out = new NativeBuffer(ed25519.constants.HASH_BYTE_LENGTH);\n  for(var i = 0; i < 64; ++i) {\n    out[i] = hash.charCodeAt(i);\n  }\n  return out;\n}\n\nfunction crypto_sign_keypair(pk, sk) {\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  var d = sha512(sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for(i = 0; i < 32; ++i) {\n    sk[i + 32] = pk[i];\n  }\n  return 0;\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  var d = sha512(sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for(i = 0; i < n; ++i) {\n    sm[64 + i] = m[i];\n  }\n  for(i = 0; i < 32; ++i) {\n    sm[32 + i] = d[32 + i];\n  }\n\n  var r = sha512(sm.subarray(32), n + 32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for(i = 32; i < 64; ++i) {\n    sm[i] = sk[i];\n  }\n  var h = sha512(sm, n + 64);\n  reduce(h);\n\n  for(i = 32; i < 64; ++i) {\n    x[i] = 0;\n  }\n  for(i = 0; i < 32; ++i) {\n    x[i] = r[i];\n  }\n  for(i = 0; i < 32; ++i) {\n    for(j = 0; j < 32; j++) {\n      x[i + j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i, mlen;\n  var t = new NativeBuffer(32);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  mlen = -1;\n  if(n < 64) {\n    return -1;\n  }\n\n  if(unpackneg(q, pk)) {\n    return -1;\n  }\n\n  for(i = 0; i < n; ++i) {\n    m[i] = sm[i];\n  }\n  for(i = 0; i < 32; ++i) {\n    m[i + 32] = pk[i];\n  }\n  var h = sha512(m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if(crypto_verify_32(sm, 0, t, 0)) {\n    for(i = 0; i < n; ++i) {\n      m[i] = 0;\n    }\n    return -1;\n  }\n\n  for(i = 0; i < n; ++i) {\n    m[i] = sm[i + 64];\n  }\n  mlen = n;\n  return mlen;\n}\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for(i = 63; i >= 32; --i) {\n    carry = 0;\n    for(j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = (x[j] + 128) >> 8;\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for(j = 0; j < 32; ++j) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for(j = 0; j < 32; ++j) {\n    x[j] -= carry * L[j];\n  }\n  for(i = 0; i < 32; ++i) {\n    x[i + 1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64);\n  for(var i = 0; i < 64; ++i) {\n    x[i] = r[i];\n    r[i] = 0;\n  }\n  modL(r, x);\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  for(var i = 0; i < 4; ++i) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for(i = 0; i < 16; ++i) {\n    t[i] = n[i];\n  }\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for(j = 0; j < 2; ++j) {\n    m[0] = t[0] - 0xffed;\n    for(i = 1; i < 15; ++i) {\n      m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n    b = (m[15] >> 16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1 - b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2 * i] = t[i] & 0xff;\n    o[2 * i + 1] = t[i] >> 8;\n  }\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if(neq25519(chk, num)) {\n    M(r[0], r[0], I);\n  }\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if(neq25519(chk, num)) {\n    return -1;\n  }\n\n  if(par25519(r[0]) === (p[31] >> 7)) {\n    Z(r[0], gf0, r[0]);\n  }\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for(i = 0; i < 16; ++i) {\n    o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n  }\n  o[15] &= 0x7fff;\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for(a = 0; a < 16; ++a) {\n    c[a] = i[a];\n  }\n  for(a = 250; a >= 0; --a) {\n    S(c, c);\n    if(a !== 1) {\n      M(c, c, i);\n    }\n  }\n  for(a = 0; a < 16; ++a) {\n    o[a] = c[a];\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new NativeBuffer(32);\n  var d = new NativeBuffer(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x, xi, y, yi, 32);\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i, d = 0;\n  for(i = 0; i < n; ++i) {\n    d |= x[xi + i] ^ y[yi + i];\n  }\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction par25519(a) {\n  var d = new NativeBuffer(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for(i = 255; i >= 0; --i) {\n    b = (s[(i / 8)|0] >> (i & 7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction set25519(r, a) {\n  var i;\n  for(i = 0; i < 16; i++) {\n    r[i] = a[i] | 0;\n  }\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for(a = 0; a < 16; ++a) {\n    c[a] = i[a];\n  }\n  for(a = 253; a >= 0; --a) {\n    S(c, c);\n    if(a !== 2 && a !== 4) {\n      M(c, c, i);\n    }\n  }\n  for(a = 0; a < 16; ++a) {\n    o[a] = c[a];\n  }\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for(i = 0; i < 16; ++i) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c - 1 + 37 * (c - 1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b - 1);\n  for(var i = 0; i < 16; ++i) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction gf(init) {\n  var i, r = new Float64Array(16);\n  if(init) {\n    for(i = 0; i < init.length; ++i) {\n      r[i] = init[i];\n    }\n  }\n  return r;\n}\n\nfunction A(o, a, b) {\n  for(var i = 0; i < 16; ++i) {\n    o[i] = a[i] + b[i];\n  }\n}\n\nfunction Z(o, a, b) {\n  for(var i = 0; i < 16; ++i) {\n    o[i] = a[i] - b[i];\n  }\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n","// Copyright (c) 2005  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n\n// Basic JavaScript BN library - subset useful for RSA encryption.\n\n/*\nLicensing (LICENSE)\n-------------------\n\nThis software is covered under the following copyright:\n*/\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n/*\nAddress all questions regarding this license to:\n\n  Tom Wu\n  tjw@cs.Stanford.EDU\n*/\nvar forge = require('./forge');\n\nmodule.exports = forge.jsbn = forge.jsbn || {};\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = ((canary&0xffffff)==0xefcafe);\n\n// (public) Constructor\nfunction BigInteger(a,b,c) {\n  this.data = [];\n  if(a != null)\n    if(\"number\" == typeof a) this.fromNumber(a,b,c);\n    else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n    else this.fromString(a,b);\n}\nforge.jsbn.BigInteger = BigInteger;\n\n// return new, unset BigInteger\nfunction nbi() { return new BigInteger(null); }\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i,x,w,j,c,n) {\n  while(--n >= 0) {\n    var v = x*this.data[i++]+w.data[j]+c;\n    c = Math.floor(v/0x4000000);\n    w.data[j++] = v&0x3ffffff;\n  }\n  return c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i,x,w,j,c,n) {\n  var xl = x&0x7fff, xh = x>>15;\n  while(--n >= 0) {\n    var l = this.data[i]&0x7fff;\n    var h = this.data[i++]>>15;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x7fff)<<15)+w.data[j]+(c&0x3fffffff);\n    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n    w.data[j++] = l&0x3fffffff;\n  }\n  return c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i,x,w,j,c,n) {\n  var xl = x&0x3fff, xh = x>>14;\n  while(--n >= 0) {\n    var l = this.data[i]&0x3fff;\n    var h = this.data[i++]>>14;\n    var m = xh*l+h*xl;\n    l = xl*l+((m&0x3fff)<<14)+w.data[j]+c;\n    c = (l>>28)+(m>>14)+xh*h;\n    w.data[j++] = l&0xfffffff;\n  }\n  return c;\n}\n\n// node.js (no browser)\nif(typeof(navigator) === 'undefined')\n{\n   BigInteger.prototype.am = am3;\n   dbits = 28;\n} else if(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n} else if(j_lm && (navigator.appName != \"Netscape\")) {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n} else { // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = ((1<<dbits)-1);\nBigInteger.prototype.DV = (1<<dbits);\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2,BI_FP);\nBigInteger.prototype.F1 = BI_FP-dbits;\nBigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr,vv;\nrr = \"0\".charCodeAt(0);\nfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\nrr = \"a\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\nrr = \"A\".charCodeAt(0);\nfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) { return BI_RM.charAt(n); }\nfunction intAt(s,i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return (c==null)?-1:c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for(var i = this.t-1; i >= 0; --i) r.data[i] = this.data[i];\n  r.t = this.t;\n  r.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = (x<0)?-1:0;\n  if(x > 0) this.data[0] = x;\n  else if(x < -1) this.data[0] = x+this.DV;\n  else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n// (protected) set from string and radix\nfunction bnpFromString(s,b) {\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 256) k = 8; // byte array\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else { this.fromRadix(s,b); return; }\n  this.t = 0;\n  this.s = 0;\n  var i = s.length, mi = false, sh = 0;\n  while(--i >= 0) {\n    var x = (k==8)?s[i]&0xff:intAt(s,i);\n    if(x < 0) {\n      if(s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n    mi = false;\n    if(sh == 0)\n      this.data[this.t++] = x;\n    else if(sh+k > this.DB) {\n      this.data[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n      this.data[this.t++] = (x>>(this.DB-sh));\n    } else\n      this.data[this.t-1] |= x<<sh;\n    sh += k;\n    if(sh >= this.DB) sh -= this.DB;\n  }\n  if(k == 8 && (s[0]&0x80) != 0) {\n    this.s = -1;\n    if(sh > 0) this.data[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n  }\n  this.clamp();\n  if(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s&this.DM;\n  while(this.t > 0 && this.data[this.t-1] == c) --this.t;\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  if(this.s < 0) return \"-\"+this.negate().toString(b);\n  var k;\n  if(b == 16) k = 4;\n  else if(b == 8) k = 3;\n  else if(b == 2) k = 1;\n  else if(b == 32) k = 5;\n  else if(b == 4) k = 2;\n  else return this.toRadix(b);\n  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n  var p = this.DB-(i*this.DB)%k;\n  if(i-- > 0) {\n    if(p < this.DB && (d = this.data[i]>>p) > 0) { m = true; r = int2char(d); }\n    while(i >= 0) {\n      if(p < k) {\n        d = (this.data[i]&((1<<p)-1))<<(k-p);\n        d |= this.data[--i]>>(p+=this.DB-k);\n      } else {\n        d = (this.data[i]>>(p-=k))&km;\n        if(p <= 0) { p += this.DB; --i; }\n      }\n      if(d > 0) m = true;\n      if(m) r += int2char(d);\n    }\n  }\n  return m?r:\"0\";\n}\n\n// (public) -this\nfunction bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n// (public) |this|\nfunction bnAbs() { return (this.s<0)?this.negate():this; }\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s-a.s;\n  if(r != 0) return r;\n  var i = this.t;\n  r = i-a.t;\n  if(r != 0) return (this.s<0)?-r:r;\n  while(--i >= 0) if((r=this.data[i]-a.data[i]) != 0) return r;\n  return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1, t;\n  if((t=x>>>16) != 0) { x = t; r += 16; }\n  if((t=x>>8) != 0) { x = t; r += 8; }\n  if((t=x>>4) != 0) { x = t; r += 4; }\n  if((t=x>>2) != 0) { x = t; r += 2; }\n  if((t=x>>1) != 0) { x = t; r += 1; }\n  return r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if(this.t <= 0) return 0;\n  return this.DB*(this.t-1)+nbits(this.data[this.t-1]^(this.s&this.DM));\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n,r) {\n  var i;\n  for(i = this.t-1; i >= 0; --i) r.data[i+n] = this.data[i];\n  for(i = n-1; i >= 0; --i) r.data[i] = 0;\n  r.t = this.t+n;\n  r.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n,r) {\n  for(var i = n; i < this.t; ++i) r.data[i-n] = this.data[i];\n  r.t = Math.max(this.t-n,0);\n  r.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n,r) {\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<cbs)-1;\n  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n  for(i = this.t-1; i >= 0; --i) {\n    r.data[i+ds+1] = (this.data[i]>>cbs)|c;\n    c = (this.data[i]&bm)<<bs;\n  }\n  for(i = ds-1; i >= 0; --i) r.data[i] = 0;\n  r.data[ds] = c;\n  r.t = this.t+ds+1;\n  r.s = this.s;\n  r.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n,r) {\n  r.s = this.s;\n  var ds = Math.floor(n/this.DB);\n  if(ds >= this.t) { r.t = 0; return; }\n  var bs = n%this.DB;\n  var cbs = this.DB-bs;\n  var bm = (1<<bs)-1;\n  r.data[0] = this.data[ds]>>bs;\n  for(var i = ds+1; i < this.t; ++i) {\n    r.data[i-ds-1] |= (this.data[i]&bm)<<cbs;\n    r.data[i-ds] = this.data[i]>>bs;\n  }\n  if(bs > 0) r.data[this.t-ds-1] |= (this.s&bm)<<cbs;\n  r.t = this.t-ds;\n  r.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a,r) {\n  var i = 0, c = 0, m = Math.min(a.t,this.t);\n  while(i < m) {\n    c += this.data[i]-a.data[i];\n    r.data[i++] = c&this.DM;\n    c >>= this.DB;\n  }\n  if(a.t < this.t) {\n    c -= a.s;\n    while(i < this.t) {\n      c += this.data[i];\n      r.data[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c += this.s;\n  } else {\n    c += this.s;\n    while(i < a.t) {\n      c -= a.data[i];\n      r.data[i++] = c&this.DM;\n      c >>= this.DB;\n    }\n    c -= a.s;\n  }\n  r.s = (c<0)?-1:0;\n  if(c < -1) r.data[i++] = this.DV+c;\n  else if(c > 0) r.data[i++] = c;\n  r.t = i;\n  r.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a,r) {\n  var x = this.abs(), y = a.abs();\n  var i = x.t;\n  r.t = i+y.t;\n  while(--i >= 0) r.data[i] = 0;\n  for(i = 0; i < y.t; ++i) r.data[i+x.t] = x.am(0,y.data[i],r,i,0,x.t);\n  r.s = 0;\n  r.clamp();\n  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2*x.t;\n  while(--i >= 0) r.data[i] = 0;\n  for(i = 0; i < x.t-1; ++i) {\n    var c = x.am(i,x.data[i],r,2*i,0,1);\n    if((r.data[i+x.t]+=x.am(i+1,2*x.data[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n      r.data[i+x.t] -= x.DV;\n      r.data[i+x.t+1] = 1;\n    }\n  }\n  if(r.t > 0) r.data[r.t-1] += x.am(i,x.data[i],r,2*i,0,1);\n  r.s = 0;\n  r.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m,q,r) {\n  var pm = m.abs();\n  if(pm.t <= 0) return;\n  var pt = this.abs();\n  if(pt.t < pm.t) {\n    if(q != null) q.fromInt(0);\n    if(r != null) this.copyTo(r);\n    return;\n  }\n  if(r == null) r = nbi();\n  var y = nbi(), ts = this.s, ms = m.s;\n  var nsh = this.DB-nbits(pm.data[pm.t-1]);\t// normalize modulus\n  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); } else { pm.copyTo(y); pt.copyTo(r); }\n  var ys = y.t;\n  var y0 = y.data[ys-1];\n  if(y0 == 0) return;\n  var yt = y0*(1<<this.F1)+((ys>1)?y.data[ys-2]>>this.F2:0);\n  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n  y.dlShiftTo(j,t);\n  if(r.compareTo(t) >= 0) {\n    r.data[r.t++] = 1;\n    r.subTo(t,r);\n  }\n  BigInteger.ONE.dlShiftTo(ys,t);\n  t.subTo(y,y);\t// \"negative\" y so we can replace sub with am later\n  while(y.t < ys) y.data[y.t++] = 0;\n  while(--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r.data[--i]==y0)?this.DM:Math.floor(r.data[i]*d1+(r.data[i-1]+e)*d2);\n    if((r.data[i]+=y.am(0,qd,r,j,0,ys)) < qd) {\t// Try it out\n      y.dlShiftTo(j,t);\n      r.subTo(t,r);\n      while(r.data[i] < --qd) r.subTo(t,r);\n    }\n  }\n  if(q != null) {\n    r.drShiftTo(ys,q);\n    if(ts != ms) BigInteger.ZERO.subTo(q,q);\n  }\n  r.t = ys;\n  r.clamp();\n  if(nsh > 0) r.rShiftTo(nsh,r);\t// Denormalize remainder\n  if(ts < 0) BigInteger.ZERO.subTo(r,r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a,null,r);\n  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n  return r;\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) { this.m = m; }\nfunction cConvert(x) {\n  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n  else return x;\n}\nfunction cRevert(x) { return x; }\nfunction cReduce(x) { x.divRemTo(this.m,null,x); }\nfunction cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\nfunction cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo;\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if(this.t < 1) return 0;\n  var x = this.data[0];\n  if((x&1) == 0) return 0;\n  var y = x&3;\t\t// y == 1/x mod 2^2\n  y = (y*(2-(x&0xf)*y))&0xf;\t// y == 1/x mod 2^4\n  y = (y*(2-(x&0xff)*y))&0xff;\t// y == 1/x mod 2^8\n  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;\t// y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y*(2-x*y%this.DV))%this.DV;\t\t// y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y>0)?this.DV-y:-y;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp&0x7fff;\n  this.mph = this.mp>>15;\n  this.um = (1<<(m.DB-15))-1;\n  this.mt2 = 2*m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t,r);\n  r.divRemTo(this.m,null,r);\n  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n  return r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while(x.t <= this.mt2)\t// pad x so am has enough room later\n    x.data[x.t++] = 0;\n  for(var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x.data[i]*mp mod DV\n    var j = x.data[i]&0x7fff;\n    var u0 = (j*this.mpl+(((j*this.mph+(x.data[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n    // use am to combine the multiply-shift-add into one call\n    j = i+this.m.t;\n    x.data[j] += this.m.am(0,u0,x,i,0,this.m.t);\n    // propagate carry\n    while(x.data[j] >= x.DV) { x.data[j] -= x.DV; x.data[++j]++; }\n  }\n  x.clamp();\n  x.drShiftTo(this.m.t,x);\n  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (protected) true iff this is even\nfunction bnpIsEven() { return ((this.t>0)?(this.data[0]&1):this.s) == 0; }\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e,z) {\n  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n  g.copyTo(r);\n  while(--i >= 0) {\n    z.sqrTo(r,r2);\n    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n    else { var t = r; r = r2; r2 = t; }\n  }\n  return z.revert(r);\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e,m) {\n  var z;\n  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n  return this.exp(e,z);\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\n\n// jsbn2 lib\n\n//Copyright (c) 2005-2009  Tom Wu\n//All Rights Reserved.\n//See \"LICENSE\" for details (See jsbn.js for LICENSE).\n\n//Extended JavaScript BN functions, required for RSA private ops.\n\n//Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n\n//(public)\nfunction bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n//(public) return value as integer\nfunction bnIntValue() {\nif(this.s < 0) {\n if(this.t == 1) return this.data[0]-this.DV;\n else if(this.t == 0) return -1;\n} else if(this.t == 1) return this.data[0];\nelse if(this.t == 0) return 0;\n// assumes 16 < DB < 32\nreturn ((this.data[1]&((1<<(32-this.DB))-1))<<this.DB)|this.data[0];\n}\n\n//(public) return value as byte\nfunction bnByteValue() { return (this.t==0)?this.s:(this.data[0]<<24)>>24; }\n\n//(public) return value as short (assumes DB>=16)\nfunction bnShortValue() { return (this.t==0)?this.s:(this.data[0]<<16)>>16; }\n\n//(protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n//(public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\nif(this.s < 0) return -1;\nelse if(this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;\nelse return 1;\n}\n\n//(protected) convert to radix string\nfunction bnpToRadix(b) {\nif(b == null) b = 10;\nif(this.signum() == 0 || b < 2 || b > 36) return \"0\";\nvar cs = this.chunkSize(b);\nvar a = Math.pow(b,cs);\nvar d = nbv(a), y = nbi(), z = nbi(), r = \"\";\nthis.divRemTo(d,y,z);\nwhile(y.signum() > 0) {\n r = (a+z.intValue()).toString(b).substr(1) + r;\n y.divRemTo(d,y,z);\n}\nreturn z.intValue().toString(b) + r;\n}\n\n//(protected) convert from radix string\nfunction bnpFromRadix(s,b) {\nthis.fromInt(0);\nif(b == null) b = 10;\nvar cs = this.chunkSize(b);\nvar d = Math.pow(b,cs), mi = false, j = 0, w = 0;\nfor(var i = 0; i < s.length; ++i) {\n var x = intAt(s,i);\n if(x < 0) {\n   if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n   continue;\n }\n w = b*w+x;\n if(++j >= cs) {\n   this.dMultiply(d);\n   this.dAddOffset(w,0);\n   j = 0;\n   w = 0;\n }\n}\nif(j > 0) {\n this.dMultiply(Math.pow(b,j));\n this.dAddOffset(w,0);\n}\nif(mi) BigInteger.ZERO.subTo(this,this);\n}\n\n//(protected) alternate constructor\nfunction bnpFromNumber(a,b,c) {\nif(\"number\" == typeof b) {\n // new BigInteger(int,int,RNG)\n if(a < 2) this.fromInt(1);\n else {\n   this.fromNumber(a,c);\n   if(!this.testBit(a-1))  // force MSB set\n     this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n   if(this.isEven()) this.dAddOffset(1,0); // force odd\n   while(!this.isProbablePrime(b)) {\n     this.dAddOffset(2,0);\n     if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n   }\n }\n} else {\n // new BigInteger(int,RNG)\n var x = new Array(), t = a&7;\n x.length = (a>>3)+1;\n b.nextBytes(x);\n if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n this.fromString(x,256);\n}\n}\n\n//(public) convert to bigendian byte array\nfunction bnToByteArray() {\nvar i = this.t, r = new Array();\nr[0] = this.s;\nvar p = this.DB-(i*this.DB)%8, d, k = 0;\nif(i-- > 0) {\n if(p < this.DB && (d = this.data[i]>>p) != (this.s&this.DM)>>p)\n   r[k++] = d|(this.s<<(this.DB-p));\n while(i >= 0) {\n   if(p < 8) {\n     d = (this.data[i]&((1<<p)-1))<<(8-p);\n     d |= this.data[--i]>>(p+=this.DB-8);\n   } else {\n     d = (this.data[i]>>(p-=8))&0xff;\n     if(p <= 0) { p += this.DB; --i; }\n   }\n   if((d&0x80) != 0) d |= -256;\n   if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n   if(k > 0 || d != this.s) r[k++] = d;\n }\n}\nreturn r;\n}\n\nfunction bnEquals(a) { return(this.compareTo(a)==0); }\nfunction bnMin(a) { return(this.compareTo(a)<0)?this:a; }\nfunction bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n//(protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a,op,r) {\nvar i, f, m = Math.min(a.t,this.t);\nfor(i = 0; i < m; ++i) r.data[i] = op(this.data[i],a.data[i]);\nif(a.t < this.t) {\n f = a.s&this.DM;\n for(i = m; i < this.t; ++i) r.data[i] = op(this.data[i],f);\n r.t = this.t;\n} else {\n f = this.s&this.DM;\n for(i = m; i < a.t; ++i) r.data[i] = op(f,a.data[i]);\n r.t = a.t;\n}\nr.s = op(this.s,a.s);\nr.clamp();\n}\n\n//(public) this & a\nfunction op_and(x,y) { return x&y; }\nfunction bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n//(public) this | a\nfunction op_or(x,y) { return x|y; }\nfunction bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n//(public) this ^ a\nfunction op_xor(x,y) { return x^y; }\nfunction bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n//(public) this & ~a\nfunction op_andnot(x,y) { return x&~y; }\nfunction bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n//(public) ~this\nfunction bnNot() {\nvar r = nbi();\nfor(var i = 0; i < this.t; ++i) r.data[i] = this.DM&~this.data[i];\nr.t = this.t;\nr.s = ~this.s;\nreturn r;\n}\n\n//(public) this << n\nfunction bnShiftLeft(n) {\nvar r = nbi();\nif(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\nreturn r;\n}\n\n//(public) this >> n\nfunction bnShiftRight(n) {\nvar r = nbi();\nif(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\nreturn r;\n}\n\n//return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\nif(x == 0) return -1;\nvar r = 0;\nif((x&0xffff) == 0) { x >>= 16; r += 16; }\nif((x&0xff) == 0) { x >>= 8; r += 8; }\nif((x&0xf) == 0) { x >>= 4; r += 4; }\nif((x&3) == 0) { x >>= 2; r += 2; }\nif((x&1) == 0) ++r;\nreturn r;\n}\n\n//(public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\nfor(var i = 0; i < this.t; ++i)\n if(this.data[i] != 0) return i*this.DB+lbit(this.data[i]);\nif(this.s < 0) return this.t*this.DB;\nreturn -1;\n}\n\n//return number of 1 bits in x\nfunction cbit(x) {\nvar r = 0;\nwhile(x != 0) { x &= x-1; ++r; }\nreturn r;\n}\n\n//(public) return number of set bits\nfunction bnBitCount() {\nvar r = 0, x = this.s&this.DM;\nfor(var i = 0; i < this.t; ++i) r += cbit(this.data[i]^x);\nreturn r;\n}\n\n//(public) true iff nth bit is set\nfunction bnTestBit(n) {\nvar j = Math.floor(n/this.DB);\nif(j >= this.t) return(this.s!=0);\nreturn((this.data[j]&(1<<(n%this.DB)))!=0);\n}\n\n//(protected) this op (1<<n)\nfunction bnpChangeBit(n,op) {\nvar r = BigInteger.ONE.shiftLeft(n);\nthis.bitwiseTo(r,op,r);\nreturn r;\n}\n\n//(public) this | (1<<n)\nfunction bnSetBit(n) { return this.changeBit(n,op_or); }\n\n//(public) this & ~(1<<n)\nfunction bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n//(public) this ^ (1<<n)\nfunction bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n//(protected) r = this + a\nfunction bnpAddTo(a,r) {\nvar i = 0, c = 0, m = Math.min(a.t,this.t);\nwhile(i < m) {\n c += this.data[i]+a.data[i];\n r.data[i++] = c&this.DM;\n c >>= this.DB;\n}\nif(a.t < this.t) {\n c += a.s;\n while(i < this.t) {\n   c += this.data[i];\n   r.data[i++] = c&this.DM;\n   c >>= this.DB;\n }\n c += this.s;\n} else {\n c += this.s;\n while(i < a.t) {\n   c += a.data[i];\n   r.data[i++] = c&this.DM;\n   c >>= this.DB;\n }\n c += a.s;\n}\nr.s = (c<0)?-1:0;\nif(c > 0) r.data[i++] = c;\nelse if(c < -1) r.data[i++] = this.DV+c;\nr.t = i;\nr.clamp();\n}\n\n//(public) this + a\nfunction bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n//(public) this - a\nfunction bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n//(public) this * a\nfunction bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n//(public) this / a\nfunction bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n//(public) this % a\nfunction bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n//(public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\nvar q = nbi(), r = nbi();\nthis.divRemTo(a,q,r);\nreturn new Array(q,r);\n}\n\n//(protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\nthis.data[this.t] = this.am(0,n-1,this,0,0,this.t);\n++this.t;\nthis.clamp();\n}\n\n//(protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n,w) {\nif(n == 0) return;\nwhile(this.t <= w) this.data[this.t++] = 0;\nthis.data[w] += n;\nwhile(this.data[w] >= this.DV) {\n this.data[w] -= this.DV;\n if(++w >= this.t) this.data[this.t++] = 0;\n ++this.data[w];\n}\n}\n\n//A \"null\" reducer\nfunction NullExp() {}\nfunction nNop(x) { return x; }\nfunction nMulTo(x,y,r) { x.multiplyTo(y,r); }\nfunction nSqrTo(x,r) { x.squareTo(r); }\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo;\n\n//(public) this^e\nfunction bnPow(e) { return this.exp(e,new NullExp()); }\n\n//(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a,n,r) {\nvar i = Math.min(this.t+a.t,n);\nr.s = 0; // assumes a,this >= 0\nr.t = i;\nwhile(i > 0) r.data[--i] = 0;\nvar j;\nfor(j = r.t-this.t; i < j; ++i) r.data[i+this.t] = this.am(0,a.data[i],r,i,0,this.t);\nfor(j = Math.min(a.t,n); i < j; ++i) this.am(0,a.data[i],r,i,0,n-i);\nr.clamp();\n}\n\n//(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a,n,r) {\n--n;\nvar i = r.t = this.t+a.t-n;\nr.s = 0; // assumes a,this >= 0\nwhile(--i >= 0) r.data[i] = 0;\nfor(i = Math.max(n-this.t,0); i < a.t; ++i)\n r.data[this.t+i-n] = this.am(n-i,a.data[i],r,0,0,this.t+i-n);\nr.clamp();\nr.drShiftTo(1,r);\n}\n\n//Barrett modular reduction\nfunction Barrett(m) {\n// setup Barrett\nthis.r2 = nbi();\nthis.q3 = nbi();\nBigInteger.ONE.dlShiftTo(2*m.t,this.r2);\nthis.mu = this.r2.divide(m);\nthis.m = m;\n}\n\nfunction barrettConvert(x) {\nif(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\nelse if(x.compareTo(this.m) < 0) return x;\nelse { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n}\n\nfunction barrettRevert(x) { return x; }\n\n//x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\nx.drShiftTo(this.m.t-1,this.r2);\nif(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\nthis.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\nthis.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\nwhile(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\nx.subTo(this.r2,x);\nwhile(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n}\n\n//r = x^2 mod m; x != r\nfunction barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n//r = x*y mod m; x,y != r\nfunction barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo;\n\n//(public) this^e % m (HAC 14.85)\nfunction bnModPow(e,m) {\nvar i = e.bitLength(), k, r = nbv(1), z;\nif(i <= 0) return r;\nelse if(i < 18) k = 1;\nelse if(i < 48) k = 3;\nelse if(i < 144) k = 4;\nelse if(i < 768) k = 5;\nelse k = 6;\nif(i < 8)\n z = new Classic(m);\nelse if(m.isEven())\n z = new Barrett(m);\nelse\n z = new Montgomery(m);\n\n// precomputation\nvar g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\ng[1] = z.convert(this);\nif(k > 1) {\n var g2 = nbi();\n z.sqrTo(g[1],g2);\n while(n <= km) {\n   g[n] = nbi();\n   z.mulTo(g2,g[n-2],g[n]);\n   n += 2;\n }\n}\n\nvar j = e.t-1, w, is1 = true, r2 = nbi(), t;\ni = nbits(e.data[j])-1;\nwhile(j >= 0) {\n if(i >= k1) w = (e.data[j]>>(i-k1))&km;\n else {\n   w = (e.data[j]&((1<<(i+1))-1))<<(k1-i);\n   if(j > 0) w |= e.data[j-1]>>(this.DB+i-k1);\n }\n\n n = k;\n while((w&1) == 0) { w >>= 1; --n; }\n if((i -= n) < 0) { i += this.DB; --j; }\n if(is1) {  // ret == 1, don't bother squaring or multiplying it\n   g[w].copyTo(r);\n   is1 = false;\n } else {\n   while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n   if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n   z.mulTo(r2,g[w],r);\n }\n\n while(j >= 0 && (e.data[j]&(1<<i)) == 0) {\n   z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n   if(--i < 0) { i = this.DB-1; --j; }\n }\n}\nreturn z.revert(r);\n}\n\n//(public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\nvar x = (this.s<0)?this.negate():this.clone();\nvar y = (a.s<0)?a.negate():a.clone();\nif(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\nvar i = x.getLowestSetBit(), g = y.getLowestSetBit();\nif(g < 0) return x;\nif(i < g) g = i;\nif(g > 0) {\n x.rShiftTo(g,x);\n y.rShiftTo(g,y);\n}\nwhile(x.signum() > 0) {\n if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n if(x.compareTo(y) >= 0) {\n   x.subTo(y,x);\n   x.rShiftTo(1,x);\n } else {\n   y.subTo(x,y);\n   y.rShiftTo(1,y);\n }\n}\nif(g > 0) y.lShiftTo(g,y);\nreturn y;\n}\n\n//(protected) this % n, n < 2^26\nfunction bnpModInt(n) {\nif(n <= 0) return 0;\nvar d = this.DV%n, r = (this.s<0)?n-1:0;\nif(this.t > 0)\n if(d == 0) r = this.data[0]%n;\n else for(var i = this.t-1; i >= 0; --i) r = (d*r+this.data[i])%n;\nreturn r;\n}\n\n//(public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\nvar ac = m.isEven();\nif((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\nvar u = m.clone(), v = this.clone();\nvar a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\nwhile(u.signum() != 0) {\n while(u.isEven()) {\n   u.rShiftTo(1,u);\n   if(ac) {\n     if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n     a.rShiftTo(1,a);\n   } else if(!b.isEven()) b.subTo(m,b);\n   b.rShiftTo(1,b);\n }\n while(v.isEven()) {\n   v.rShiftTo(1,v);\n   if(ac) {\n     if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n     c.rShiftTo(1,c);\n   } else if(!d.isEven()) d.subTo(m,d);\n   d.rShiftTo(1,d);\n }\n if(u.compareTo(v) >= 0) {\n   u.subTo(v,u);\n   if(ac) a.subTo(c,a);\n   b.subTo(d,b);\n } else {\n   v.subTo(u,v);\n   if(ac) c.subTo(a,c);\n   d.subTo(b,d);\n }\n}\nif(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\nif(d.compareTo(m) >= 0) return d.subtract(m);\nif(d.signum() < 0) d.addTo(m,d); else return d;\nif(d.signum() < 0) return d.add(m); else return d;\n}\n\nvar lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];\nvar lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n//(public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\nvar i, x = this.abs();\nif(x.t == 1 && x.data[0] <= lowprimes[lowprimes.length-1]) {\n for(i = 0; i < lowprimes.length; ++i)\n   if(x.data[0] == lowprimes[i]) return true;\n return false;\n}\nif(x.isEven()) return false;\ni = 1;\nwhile(i < lowprimes.length) {\n var m = lowprimes[i], j = i+1;\n while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n m = x.modInt(m);\n while(i < j) if(m%lowprimes[i++] == 0) return false;\n}\nreturn x.millerRabin(t);\n}\n\n//(protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\nvar n1 = this.subtract(BigInteger.ONE);\nvar k = n1.getLowestSetBit();\nif(k <= 0) return false;\nvar r = n1.shiftRight(k);\nvar prng = bnGetPrng();\nvar a;\nfor(var i = 0; i < t; ++i) {\n // select witness 'a' at random from between 1 and n1\n do {\n   a = new BigInteger(this.bitLength(), prng);\n }\n while(a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);\n var y = a.modPow(r,this);\n if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n   var j = 1;\n   while(j++ < k && y.compareTo(n1) != 0) {\n     y = y.modPowInt(2,this);\n     if(y.compareTo(BigInteger.ONE) == 0) return false;\n   }\n   if(y.compareTo(n1) != 0) return false;\n }\n}\nreturn true;\n}\n\n// get pseudo random number generator\nfunction bnGetPrng() {\n  // create prng with api that matches BigInteger secure random\n  return {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = Math.floor(Math.random() * 0x0100);\n      }\n    }\n  };\n}\n\n//protected\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin;\n\n//public\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n//BigInteger interfaces not implemented in jsbn:\n\n//BigInteger(int signum, byte[] magnitude)\n//double doubleValue()\n//float floatValue()\n//int hashCode()\n//long longValue()\n//static BigInteger valueOf(long val)\n","/**\n * Node.js module for Forge.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2016 Digital Bazaar, Inc.\n */\nmodule.exports = {\n  // default options\n  options: {\n    usePureJavaScript: false\n  }\n};\n","/**\n * A Javascript implementation of AES Cipher Suites for TLS.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2009-2015 Digital Bazaar, Inc.\n *\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./tls');\n\nvar tls = module.exports = forge.tls;\n\n/**\n * Supported cipher suites.\n */\ntls.CipherSuites['TLS_RSA_WITH_AES_128_CBC_SHA'] = {\n  id: [0x00, 0x2f],\n  name: 'TLS_RSA_WITH_AES_128_CBC_SHA',\n  initSecurityParameters: function(sp) {\n    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\n    sp.cipher_type = tls.CipherType.block;\n    sp.enc_key_length = 16;\n    sp.block_length = 16;\n    sp.fixed_iv_length = 16;\n    sp.record_iv_length = 16;\n    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\n    sp.mac_length = 20;\n    sp.mac_key_length = 20;\n  },\n  initConnectionState: initConnectionState\n};\ntls.CipherSuites['TLS_RSA_WITH_AES_256_CBC_SHA'] = {\n  id: [0x00, 0x35],\n  name: 'TLS_RSA_WITH_AES_256_CBC_SHA',\n  initSecurityParameters: function(sp) {\n    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;\n    sp.cipher_type = tls.CipherType.block;\n    sp.enc_key_length = 32;\n    sp.block_length = 16;\n    sp.fixed_iv_length = 16;\n    sp.record_iv_length = 16;\n    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;\n    sp.mac_length = 20;\n    sp.mac_key_length = 20;\n  },\n  initConnectionState: initConnectionState\n};\n\nfunction initConnectionState(state, c, sp) {\n  var client = (c.entity === forge.tls.ConnectionEnd.client);\n\n  // cipher setup\n  state.read.cipherState = {\n    init: false,\n    cipher: forge.cipher.createDecipher('AES-CBC', client ?\n      sp.keys.server_write_key : sp.keys.client_write_key),\n    iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV\n  };\n  state.write.cipherState = {\n    init: false,\n    cipher: forge.cipher.createCipher('AES-CBC', client ?\n      sp.keys.client_write_key : sp.keys.server_write_key),\n    iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV\n  };\n  state.read.cipherFunction = decrypt_aes_cbc_sha1;\n  state.write.cipherFunction = encrypt_aes_cbc_sha1;\n\n  // MAC setup\n  state.read.macLength = state.write.macLength = sp.mac_length;\n  state.read.macFunction = state.write.macFunction = tls.hmac_sha1;\n}\n\n/**\n * Encrypts the TLSCompressed record into a TLSCipherText record using AES\n * in CBC mode.\n *\n * @param record the TLSCompressed record to encrypt.\n * @param s the ConnectionState to use.\n *\n * @return true on success, false on failure.\n */\nfunction encrypt_aes_cbc_sha1(record, s) {\n  var rval = false;\n\n  // append MAC to fragment, update sequence number\n  var mac = s.macFunction(s.macKey, s.sequenceNumber, record);\n  record.fragment.putBytes(mac);\n  s.updateSequenceNumber();\n\n  // TLS 1.1+ use an explicit IV every time to protect against CBC attacks\n  var iv;\n  if(record.version.minor === tls.Versions.TLS_1_0.minor) {\n    // use the pre-generated IV when initializing for TLS 1.0, otherwise use\n    // the residue from the previous encryption\n    iv = s.cipherState.init ? null : s.cipherState.iv;\n  } else {\n    iv = forge.random.getBytesSync(16);\n  }\n\n  s.cipherState.init = true;\n\n  // start cipher\n  var cipher = s.cipherState.cipher;\n  cipher.start({iv: iv});\n\n  // TLS 1.1+ write IV into output\n  if(record.version.minor >= tls.Versions.TLS_1_1.minor) {\n    cipher.output.putBytes(iv);\n  }\n\n  // do encryption (default padding is appropriate)\n  cipher.update(record.fragment);\n  if(cipher.finish(encrypt_aes_cbc_sha1_padding)) {\n    // set record fragment to encrypted output\n    record.fragment = cipher.output;\n    record.length = record.fragment.length();\n    rval = true;\n  }\n\n  return rval;\n}\n\n/**\n * Handles padding for aes_cbc_sha1 in encrypt mode.\n *\n * @param blockSize the block size.\n * @param input the input buffer.\n * @param decrypt true in decrypt mode, false in encrypt mode.\n *\n * @return true on success, false on failure.\n */\nfunction encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {\n  /* The encrypted data length (TLSCiphertext.length) is one more than the sum\n   of SecurityParameters.block_length, TLSCompressed.length,\n   SecurityParameters.mac_length, and padding_length.\n\n   The padding may be any length up to 255 bytes long, as long as it results in\n   the TLSCiphertext.length being an integral multiple of the block length.\n   Lengths longer than necessary might be desirable to frustrate attacks on a\n   protocol based on analysis of the lengths of exchanged messages. Each uint8\n   in the padding data vector must be filled with the padding length value.\n\n   The padding length should be such that the total size of the\n   GenericBlockCipher structure is a multiple of the cipher's block length.\n   Legal values range from zero to 255, inclusive. This length specifies the\n   length of the padding field exclusive of the padding_length field itself.\n\n   This is slightly different from PKCS#7 because the padding value is 1\n   less than the actual number of padding bytes if you include the\n   padding_length uint8 itself as a padding byte. */\n  if(!decrypt) {\n    // get the number of padding bytes required to reach the blockSize and\n    // subtract 1 for the padding value (to make room for the padding_length\n    // uint8)\n    var padding = blockSize - (input.length() % blockSize);\n    input.fillWithByte(padding - 1, padding);\n  }\n  return true;\n}\n\n/**\n * Handles padding for aes_cbc_sha1 in decrypt mode.\n *\n * @param blockSize the block size.\n * @param output the output buffer.\n * @param decrypt true in decrypt mode, false in encrypt mode.\n *\n * @return true on success, false on failure.\n */\nfunction decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {\n  var rval = true;\n  if(decrypt) {\n    /* The last byte in the output specifies the number of padding bytes not\n      including itself. Each of the padding bytes has the same value as that\n      last byte (known as the padding_length). Here we check all padding\n      bytes to ensure they have the value of padding_length even if one of\n      them is bad in order to ward-off timing attacks. */\n    var len = output.length();\n    var paddingLength = output.last();\n    for(var i = len - 1 - paddingLength; i < len - 1; ++i) {\n      rval = rval && (output.at(i) == paddingLength);\n    }\n    if(rval) {\n      // trim off padding bytes and last padding length byte\n      output.truncate(paddingLength + 1);\n    }\n  }\n  return rval;\n}\n\n/**\n * Decrypts a TLSCipherText record into a TLSCompressed record using\n * AES in CBC mode.\n *\n * @param record the TLSCipherText record to decrypt.\n * @param s the ConnectionState to use.\n *\n * @return true on success, false on failure.\n */\nfunction decrypt_aes_cbc_sha1(record, s) {\n  var rval = false;\n\n  var iv;\n  if(record.version.minor === tls.Versions.TLS_1_0.minor) {\n    // use pre-generated IV when initializing for TLS 1.0, otherwise use the\n    // residue from the previous decryption\n    iv = s.cipherState.init ? null : s.cipherState.iv;\n  } else {\n    // TLS 1.1+ use an explicit IV every time to protect against CBC attacks\n    // that is appended to the record fragment\n    iv = record.fragment.getBytes(16);\n  }\n\n  s.cipherState.init = true;\n\n  // start cipher\n  var cipher = s.cipherState.cipher;\n  cipher.start({iv: iv});\n\n  // do decryption\n  cipher.update(record.fragment);\n  rval = cipher.finish(decrypt_aes_cbc_sha1_padding);\n\n  // even if decryption fails, keep going to minimize timing attacks\n\n  // decrypted data:\n  // first (len - 20) bytes = application data\n  // last 20 bytes          = MAC\n  var macLen = s.macLength;\n\n  // create a random MAC to check against should the mac length check fail\n  // Note: do this regardless of the failure to keep timing consistent\n  var mac = forge.random.getBytesSync(macLen);\n\n  // get fragment and mac\n  var len = cipher.output.length();\n  if(len >= macLen) {\n    record.fragment = cipher.output.getBytes(len - macLen);\n    mac = cipher.output.getBytes(macLen);\n  } else {\n    // bad data, but get bytes anyway to try to keep timing consistent\n    record.fragment = cipher.output.getBytes();\n  }\n  record.fragment = forge.util.createBuffer(record.fragment);\n  record.length = record.fragment.length();\n\n  // see if data integrity checks out, update sequence number\n  var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);\n  s.updateSequenceNumber();\n  rval = compareMacs(s.macKey, mac, mac2) && rval;\n  return rval;\n}\n\n/**\n * Safely compare two MACs. This function will compare two MACs in a way\n * that protects against timing attacks.\n *\n * TODO: Expose elsewhere as a utility API.\n *\n * See: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n *\n * @param key the MAC key to use.\n * @param mac1 as a binary-encoded string of bytes.\n * @param mac2 as a binary-encoded string of bytes.\n *\n * @return true if the MACs are the same, false if not.\n */\nfunction compareMacs(key, mac1, mac2) {\n  var hmac = forge.hmac.create();\n\n  hmac.start('SHA1', key);\n  hmac.update(mac1);\n  mac1 = hmac.digest().getBytes();\n\n  hmac.start(null, null);\n  hmac.update(mac2);\n  mac2 = hmac.digest().getBytes();\n\n  return mac1 === mac2;\n}\n"],"sourceRoot":""}