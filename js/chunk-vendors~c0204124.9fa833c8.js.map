{"version":3,"sources":["webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/prime.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pki.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/prng.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/random.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pkcs1.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pss.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pkcs7asn1.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/sha1.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/rc2.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/rsa.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pkcs7.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/sha256.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/pkcs12.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/sha512.js"],"names":["forge","prime","module","exports","BigInteger","jsbn","GCD_30_DELTA","THIRTY","fromInt","op_or","x","y","generateProbablePrime","bits","options","callback","algorithm","name","prng","random","rng","nextBytes","b","getBytesSync","length","i","charCodeAt","primeincFindPrime","Error","primeincFindPrimeWithWorkers","primeincFindPrimeWithoutWorkers","num","generateRandom","deltaIdx","mrTests","getMillerRabinTests","bitLength","millerRabinTests","maxBlockTime","_primeinc","start","Date","isProbablePrime","dAddOffset","util","setImmediate","Worker","numWorkers","workers","workLoad","range","workerScript","estimateCores","err","cores","generate","Math","max","addEventListener","workerMessage","found","e","data","terminate","hex","toString","target","postMessage","bits1","testBit","bitwiseTo","ONE","shiftLeft","mod","byteValue","asn1","pki","pemToDer","pem","msg","decode","procType","type","createBuffer","body","privateKeyFromPem","error","headerType","obj","fromDer","privateKeyFromAsn1","privateKeyToPem","key","maxline","toDer","privateKeyToAsn1","getBytes","encode","privateKeyInfoToPem","_crypto","isNodejs","usePureJavaScript","process","versions","create","plugin","ctx","seed","time","reseeds","generated","keyBytes","md","pools","Array","_reseed","messageLength","_seed","needed","seedFile","bytes","collect","_reseedSync","seedFileSync","update","_2powK","k","digest","seedBytes","formatKey","formatSeed","defaultSeedFile","getRandomValues","globalScope","crypto","msCrypto","arr","count","min","entropy","Uint32Array","floor","putInt32","QuotaExceededError","hi","lo","next","putByte","String","fromCharCode","pool","generateSync","cipher","increment","nextTick","putBytes","randomBytes","substr","collectInt","n","registerWorker","worker","self","listener","removeEventListener","jQuery","prng_aes","_prng_aes_output","_prng_aes_buffer","spawnPrng","tmp","getInt32","aes","_expandKey","_updateBlock","sha256","_ctx","window","document","_navBytes","navigator","mousemove","clientX","clientY","keypress","charCode","createInstance","pkcs1","rsa_mgf1","maskLength","hash","sha1","t","ceil","digestLength","c","substring","encode_rsa_oaep","message","label","mgf1Md","arguments","undefined","mgf1","keyLength","maxLength","lHash","PS","PS_length","DB","seedLength","dbMask","maskedDB","xorBytes","seedMask","maskedSeed","decode_rsa_oaep","em","expectedLength","charAt","db","lHashPrime","in_ps","index","j","code","is_0","error_mask","pss","mgf","saltLength","sLen","hLen","salt_","salt","pssobj","modBits","emBits","emLen","mHash","m_","ByteBuffer","fillWithByte","h","ps","maskLen","mask","checkLen","h_","p7v","pkcs7asn1","pkcs7","contentInfoValidator","tagClass","Class","UNIVERSAL","Type","SEQUENCE","constructed","value","OID","capture","CONTEXT_SPECIFIC","optional","captureAsn1","encryptedContentInfoValidator","envelopedDataValidator","INTEGER","SET","concat","encryptedDataValidator","signerValidator","OCTETSTRING","signedDataValidator","recipientInfoValidator","algorithms","_initialized","_init","_state","_input","_w","blockLength","fullMessageLength","messageLengthSize","messageLength64","int32s","push","h0","h1","h2","h3","h4","encoding","encodeUtf8","len","_update","read","compact","finalBlock","carry","remaining","overflow","_padding","s2","rval","fillString","s","w","a","d","f","piTable","rol","word","ror","rc2","expandKey","effKeyBits","L","T","T1","T8","TM","at","setAt","createCipher","encrypt","mixRound","mashRound","_finish","_output","_iv","K","getInt16Le","R","runPlan","plan","val","putInt16Le","ptr","ctr","iv","output","input","putBuffer","finish","pad","padding","truncate","startEncrypting","createEncryptionCipher","startDecrypting","createDecryptionCipher","rsa","privateKeyValidator","rsaPrivateKeyValidator","rsaPublicKeyValidator","publicKeyValidator","BITSTRING","emsaPkcs1v15encode","oid","oids","oidBytes","oidToDer","digestInfo","digestAlgorithm","NULL","_modPow","pub","modPow","p","q","r","dP","subtract","dQ","qInv","modInverse","bytesToHex","compareTo","gcd","equals","multiply","xp","xq","add","_encodePkcs1_v1_5","m","bt","eb","padByte","padNum","numZeros","padBytes","_decodePkcs1_v1_5","ml","first","getByte","zero","_generateKeyPair","state","opts","getPrime","pBits","qBits","p1","q1","phi","keys","privateKey","setPrivateKey","publicKey","setPublicKey","_bnToBytes","hexToBytes","_getMillerRabinTests","_detectNodeCrypto","fn","_detectSubtleCrypto","subtle","_detectSubtleMsCrypto","_intToUint8Array","buffer","Uint8Array","toHex","yhex","ed","zeros","decrypt","expected","xhex","createKeyPairGenerationState","parseInt","eInt","pqState","stepKeyPairGenerationState","t2","t1","total","generateKeyPair","modulusLength","publicExponent","publicKeyEncoding","format","privateKeyEncoding","priv","publicKeyFromPem","generateKey","then","pair","exportKey","pkcs8","setRsaPublicKey","genOp","oncomplete","result","exportOp","onerror","keypair","generateKeyPairSync","scheme","schemeOptions","toUpperCase","indexOf","signature","verify","setRsaPrivateKey","wrapRsaPrivateKey","rsaKey","integerToDer","rsaEncryption","errors","validate","privateKeyModulus","privateKeyPublicExponent","privateKeyPrivateExponent","privateKeyPrime1","privateKeyPrime2","privateKeyExponent1","privateKeyExponent2","privateKeyCoefficient","privateKeyToRSAPrivateKey","publicKeyFromAsn1","derToOid","publicKeyOid","rsaPublicKey","publicKeyModulus","publicKeyExponent","publicKeyToAsn1","publicKeyToSubjectPublicKeyInfo","publicKeyToRSAPublicKey","p7","_recipientFromAsn1","version","issuer","RDNAttributesAsArray","serialNumber","serial","encryptedContent","encAlgorithm","parameter","encParameter","content","encKey","_recipientToAsn1","distinguishedNameToAsn1","attributes","_recipientsFromAsn1","infos","ret","_recipientsToAsn1","recipients","_signerToAsn1","authenticatedAttributesAsn1","signatureAlgorithm","unauthenticatedAttributes","attrsAsn1","attr","values","_attributeToAsn1","_signersToAsn1","signers","contentType","messageDigest","signingTime","jan_1_1950","jan_1_2050","date","timestamp","parse","isNaN","utcTimeToDate","generalizedTimeToDate","UTCTIME","dateToUtcTime","GENERALIZEDTIME","dateToGeneralizedTime","_encryptedContentToAsn1","ec","_fromAsn1","validator","isArray","rawCapture","_decryptContent","ciph","des","messageFromPem","messageFromAsn1","messageToPem","pemObj","toAsn1","envelopedData","createEnvelopedData","encryptedData","createEncryptedData","signedData","createSignedData","fromAsn1","certificates","crls","digestAlgorithmIdentifiers","contentInfo","signerInfos","certs","certificateFromAsn1","sign","certificateToAsn1","addSigner","signer","certificate","cert","certificateFromPem","sha384","sha512","md5","authenticatedAttributes","detached","detachedContent","mds","addDigestAlgorithmIds","addSignerInfos","addCertificate","addCertificateRevokationList","crl","getBerValueLength","ai","recipientInfos","findRecipient","sAttr","rAttr","match","recipient","privKey","desCBC","addRecipient","keyLen","ivLen","ciphFn","copy","h5","h6","h7","_k","s0","s1","ch","maj","g","p12","pkcs12","pfxValidator","safeBagValidator","attributeValidator","certBagValidator","_getBagsByAttribute","safeContents","attrName","attrValue","bagType","safeBags","bag","_decodePkcs7Data","composed","_decodeAuthenticatedSafe","pfx","authSafe","strict","password","encrypted","_decryptSafeContents","_decodeSafeContents","pbe","getCipher","encryptedContentAsn1","res","safeBag","decoder","bagId","_decodeBagAttributes","bagAttributes","bagAsn1","bagValue","pkcs8ShroudedKeyBag","decryptPrivateKeyInfo","keyBag","certBag","certId","x509Certificate","certAsn1","decodedAttrs","pkcs12FromAsn1","getBags","filter","localKeyId","localKeyIdHex","friendlyName","getBagsByFriendlyName","getBagsByLocalKeyId","mac","macKeyBytes","macAlgorithm","macSalt","macIterations","macKey","hmac","macValue","getMac","macDigest","toPkcs12Asn1","saltSize","useMac","generateLocalKeyId","bagAttrs","pairedCert","attrs","BMPSTRING","contents","chain","certSafeBags","certBagAttrs","certSafeBag","certSafeContents","certCI","pkAsn1","encryptPrivateKeyInfo","keySafeContents","keyCI","macData","safe","generatePkcs12Key","sha224","_states","_h","wi","replace","toLowerCase","messageLength128","slice","hlen","t1_hi","t1_lo","t2_hi","t2_lo","s0_hi","s0_lo","s1_hi","s1_lo","ch_hi","ch_lo","maj_hi","maj_lo","a_hi","a_lo","b_hi","b_lo","c_hi","c_lo","d_hi","d_lo","e_hi","e_lo","f_hi","f_lo","g_hi","g_lo","h_hi","h_lo","w2","w7","w15","w16"],"mappings":"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","file":"js/chunk-vendors~c0204124.9fa833c8.js","sourcesContent":["/**\n * Prime number generation API.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./jsbn');\nrequire('./random');\n\n(function() {\n\n// forge.prime already defined\nif(forge.prime) {\n  module.exports = forge.prime;\n  return;\n}\n\n/* PRIME API */\nvar prime = module.exports = forge.prime = forge.prime || {};\n\nvar BigInteger = forge.jsbn.BigInteger;\n\n// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\nvar THIRTY = new BigInteger(null);\nTHIRTY.fromInt(30);\nvar op_or = function(x, y) {return x|y;};\n\n/**\n * Generates a random probable prime with the given number of bits.\n *\n * Alternative algorithms can be specified by name as a string or as an\n * object with custom options like so:\n *\n * {\n *   name: 'PRIMEINC',\n *   options: {\n *     maxBlockTime: <the maximum amount of time to block the main\n *       thread before allowing I/O other JS to run>,\n *     millerRabinTests: <the number of miller-rabin tests to run>,\n *     workerScript: <the worker script URL>,\n *     workers: <the number of web workers (if supported) to use,\n *       -1 to use estimated cores minus one>.\n *     workLoad: the size of the work load, ie: number of possible prime\n *       numbers for each web worker to check per work assignment,\n *       (default: 100).\n *   }\n * }\n *\n * @param bits the number of bits for the prime number.\n * @param options the options to use.\n *          [algorithm] the algorithm to use (default: 'PRIMEINC').\n *          [prng] a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *\n * @return callback(err, num) called once the operation completes.\n */\nprime.generateProbablePrime = function(bits, options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  // default to PRIMEINC algorithm\n  var algorithm = options.algorithm || 'PRIMEINC';\n  if(typeof algorithm === 'string') {\n    algorithm = {name: algorithm};\n  }\n  algorithm.options = algorithm.options || {};\n\n  // create prng with api that matches BigInteger secure random\n  var prng = options.prng || forge.random;\n  var rng = {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      var b = prng.getBytesSync(x.length);\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = b.charCodeAt(i);\n      }\n    }\n  };\n\n  if(algorithm.name === 'PRIMEINC') {\n    return primeincFindPrime(bits, rng, algorithm.options, callback);\n  }\n\n  throw new Error('Invalid prime generation algorithm: ' + algorithm.name);\n};\n\nfunction primeincFindPrime(bits, rng, options, callback) {\n  if('workers' in options) {\n    return primeincFindPrimeWithWorkers(bits, rng, options, callback);\n  }\n  return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n}\n\nfunction primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {\n  // initialize random number\n  var num = generateRandom(bits, rng);\n\n  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The\n  number we are given is always aligned at 30k + 1. Each time the number is\n  determined not to be prime we add to get to the next 'i', eg: if the number\n  was at 30k + 1 we add 6. */\n  var deltaIdx = 0;\n\n  // get required number of MR tests\n  var mrTests = getMillerRabinTests(num.bitLength());\n  if('millerRabinTests' in options) {\n    mrTests = options.millerRabinTests;\n  }\n\n  // find prime nearest to 'num' for maxBlockTime ms\n  // 10 ms gives 5ms of leeway for other calculations before dropping\n  // below 60fps (1000/60 == 16.67), but in reality, the number will\n  // likely be higher due to an 'atomic' big int modPow\n  var maxBlockTime = 10;\n  if('maxBlockTime' in options) {\n    maxBlockTime = options.maxBlockTime;\n  }\n\n  _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n}\n\nfunction _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {\n  var start = +new Date();\n  do {\n    // overflow, regenerate random number\n    if(num.bitLength() > bits) {\n      num = generateRandom(bits, rng);\n    }\n    // do primality test\n    if(num.isProbablePrime(mrTests)) {\n      return callback(null, num);\n    }\n    // get next potential prime\n    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n  } while(maxBlockTime < 0 || (+new Date() - start < maxBlockTime));\n\n  // keep trying later\n  forge.util.setImmediate(function() {\n    _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);\n  });\n}\n\n// NOTE: This algorithm is indeterminate in nature because workers\n// run in parallel looking at different segments of numbers. Even if this\n// algorithm is run twice with the same input from a predictable RNG, it\n// may produce different outputs.\nfunction primeincFindPrimeWithWorkers(bits, rng, options, callback) {\n  // web workers unavailable\n  if(typeof Worker === 'undefined') {\n    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);\n  }\n\n  // initialize random number\n  var num = generateRandom(bits, rng);\n\n  // use web workers to generate keys\n  var numWorkers = options.workers;\n  var workLoad = options.workLoad || 100;\n  var range = workLoad * 30 / 8;\n  var workerScript = options.workerScript || 'forge/prime.worker.js';\n  if(numWorkers === -1) {\n    return forge.util.estimateCores(function(err, cores) {\n      if(err) {\n        // default to 2\n        cores = 2;\n      }\n      numWorkers = cores - 1;\n      generate();\n    });\n  }\n  generate();\n\n  function generate() {\n    // require at least 1 worker\n    numWorkers = Math.max(1, numWorkers);\n\n    // TODO: consider optimizing by starting workers outside getPrime() ...\n    // note that in order to clean up they will have to be made internally\n    // asynchronous which may actually be slower\n\n    // start workers immediately\n    var workers = [];\n    for(var i = 0; i < numWorkers; ++i) {\n      // FIXME: fix path or use blob URLs\n      workers[i] = new Worker(workerScript);\n    }\n    var running = numWorkers;\n\n    // listen for requests from workers and assign ranges to find prime\n    for(var i = 0; i < numWorkers; ++i) {\n      workers[i].addEventListener('message', workerMessage);\n    }\n\n    /* Note: The distribution of random numbers is unknown. Therefore, each\n    web worker is continuously allocated a range of numbers to check for a\n    random number until one is found.\n\n    Every 30 numbers will be checked just 8 times, because prime numbers\n    have the form:\n\n    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)\n\n    Therefore, if we want a web worker to run N checks before asking for\n    a new range of numbers, each range must contain N*30/8 numbers.\n\n    For 100 checks (workLoad), this is a range of 375. */\n\n    var found = false;\n    function workerMessage(e) {\n      // ignore message, prime already found\n      if(found) {\n        return;\n      }\n\n      --running;\n      var data = e.data;\n      if(data.found) {\n        // terminate all workers\n        for(var i = 0; i < workers.length; ++i) {\n          workers[i].terminate();\n        }\n        found = true;\n        return callback(null, new BigInteger(data.prime, 16));\n      }\n\n      // overflow, regenerate random number\n      if(num.bitLength() > bits) {\n        num = generateRandom(bits, rng);\n      }\n\n      // assign new range to check\n      var hex = num.toString(16);\n\n      // start prime search\n      e.target.postMessage({\n        hex: hex,\n        workLoad: workLoad\n      });\n\n      num.dAddOffset(range, 0);\n    }\n  }\n}\n\n/**\n * Generates a random number using the given number of bits and RNG.\n *\n * @param bits the number of bits for the number.\n * @param rng the random number generator to use.\n *\n * @return the random number.\n */\nfunction generateRandom(bits, rng) {\n  var num = new BigInteger(bits, rng);\n  // force MSB set\n  var bits1 = bits - 1;\n  if(!num.testBit(bits1)) {\n    num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);\n  }\n  // align number on 30k+1 boundary\n  num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);\n  return num;\n}\n\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\nfunction getMillerRabinTests(bits) {\n  if(bits <= 100) return 27;\n  if(bits <= 150) return 18;\n  if(bits <= 200) return 15;\n  if(bits <= 250) return 12;\n  if(bits <= 300) return 9;\n  if(bits <= 350) return 8;\n  if(bits <= 400) return 7;\n  if(bits <= 500) return 6;\n  if(bits <= 600) return 5;\n  if(bits <= 800) return 4;\n  if(bits <= 1250) return 3;\n  return 2;\n}\n\n})();\n","/**\n * Javascript implementation of a basic Public Key Infrastructure, including\n * support for RSA public and private keys.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./oids');\nrequire('./pbe');\nrequire('./pem');\nrequire('./pbkdf2');\nrequire('./pkcs12');\nrequire('./pss');\nrequire('./rsa');\nrequire('./util');\nrequire('./x509');\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Public Key Infrastructure (PKI) implementation. */\nvar pki = module.exports = forge.pki = forge.pki || {};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.\n *\n * Converts PEM-formatted data to DER.\n *\n * @param pem the PEM-formatted data.\n *\n * @return the DER-formatted data.\n */\npki.pemToDer = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert PEM to DER; PEM is encrypted.');\n  }\n  return forge.util.createBuffer(msg.body);\n};\n\n/**\n * Converts an RSA private key from PEM format.\n *\n * @param pem the PEM-formatted private key.\n *\n * @return the private key.\n */\npki.privateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM ' +\n      'header type is not \"PRIVATE KEY\" or \"RSA PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert private key from PEM; PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body);\n\n  return pki.privateKeyFromAsn1(obj);\n};\n\n/**\n * Converts an RSA private key to PEM format.\n *\n * @param key the private key.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\npki.privateKeyToPem = function(key, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PrivateKeyInfo to PEM format.\n *\n * @param pki the PrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted private key.\n */\npki.privateKeyInfoToPem = function(pki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'PRIVATE KEY',\n    body: asn1.toDer(pki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n","/**\n * A javascript implementation of a cryptographically-secure\n * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed\n * here though the use of SHA-256 is not enforced; when generating an\n * a PRNG context, the hashing algorithm and block cipher used for\n * the generator are specified via a plugin.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\n\nvar _crypto = null;\nif(forge.util.isNodejs && !forge.options.usePureJavaScript &&\n  !process.versions['node-webkit']) {\n  _crypto = require('crypto');\n}\n\n/* PRNG API */\nvar prng = module.exports = forge.prng = forge.prng || {};\n\n/**\n * Creates a new PRNG context.\n *\n * A PRNG plugin must be passed in that will provide:\n *\n * 1. A function that initializes the key and seed of a PRNG context. It\n *   will be given a 16 byte key and a 16 byte seed. Any key expansion\n *   or transformation of the seed from a byte string into an array of\n *   integers (or similar) should be performed.\n * 2. The cryptographic function used by the generator. It takes a key and\n *   a seed.\n * 3. A seed increment function. It takes the seed and returns seed + 1.\n * 4. An api to create a message digest.\n *\n * For an example, see random.js.\n *\n * @param plugin the PRNG plugin to use.\n */\nprng.create = function(plugin) {\n  var ctx = {\n    plugin: plugin,\n    key: null,\n    seed: null,\n    time: null,\n    // number of reseeds so far\n    reseeds: 0,\n    // amount of data generated so far\n    generated: 0,\n    // no initial key bytes\n    keyBytes: ''\n  };\n\n  // create 32 entropy pools (each is a message digest)\n  var md = plugin.md;\n  var pools = new Array(32);\n  for(var i = 0; i < 32; ++i) {\n    pools[i] = md.create();\n  }\n  ctx.pools = pools;\n\n  // entropy pools are written to cyclically, starting at index 0\n  ctx.pool = 0;\n\n  /**\n   * Generates random bytes. The bytes may be generated synchronously or\n   * asynchronously. Web workers must use the asynchronous interface or\n   * else the behavior is undefined.\n   *\n   * @param count the number of random bytes to generate.\n   * @param [callback(err, bytes)] called once the operation completes.\n   *\n   * @return count random bytes as a string.\n   */\n  ctx.generate = function(count, callback) {\n    // do synchronously\n    if(!callback) {\n      return ctx.generateSync(count);\n    }\n\n    // simple generator using counter-based CBC\n    var cipher = ctx.plugin.cipher;\n    var increment = ctx.plugin.increment;\n    var formatKey = ctx.plugin.formatKey;\n    var formatSeed = ctx.plugin.formatSeed;\n    var b = forge.util.createBuffer();\n\n    // paranoid deviation from Fortuna:\n    // reset key for every request to protect previously\n    // generated random bytes should the key be discovered;\n    // there is no 100ms based reseeding because of this\n    // forced reseed for every `generate` call\n    ctx.key = null;\n\n    generate();\n\n    function generate(err) {\n      if(err) {\n        return callback(err);\n      }\n\n      // sufficient bytes generated\n      if(b.length() >= count) {\n        return callback(null, b.getBytes(count));\n      }\n\n      // if amount of data generated is greater than 1 MiB, trigger reseed\n      if(ctx.generated > 0xfffff) {\n        ctx.key = null;\n      }\n\n      if(ctx.key === null) {\n        // prevent stack overflow\n        return forge.util.nextTick(function() {\n          _reseed(generate);\n        });\n      }\n\n      // generate the random bytes\n      var bytes = cipher(ctx.key, ctx.seed);\n      ctx.generated += bytes.length;\n      b.putBytes(bytes);\n\n      // generate bytes for a new key and seed\n      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n\n      forge.util.setImmediate(generate);\n    }\n  };\n\n  /**\n   * Generates random bytes synchronously.\n   *\n   * @param count the number of random bytes to generate.\n   *\n   * @return count random bytes as a string.\n   */\n  ctx.generateSync = function(count) {\n    // simple generator using counter-based CBC\n    var cipher = ctx.plugin.cipher;\n    var increment = ctx.plugin.increment;\n    var formatKey = ctx.plugin.formatKey;\n    var formatSeed = ctx.plugin.formatSeed;\n\n    // paranoid deviation from Fortuna:\n    // reset key for every request to protect previously\n    // generated random bytes should the key be discovered;\n    // there is no 100ms based reseeding because of this\n    // forced reseed for every `generateSync` call\n    ctx.key = null;\n\n    var b = forge.util.createBuffer();\n    while(b.length() < count) {\n      // if amount of data generated is greater than 1 MiB, trigger reseed\n      if(ctx.generated > 0xfffff) {\n        ctx.key = null;\n      }\n\n      if(ctx.key === null) {\n        _reseedSync();\n      }\n\n      // generate the random bytes\n      var bytes = cipher(ctx.key, ctx.seed);\n      ctx.generated += bytes.length;\n      b.putBytes(bytes);\n\n      // generate bytes for a new key and seed\n      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));\n      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));\n    }\n\n    return b.getBytes(count);\n  };\n\n  /**\n   * Private function that asynchronously reseeds a generator.\n   *\n   * @param callback(err) called once the operation completes.\n   */\n  function _reseed(callback) {\n    if(ctx.pools[0].messageLength >= 32) {\n      _seed();\n      return callback();\n    }\n    // not enough seed data...\n    var needed = (32 - ctx.pools[0].messageLength) << 5;\n    ctx.seedFile(needed, function(err, bytes) {\n      if(err) {\n        return callback(err);\n      }\n      ctx.collect(bytes);\n      _seed();\n      callback();\n    });\n  }\n\n  /**\n   * Private function that synchronously reseeds a generator.\n   */\n  function _reseedSync() {\n    if(ctx.pools[0].messageLength >= 32) {\n      return _seed();\n    }\n    // not enough seed data...\n    var needed = (32 - ctx.pools[0].messageLength) << 5;\n    ctx.collect(ctx.seedFileSync(needed));\n    _seed();\n  }\n\n  /**\n   * Private function that seeds a generator once enough bytes are available.\n   */\n  function _seed() {\n    // update reseed count\n    ctx.reseeds = (ctx.reseeds === 0xffffffff) ? 0 : ctx.reseeds + 1;\n\n    // goal is to update `key` via:\n    // key = hash(key + s)\n    //   where 's' is all collected entropy from selected pools, then...\n\n    // create a plugin-based message digest\n    var md = ctx.plugin.md.create();\n\n    // consume current key bytes\n    md.update(ctx.keyBytes);\n\n    // digest the entropy of pools whose index k meet the\n    // condition 'n mod 2^k == 0' where n is the number of reseeds\n    var _2powK = 1;\n    for(var k = 0; k < 32; ++k) {\n      if(ctx.reseeds % _2powK === 0) {\n        md.update(ctx.pools[k].digest().getBytes());\n        ctx.pools[k].start();\n      }\n      _2powK = _2powK << 1;\n    }\n\n    // get digest for key bytes\n    ctx.keyBytes = md.digest().getBytes();\n\n    // paranoid deviation from Fortuna:\n    // update `seed` via `seed = hash(key)`\n    // instead of initializing to zero once and only\n    // ever incrementing it\n    md.start();\n    md.update(ctx.keyBytes);\n    var seedBytes = md.digest().getBytes();\n\n    // update state\n    ctx.key = ctx.plugin.formatKey(ctx.keyBytes);\n    ctx.seed = ctx.plugin.formatSeed(seedBytes);\n    ctx.generated = 0;\n  }\n\n  /**\n   * The built-in default seedFile. This seedFile is used when entropy\n   * is needed immediately.\n   *\n   * @param needed the number of bytes that are needed.\n   *\n   * @return the random bytes.\n   */\n  function defaultSeedFile(needed) {\n    // use window.crypto.getRandomValues strong source of entropy if available\n    var getRandomValues = null;\n    var globalScope = forge.util.globalScope;\n    var _crypto = globalScope.crypto || globalScope.msCrypto;\n    if(_crypto && _crypto.getRandomValues) {\n      getRandomValues = function(arr) {\n        return _crypto.getRandomValues(arr);\n      };\n    }\n\n    var b = forge.util.createBuffer();\n    if(getRandomValues) {\n      while(b.length() < needed) {\n        // max byte length is 65536 before QuotaExceededError is thrown\n        // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues\n        var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);\n        var entropy = new Uint32Array(Math.floor(count));\n        try {\n          getRandomValues(entropy);\n          for(var i = 0; i < entropy.length; ++i) {\n            b.putInt32(entropy[i]);\n          }\n        } catch(e) {\n          /* only ignore QuotaExceededError */\n          if(!(typeof QuotaExceededError !== 'undefined' &&\n            e instanceof QuotaExceededError)) {\n            throw e;\n          }\n        }\n      }\n    }\n\n    // be sad and add some weak random data\n    if(b.length() < needed) {\n      /* Draws from Park-Miller \"minimal standard\" 31 bit PRNG,\n      implemented with David G. Carta's optimization: with 32 bit math\n      and without division (Public Domain). */\n      var hi, lo, next;\n      var seed = Math.floor(Math.random() * 0x010000);\n      while(b.length() < needed) {\n        lo = 16807 * (seed & 0xFFFF);\n        hi = 16807 * (seed >> 16);\n        lo += (hi & 0x7FFF) << 16;\n        lo += hi >> 15;\n        lo = (lo & 0x7FFFFFFF) + (lo >> 31);\n        seed = lo & 0xFFFFFFFF;\n\n        // consume lower 3 bytes of seed\n        for(var i = 0; i < 3; ++i) {\n          // throw in more pseudo random\n          next = seed >>> (i << 3);\n          next ^= Math.floor(Math.random() * 0x0100);\n          b.putByte(String.fromCharCode(next & 0xFF));\n        }\n      }\n    }\n\n    return b.getBytes(needed);\n  }\n  // initialize seed file APIs\n  if(_crypto) {\n    // use nodejs async API\n    ctx.seedFile = function(needed, callback) {\n      _crypto.randomBytes(needed, function(err, bytes) {\n        if(err) {\n          return callback(err);\n        }\n        callback(null, bytes.toString());\n      });\n    };\n    // use nodejs sync API\n    ctx.seedFileSync = function(needed) {\n      return _crypto.randomBytes(needed).toString();\n    };\n  } else {\n    ctx.seedFile = function(needed, callback) {\n      try {\n        callback(null, defaultSeedFile(needed));\n      } catch(e) {\n        callback(e);\n      }\n    };\n    ctx.seedFileSync = defaultSeedFile;\n  }\n\n  /**\n   * Adds entropy to a prng ctx's accumulator.\n   *\n   * @param bytes the bytes of entropy as a string.\n   */\n  ctx.collect = function(bytes) {\n    // iterate over pools distributing entropy cyclically\n    var count = bytes.length;\n    for(var i = 0; i < count; ++i) {\n      ctx.pools[ctx.pool].update(bytes.substr(i, 1));\n      ctx.pool = (ctx.pool === 31) ? 0 : ctx.pool + 1;\n    }\n  };\n\n  /**\n   * Collects an integer of n bits.\n   *\n   * @param i the integer entropy.\n   * @param n the number of bits in the integer.\n   */\n  ctx.collectInt = function(i, n) {\n    var bytes = '';\n    for(var x = 0; x < n; x += 8) {\n      bytes += String.fromCharCode((i >> x) & 0xFF);\n    }\n    ctx.collect(bytes);\n  };\n\n  /**\n   * Registers a Web Worker to receive immediate entropy from the main thread.\n   * This method is required until Web Workers can access the native crypto\n   * API. This method should be called twice for each created worker, once in\n   * the main thread, and once in the worker itself.\n   *\n   * @param worker the worker to register.\n   */\n  ctx.registerWorker = function(worker) {\n    // worker receives random bytes\n    if(worker === self) {\n      ctx.seedFile = function(needed, callback) {\n        function listener(e) {\n          var data = e.data;\n          if(data.forge && data.forge.prng) {\n            self.removeEventListener('message', listener);\n            callback(data.forge.prng.err, data.forge.prng.bytes);\n          }\n        }\n        self.addEventListener('message', listener);\n        self.postMessage({forge: {prng: {needed: needed}}});\n      };\n    } else {\n      // main thread sends random bytes upon request\n      var listener = function(e) {\n        var data = e.data;\n        if(data.forge && data.forge.prng) {\n          ctx.seedFile(data.forge.prng.needed, function(err, bytes) {\n            worker.postMessage({forge: {prng: {err: err, bytes: bytes}}});\n          });\n        }\n      };\n      // TODO: do we need to remove the event listener when the worker dies?\n      worker.addEventListener('message', listener);\n    }\n  };\n\n  return ctx;\n};\n","/**\n * An API for getting cryptographically-secure random bytes. The bytes are\n * generated using the Fortuna algorithm devised by Bruce Schneier and\n * Niels Ferguson.\n *\n * Getting strong random bytes is not yet easy to do in javascript. The only\n * truish random entropy that can be collected is from the mouse, keyboard, or\n * from timing with respect to page loads, etc. This generator makes a poor\n * attempt at providing random bytes when those sources haven't yet provided\n * enough entropy to initially seed or to reseed the PRNG.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2009-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./sha256');\nrequire('./prng');\nrequire('./util');\n\n(function() {\n\n// forge.random already defined\nif(forge.random && forge.random.getBytes) {\n  module.exports = forge.random;\n  return;\n}\n\n(function(jQuery) {\n\n// the default prng plugin, uses AES-128\nvar prng_aes = {};\nvar _prng_aes_output = new Array(4);\nvar _prng_aes_buffer = forge.util.createBuffer();\nprng_aes.formatKey = function(key) {\n  // convert the key into 32-bit integers\n  var tmp = forge.util.createBuffer(key);\n  key = new Array(4);\n  key[0] = tmp.getInt32();\n  key[1] = tmp.getInt32();\n  key[2] = tmp.getInt32();\n  key[3] = tmp.getInt32();\n\n  // return the expanded key\n  return forge.aes._expandKey(key, false);\n};\nprng_aes.formatSeed = function(seed) {\n  // convert seed into 32-bit integers\n  var tmp = forge.util.createBuffer(seed);\n  seed = new Array(4);\n  seed[0] = tmp.getInt32();\n  seed[1] = tmp.getInt32();\n  seed[2] = tmp.getInt32();\n  seed[3] = tmp.getInt32();\n  return seed;\n};\nprng_aes.cipher = function(key, seed) {\n  forge.aes._updateBlock(key, seed, _prng_aes_output, false);\n  _prng_aes_buffer.putInt32(_prng_aes_output[0]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[1]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[2]);\n  _prng_aes_buffer.putInt32(_prng_aes_output[3]);\n  return _prng_aes_buffer.getBytes();\n};\nprng_aes.increment = function(seed) {\n  // FIXME: do we care about carry or signed issues?\n  ++seed[3];\n  return seed;\n};\nprng_aes.md = forge.md.sha256;\n\n/**\n * Creates a new PRNG.\n */\nfunction spawnPrng() {\n  var ctx = forge.prng.create(prng_aes);\n\n  /**\n   * Gets random bytes. If a native secure crypto API is unavailable, this\n   * method tries to make the bytes more unpredictable by drawing from data that\n   * can be collected from the user of the browser, eg: mouse movement.\n   *\n   * If a callback is given, this method will be called asynchronously.\n   *\n   * @param count the number of random bytes to get.\n   * @param [callback(err, bytes)] called once the operation completes.\n   *\n   * @return the random bytes in a string.\n   */\n  ctx.getBytes = function(count, callback) {\n    return ctx.generate(count, callback);\n  };\n\n  /**\n   * Gets random bytes asynchronously. If a native secure crypto API is\n   * unavailable, this method tries to make the bytes more unpredictable by\n   * drawing from data that can be collected from the user of the browser,\n   * eg: mouse movement.\n   *\n   * @param count the number of random bytes to get.\n   *\n   * @return the random bytes in a string.\n   */\n  ctx.getBytesSync = function(count) {\n    return ctx.generate(count);\n  };\n\n  return ctx;\n}\n\n// create default prng context\nvar _ctx = spawnPrng();\n\n// add other sources of entropy only if window.crypto.getRandomValues is not\n// available -- otherwise this source will be automatically used by the prng\nvar getRandomValues = null;\nvar globalScope = forge.util.globalScope;\nvar _crypto = globalScope.crypto || globalScope.msCrypto;\nif(_crypto && _crypto.getRandomValues) {\n  getRandomValues = function(arr) {\n    return _crypto.getRandomValues(arr);\n  };\n}\n\nif(forge.options.usePureJavaScript ||\n  (!forge.util.isNodejs && !getRandomValues)) {\n  // if this is a web worker, do not use weak entropy, instead register to\n  // receive strong entropy asynchronously from the main thread\n  if(typeof window === 'undefined' || window.document === undefined) {\n    // FIXME:\n  }\n\n  // get load time entropy\n  _ctx.collectInt(+new Date(), 32);\n\n  // add some entropy from navigator object\n  if(typeof(navigator) !== 'undefined') {\n    var _navBytes = '';\n    for(var key in navigator) {\n      try {\n        if(typeof(navigator[key]) == 'string') {\n          _navBytes += navigator[key];\n        }\n      } catch(e) {\n        /* Some navigator keys might not be accessible, e.g. the geolocation\n          attribute throws an exception if touched in Mozilla chrome://\n          context.\n\n          Silently ignore this and just don't use this as a source of\n          entropy. */\n      }\n    }\n    _ctx.collect(_navBytes);\n    _navBytes = null;\n  }\n\n  // add mouse and keyboard collectors if jquery is available\n  if(jQuery) {\n    // set up mouse entropy capture\n    jQuery().mousemove(function(e) {\n      // add mouse coords\n      _ctx.collectInt(e.clientX, 16);\n      _ctx.collectInt(e.clientY, 16);\n    });\n\n    // set up keyboard entropy capture\n    jQuery().keypress(function(e) {\n      _ctx.collectInt(e.charCode, 8);\n    });\n  }\n}\n\n/* Random API */\nif(!forge.random) {\n  forge.random = _ctx;\n} else {\n  // extend forge.random with _ctx\n  for(var key in _ctx) {\n    forge.random[key] = _ctx[key];\n  }\n}\n\n// expose spawn PRNG\nforge.random.createInstance = spawnPrng;\n\nmodule.exports = forge.random;\n\n})(typeof(jQuery) !== 'undefined' ? jQuery : null);\n\n})();\n","/**\n * Partial implementation of PKCS#1 v2.2: RSA-OEAP\n *\n * Modified but based on the following MIT and BSD licensed code:\n *\n * https://github.com/kjur/jsjws/blob/master/rsa.js:\n *\n * The 'jsjws'(JSON Web Signature JavaScript Library) License\n *\n * Copyright (c) 2012 Kenji Urushima\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:\n *\n * RSAES-OAEP.js\n * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $\n * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)\n * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.\n * Contact: ellis@nukinetics.com\n * Distributed under the BSD License.\n *\n * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125\n *\n * @author Evan Jones (http://evanjones.ca/)\n * @author Dave Longley\n *\n * Copyright (c) 2013-2014 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./random');\nrequire('./sha1');\n\n// shortcut for PKCS#1 API\nvar pkcs1 = module.exports = forge.pkcs1 = forge.pkcs1 || {};\n\n/**\n * Encode the given RSAES-OAEP message (M) using key, with optional label (L)\n * and seed.\n *\n * This method does not perform RSA encryption, it only encodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param message the message to encode.\n * @param options the options to use:\n *          label an optional label to use.\n *          seed the seed to use.\n *          md the message digest object to use, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the encoded message bytes.\n */\npkcs1.encode_rsa_oaep = function(key, message, options) {\n  // parse arguments\n  var label;\n  var seed;\n  var md;\n  var mgf1Md;\n  // legacy args (label, seed, md)\n  if(typeof options === 'string') {\n    label = options;\n    seed = arguments[3] || undefined;\n    md = arguments[4] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    seed = options.seed || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(!md) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  // compute length in bytes and check output\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n  var maxLength = keyLength - 2 * md.digestLength - 2;\n  if(message.length > maxLength) {\n    var error = new Error('RSAES-OAEP input message length is too long.');\n    error.length = message.length;\n    error.maxLength = maxLength;\n    throw error;\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest();\n\n  var PS = '';\n  var PS_length = maxLength - message.length;\n  for(var i = 0; i < PS_length; i++) {\n    PS += '\\x00';\n  }\n\n  var DB = lHash.getBytes() + PS + '\\x01' + message;\n\n  if(!seed) {\n    seed = forge.random.getBytes(md.digestLength);\n  } else if(seed.length !== md.digestLength) {\n    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +\n      'match the digest length.');\n    error.seedLength = seed.length;\n    error.digestLength = md.digestLength;\n    throw error;\n  }\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);\n\n  // return encoded message\n  return '\\x00' + maskedSeed + maskedDB;\n};\n\n/**\n * Decode the given RSAES-OAEP encoded message (EM) using key, with optional\n * label (L).\n *\n * This method does not perform RSA decryption, it only decodes the message\n * using RSAES-OAEP.\n *\n * @param key the RSA key to use.\n * @param em the encoded message to decode.\n * @param options the options to use:\n *          label an optional label to use.\n *          md the message digest object to use for OAEP, undefined for SHA-1.\n *          mgf1 optional mgf1 parameters:\n *            md the message digest object to use for MGF1.\n *\n * @return the decoded message bytes.\n */\npkcs1.decode_rsa_oaep = function(key, em, options) {\n  // parse args\n  var label;\n  var md;\n  var mgf1Md;\n  // legacy args\n  if(typeof options === 'string') {\n    label = options;\n    md = arguments[3] || undefined;\n  } else if(options) {\n    label = options.label || undefined;\n    md = options.md || undefined;\n    if(options.mgf1 && options.mgf1.md) {\n      mgf1Md = options.mgf1.md;\n    }\n  }\n\n  // compute length in bytes\n  var keyLength = Math.ceil(key.n.bitLength() / 8);\n\n  if(em.length !== keyLength) {\n    var error = new Error('RSAES-OAEP encoded message length is invalid.');\n    error.length = em.length;\n    error.expectedLength = keyLength;\n    throw error;\n  }\n\n  // default OAEP to SHA-1 message digest\n  if(md === undefined) {\n    md = forge.md.sha1.create();\n  } else {\n    md.start();\n  }\n\n  // default MGF-1 to same as OAEP\n  if(!mgf1Md) {\n    mgf1Md = md;\n  }\n\n  if(keyLength < 2 * md.digestLength + 2) {\n    throw new Error('RSAES-OAEP key is too short for the hash function.');\n  }\n\n  if(!label) {\n    label = '';\n  }\n  md.update(label, 'raw');\n  var lHash = md.digest().getBytes();\n\n  // split the message into its parts\n  var y = em.charAt(0);\n  var maskedSeed = em.substring(1, md.digestLength + 1);\n  var maskedDB = em.substring(1 + md.digestLength);\n\n  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);\n  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);\n\n  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);\n  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);\n\n  var lHashPrime = db.substring(0, md.digestLength);\n\n  // constant time check that all values match what is expected\n  var error = (y !== '\\x00');\n\n  // constant time check lHash vs lHashPrime\n  for(var i = 0; i < md.digestLength; ++i) {\n    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));\n  }\n\n  // \"constant time\" find the 0x1 byte separating the padding (zeros) from the\n  // message\n  // TODO: It must be possible to do this in a better/smarter way?\n  var in_ps = 1;\n  var index = md.digestLength;\n  for(var j = md.digestLength; j < db.length; j++) {\n    var code = db.charCodeAt(j);\n\n    var is_0 = (code & 0x1) ^ 0x1;\n\n    // non-zero if not 0 or 1 in the ps section\n    var error_mask = in_ps ? 0xfffe : 0x0000;\n    error |= (code & error_mask);\n\n    // latch in_ps to zero after we find 0x1\n    in_ps = in_ps & is_0;\n    index += in_ps;\n  }\n\n  if(error || db.charCodeAt(index) !== 0x1) {\n    throw new Error('Invalid RSAES-OAEP padding.');\n  }\n\n  return db.substring(index + 1);\n};\n\nfunction rsa_mgf1(seed, maskLength, hash) {\n  // default to SHA-1 message digest\n  if(!hash) {\n    hash = forge.md.sha1.create();\n  }\n  var t = '';\n  var count = Math.ceil(maskLength / hash.digestLength);\n  for(var i = 0; i < count; ++i) {\n    var c = String.fromCharCode(\n      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);\n    hash.start();\n    hash.update(seed + c);\n    t += hash.digest().getBytes();\n  }\n  return t.substring(0, maskLength);\n}\n","/**\n * Javascript implementation of PKCS#1 PSS signature padding.\n *\n * @author Stefan Siegl\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n */\nvar forge = require('./forge');\nrequire('./random');\nrequire('./util');\n\n// shortcut for PSS API\nvar pss = module.exports = forge.pss = forge.pss || {};\n\n/**\n * Creates a PSS signature scheme object.\n *\n * There are several ways to provide a salt for encoding:\n *\n * 1. Specify the saltLength only and the built-in PRNG will generate it.\n * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that\n *   will be used.\n * 3. Specify the salt itself as a forge.util.ByteBuffer.\n *\n * @param options the options to use:\n *          md the message digest object to use, a forge md instance.\n *          mgf the mask generation function to use, a forge mgf instance.\n *          [saltLength] the length of the salt in octets.\n *          [prng] the pseudo-random number generator to use to produce a salt.\n *          [salt] the salt to use when encoding.\n *\n * @return a signature scheme object.\n */\npss.create = function(options) {\n  // backwards compatibility w/legacy args: hash, mgf, sLen\n  if(arguments.length === 3) {\n    options = {\n      md: arguments[0],\n      mgf: arguments[1],\n      saltLength: arguments[2]\n    };\n  }\n\n  var hash = options.md;\n  var mgf = options.mgf;\n  var hLen = hash.digestLength;\n\n  var salt_ = options.salt || null;\n  if(typeof salt_ === 'string') {\n    // assume binary-encoded string\n    salt_ = forge.util.createBuffer(salt_);\n  }\n\n  var sLen;\n  if('saltLength' in options) {\n    sLen = options.saltLength;\n  } else if(salt_ !== null) {\n    sLen = salt_.length();\n  } else {\n    throw new Error('Salt length not specified or specific salt not given.');\n  }\n\n  if(salt_ !== null && salt_.length() !== sLen) {\n    throw new Error('Given salt length does not match length of given salt.');\n  }\n\n  var prng = options.prng || forge.random;\n\n  var pssobj = {};\n\n  /**\n   * Encodes a PSS signature.\n   *\n   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param modsBits the length of the RSA modulus in bits.\n   *\n   * @return the encoded message as a binary-encoded string of length\n   *           ceil((modBits - 1) / 8).\n   */\n  pssobj.encode = function(md, modBits) {\n    var i;\n    var emBits = modBits - 1;\n    var emLen = Math.ceil(emBits / 8);\n\n    /* 2. Let mHash = Hash(M), an octet string of length hLen. */\n    var mHash = md.digest().getBytes();\n\n    /* 3. If emLen < hLen + sLen + 2, output \"encoding error\" and stop. */\n    if(emLen < hLen + sLen + 2) {\n      throw new Error('Message is too long to encrypt.');\n    }\n\n    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,\n     *    then salt is the empty string. */\n    var salt;\n    if(salt_ === null) {\n      salt = prng.getBytesSync(sLen);\n    } else {\n      salt = salt_.bytes();\n    }\n\n    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */\n    var m_ = new forge.util.ByteBuffer();\n    m_.fillWithByte(0, 8);\n    m_.putBytes(mHash);\n    m_.putBytes(salt);\n\n    /* 6. Let H = Hash(M'), an octet string of length hLen. */\n    hash.start();\n    hash.update(m_.getBytes());\n    var h = hash.digest().getBytes();\n\n    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2\n     *    zero octets.  The length of PS may be 0. */\n    var ps = new forge.util.ByteBuffer();\n    ps.fillWithByte(0, emLen - sLen - hLen - 2);\n\n    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length\n     *    emLen - hLen - 1. */\n    ps.putByte(0x01);\n    ps.putBytes(salt);\n    var db = ps.getBytes();\n\n    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */\n    var maskLen = emLen - hLen - 1;\n    var dbMask = mgf.generate(h, maskLen);\n\n    /* 10. Let maskedDB = DB \\xor dbMask. */\n    var maskedDB = '';\n    for(i = 0; i < maskLen; i++) {\n      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));\n    }\n\n    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in\n     *     maskedDB to zero. */\n    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;\n    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +\n      maskedDB.substr(1);\n\n    /* 12. Let EM = maskedDB || H || 0xbc.\n     * 13. Output EM. */\n    return maskedDB + h + String.fromCharCode(0xbc);\n  };\n\n  /**\n   * Verifies a PSS signature.\n   *\n   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.\n   *\n   * @param mHash the message digest hash, as a binary-encoded string, to\n   *         compare against the signature.\n   * @param em the encoded message, as a binary-encoded string\n   *          (RSA decryption result).\n   * @param modsBits the length of the RSA modulus in bits.\n   *\n   * @return true if the signature was verified, false if not.\n   */\n  pssobj.verify = function(mHash, em, modBits) {\n    var i;\n    var emBits = modBits - 1;\n    var emLen = Math.ceil(emBits / 8);\n\n    /* c. Convert the message representative m to an encoded message EM\n     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits\n     *    is the length in bits of the RSA modulus n */\n    em = em.substr(-emLen);\n\n    /* 3. If emLen < hLen + sLen + 2, output \"inconsistent\" and stop. */\n    if(emLen < hLen + sLen + 2) {\n      throw new Error('Inconsistent parameters to PSS signature verification.');\n    }\n\n    /* 4. If the rightmost octet of EM does not have hexadecimal value\n     *    0xbc, output \"inconsistent\" and stop. */\n    if(em.charCodeAt(emLen - 1) !== 0xbc) {\n      throw new Error('Encoded message does not end in 0xBC.');\n    }\n\n    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and\n     *    let H be the next hLen octets. */\n    var maskLen = emLen - hLen - 1;\n    var maskedDB = em.substr(0, maskLen);\n    var h = em.substr(maskLen, hLen);\n\n    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in\n     *    maskedDB are not all equal to zero, output \"inconsistent\" and stop. */\n    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;\n    if((maskedDB.charCodeAt(0) & mask) !== 0) {\n      throw new Error('Bits beyond keysize not zero as expected.');\n    }\n\n    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */\n    var dbMask = mgf.generate(h, maskLen);\n\n    /* 8. Let DB = maskedDB \\xor dbMask. */\n    var db = '';\n    for(i = 0; i < maskLen; i++) {\n      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));\n    }\n\n    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet\n     * in DB to zero. */\n    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);\n\n    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero\n     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost\n     * position is \"position 1\") does not have hexadecimal value 0x01,\n     * output \"inconsistent\" and stop. */\n    var checkLen = emLen - hLen - sLen - 2;\n    for(i = 0; i < checkLen; i++) {\n      if(db.charCodeAt(i) !== 0x00) {\n        throw new Error('Leftmost octets not zero as expected');\n      }\n    }\n\n    if(db.charCodeAt(checkLen) !== 0x01) {\n      throw new Error('Inconsistent PSS signature, 0x01 marker not found');\n    }\n\n    /* 11. Let salt be the last sLen octets of DB. */\n    var salt = db.substr(-sLen);\n\n    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */\n    var m_ = new forge.util.ByteBuffer();\n    m_.fillWithByte(0, 8);\n    m_.putBytes(mHash);\n    m_.putBytes(salt);\n\n    /* 13. Let H' = Hash(M'), an octet string of length hLen. */\n    hash.start();\n    hash.update(m_.getBytes());\n    var h_ = hash.digest().getBytes();\n\n    /* 14. If H = H', output \"consistent.\" Otherwise, output \"inconsistent.\" */\n    return h === h_;\n  };\n\n  return pssobj;\n};\n","/**\n * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.\n *\n * @author Dave Longley\n * @author Stefan Siegl\n *\n * Copyright (c) 2012-2015 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * The ASN.1 representation of PKCS#7 is as follows\n * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):\n *\n * A PKCS#7 message consists of a ContentInfo on root level, which may\n * contain any number of further ContentInfo nested into it.\n *\n * ContentInfo ::= SEQUENCE {\n *   contentType                ContentType,\n *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL\n * }\n *\n * ContentType ::= OBJECT IDENTIFIER\n *\n * EnvelopedData ::= SEQUENCE {\n *   version                    Version,\n *   recipientInfos             RecipientInfos,\n *   encryptedContentInfo       EncryptedContentInfo\n * }\n *\n * EncryptedData ::= SEQUENCE {\n *   version                    Version,\n *   encryptedContentInfo       EncryptedContentInfo\n * }\n *\n * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }\n *\n * SignedData ::= SEQUENCE {\n *   version           INTEGER,\n *   digestAlgorithms  DigestAlgorithmIdentifiers,\n *   contentInfo       ContentInfo,\n *   certificates      [0] IMPLICIT Certificates OPTIONAL,\n *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,\n *   signerInfos       SignerInfos\n * }\n *\n * SignerInfos ::= SET OF SignerInfo\n *\n * SignerInfo ::= SEQUENCE {\n *   version                    Version,\n *   issuerAndSerialNumber      IssuerAndSerialNumber,\n *   digestAlgorithm            DigestAlgorithmIdentifier,\n *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,\n *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,\n *   encryptedDigest            EncryptedDigest,\n *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL\n * }\n *\n * EncryptedDigest ::= OCTET STRING\n *\n * Attributes ::= SET OF Attribute\n *\n * Attribute ::= SEQUENCE {\n *   attrType    OBJECT IDENTIFIER,\n *   attrValues  SET OF AttributeValue\n * }\n *\n * AttributeValue ::= ANY\n *\n * Version ::= INTEGER\n *\n * RecipientInfos ::= SET OF RecipientInfo\n *\n * EncryptedContentInfo ::= SEQUENCE {\n *   contentType                 ContentType,\n *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,\n *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL\n * }\n *\n * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of AES and DES3, there is only one,\n * the IV.\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *    algorithm OBJECT IDENTIFIER,\n *    parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * EncryptedContent ::= OCTET STRING\n *\n * RecipientInfo ::= SEQUENCE {\n *   version                     Version,\n *   issuerAndSerialNumber       IssuerAndSerialNumber,\n *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,\n *   encryptedKey                EncryptedKey\n * }\n *\n * IssuerAndSerialNumber ::= SEQUENCE {\n *   issuer                      Name,\n *   serialNumber                CertificateSerialNumber\n * }\n *\n * CertificateSerialNumber ::= INTEGER\n *\n * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedKey ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./util');\n\n// shortcut for ASN.1 API\nvar asn1 = forge.asn1;\n\n// shortcut for PKCS#7 API\nvar p7v = module.exports = forge.pkcs7asn1 = forge.pkcs7asn1 || {};\nforge.pkcs7 = forge.pkcs7 || {};\nforge.pkcs7.asn1 = p7v;\n\nvar contentInfoValidator = {\n  name: 'ContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'ContentInfo.ContentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'ContentInfo.content',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    captureAsn1: 'content'\n  }]\n};\np7v.contentInfoValidator = contentInfoValidator;\n\nvar encryptedContentInfoValidator = {\n  name: 'EncryptedContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedContentInfo.contentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'EncryptedContentInfo.encryptedContent',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    /* The PKCS#7 structure output by OpenSSL somewhat differs from what\n     * other implementations do generate.\n     *\n     * OpenSSL generates a structure like this:\n     * SEQUENCE {\n     *    ...\n     *    [0]\n     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n     *       ...\n     * }\n     *\n     * Whereas other implementations (and this PKCS#7 module) generate:\n     * SEQUENCE {\n     *    ...\n     *    [0] {\n     *       OCTET STRING\n     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38\n     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45\n     *          ...\n     *    }\n     * }\n     *\n     * In order to support both, we just capture the context specific\n     * field here.  The OCTET STRING bit is removed below.\n     */\n    capture: 'encryptedContent',\n    captureAsn1: 'encryptedContentAsn1'\n  }]\n};\n\np7v.envelopedDataValidator = {\n  name: 'EnvelopedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EnvelopedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'EnvelopedData.RecipientInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'recipientInfos'\n  }].concat(encryptedContentInfoValidator)\n};\n\np7v.encryptedDataValidator = {\n  name: 'EncryptedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }].concat(encryptedContentInfoValidator)\n};\n\nvar signerValidator = {\n  name: 'SignerInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignerInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false\n  }, {\n    name: 'SignerInfo.issuerAndSerialNumber',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.issuerAndSerialNumber.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'SignerInfo.digestAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'SignerInfo.digestAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'digestAlgorithm'\n    }, {\n      name: 'SignerInfo.digestAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'digestParameter',\n      optional: true\n    }]\n  }, {\n    name: 'SignerInfo.authenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    constructed: true,\n    optional: true,\n    capture: 'authenticatedAttributes'\n  }, {\n    name: 'SignerInfo.digestEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    capture: 'signatureAlgorithm'\n  }, {\n    name: 'SignerInfo.encryptedDigest',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'signature'\n  }, {\n    name: 'SignerInfo.unauthenticatedAttributes',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    constructed: true,\n    optional: true,\n    capture: 'unauthenticatedAttributes'\n  }]\n};\n\np7v.signedDataValidator = {\n  name: 'SignedData',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SignedData.Version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'SignedData.DigestAlgorithms',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    captureAsn1: 'digestAlgorithms'\n  },\n  contentInfoValidator,\n  {\n    name: 'SignedData.Certificates',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 0,\n    optional: true,\n    captureAsn1: 'certificates'\n  }, {\n    name: 'SignedData.CertificateRevocationLists',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    type: 1,\n    optional: true,\n    captureAsn1: 'crls'\n  }, {\n    name: 'SignedData.SignerInfos',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    capture: 'signerInfos',\n    optional: true,\n    value: [signerValidator]\n  }]\n};\n\np7v.recipientInfoValidator = {\n  name: 'RecipientInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'RecipientInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  }, {\n    name: 'RecipientInfo.issuerAndSerial',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.issuerAndSerial.issuer',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'issuer'\n    }, {\n      name: 'RecipientInfo.issuerAndSerial.serialNumber',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      capture: 'serial'\n    }]\n  }, {\n    name: 'RecipientInfo.keyEncryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encAlgorithm'\n    }, {\n      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',\n      tagClass: asn1.Class.UNIVERSAL,\n      constructed: false,\n      captureAsn1: 'encParameter'\n    }]\n  }, {\n    name: 'RecipientInfo.encryptedKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encKey'\n  }]\n};\n","/**\n * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\nvar sha1 = module.exports = forge.sha1 = forge.sha1 || {};\nforge.md.sha1 = forge.md.algorithms.sha1 = sha1;\n\n/**\n * Creates a SHA-1 message digest object.\n *\n * @return a message digest object.\n */\nsha1.create = function() {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  // SHA-1 state contains five 32-bit integers\n  var _state = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for word storage\n  var _w = new Array(80);\n\n  // message digest object\n  var md = {\n    algorithm: 'sha1',\n    blockLength: 64,\n    digestLength: 20,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 8\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength64 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength64 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _state = {\n      h0: 0x67452301,\n      h1: 0xEFCDAB89,\n      h2: 0x98BADCFE,\n      h3: 0x10325476,\n      h4: 0xC3D2E1F0\n    };\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = ((len[1] / 0x100000000) >>> 0);\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_state, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-1 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in big-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry from next int\n    var next, carry;\n    var bits = md.fullMessageLength[0] * 8;\n    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n      next = md.fullMessageLength[i + 1] * 8;\n      carry = (next / 0x100000000) >>> 0;\n      bits += carry;\n      finalBlock.putInt32(bits >>> 0);\n      bits = next >>> 0;\n    }\n    finalBlock.putInt32(bits);\n\n    var s2 = {\n      h0: _state.h0,\n      h1: _state.h1,\n      h2: _state.h2,\n      h3: _state.h3,\n      h4: _state.h4\n    };\n    _update(s2, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    rval.putInt32(s2.h0);\n    rval.putInt32(s2.h1);\n    rval.putInt32(s2.h2);\n    rval.putInt32(s2.h3);\n    rval.putInt32(s2.h4);\n    return rval;\n  };\n\n  return md;\n};\n\n// sha-1 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates a SHA-1 state with the given byte buffer.\n *\n * @param s the SHA-1 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (64 byte) chunks\n  var t, a, b, c, d, e, f, i;\n  var len = bytes.length();\n  while(len >= 64) {\n    // the w array will be populated with sixteen 32-bit big-endian words\n    // and then extended into 80 32-bit words according to SHA-1 algorithm\n    // and for 32-79 using Max Locktyukhin's optimization\n\n    // initialize hash value for this chunk\n    a = s.h0;\n    b = s.h1;\n    c = s.h2;\n    d = s.h3;\n    e = s.h4;\n\n    // round 1\n    for(i = 0; i < 16; ++i) {\n      t = bytes.getInt32();\n      w[i] = t;\n      f = d ^ (b & (c ^ d));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    for(; i < 20; ++i) {\n      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);\n      t = (t << 1) | (t >>> 31);\n      w[i] = t;\n      f = d ^ (b & (c ^ d));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    // round 2\n    for(; i < 32; ++i) {\n      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);\n      t = (t << 1) | (t >>> 31);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    for(; i < 40; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    // round 3\n    for(; i < 60; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = (b & c) | (d & (b ^ c));\n      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n    // round 4\n    for(; i < 80; ++i) {\n      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);\n      t = (t << 2) | (t >>> 30);\n      w[i] = t;\n      f = b ^ c ^ d;\n      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;\n      e = d;\n      d = c;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      c = ((b << 30) | (b >>> 2)) >>> 0;\n      b = a;\n      a = t;\n    }\n\n    // update hash state\n    s.h0 = (s.h0 + a) | 0;\n    s.h1 = (s.h1 + b) | 0;\n    s.h2 = (s.h2 + c) | 0;\n    s.h3 = (s.h3 + d) | 0;\n    s.h4 = (s.h4 + e) | 0;\n\n    len -= 64;\n  }\n}\n","/**\n * RC2 implementation.\n *\n * @author Stefan Siegl\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * Information on the RC2 cipher is available from RFC #2268,\n * http://www.ietf.org/rfc/rfc2268.txt\n */\nvar forge = require('./forge');\nrequire('./util');\n\nvar piTable = [\n  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,\n  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,\n  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,\n  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,\n  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,\n  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,\n  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,\n  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,\n  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,\n  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,\n  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,\n  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,\n  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,\n  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,\n  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,\n  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad\n];\n\nvar s = [1, 2, 3, 5];\n\n/**\n * Rotate a word left by given number of bits.\n *\n * Bits that are shifted out on the left are put back in on the right\n * hand side.\n *\n * @param word The word to shift left.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */\nvar rol = function(word, bits) {\n  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));\n};\n\n/**\n * Rotate a word right by given number of bits.\n *\n * Bits that are shifted out on the right are put back in on the left\n * hand side.\n *\n * @param word The word to shift right.\n * @param bits The number of bits to shift by.\n * @return The rotated word.\n */\nvar ror = function(word, bits) {\n  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);\n};\n\n/* RC2 API */\nmodule.exports = forge.rc2 = forge.rc2 || {};\n\n/**\n * Perform RC2 key expansion as per RFC #2268, section 2.\n *\n * @param key variable-length user key (between 1 and 128 bytes)\n * @param effKeyBits number of effective key bits (default: 128)\n * @return the expanded RC2 key (ByteBuffer of 128 bytes)\n */\nforge.rc2.expandKey = function(key, effKeyBits) {\n  if(typeof key === 'string') {\n    key = forge.util.createBuffer(key);\n  }\n  effKeyBits = effKeyBits || 128;\n\n  /* introduce variables that match the names used in RFC #2268 */\n  var L = key;\n  var T = key.length();\n  var T1 = effKeyBits;\n  var T8 = Math.ceil(T1 / 8);\n  var TM = 0xff >> (T1 & 0x07);\n  var i;\n\n  for(i = T; i < 128; i++) {\n    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);\n  }\n\n  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);\n\n  for(i = 127 - T8; i >= 0; i--) {\n    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);\n  }\n\n  return L;\n};\n\n/**\n * Creates a RC2 cipher object.\n *\n * @param key the symmetric key to use (as base for key generation).\n * @param bits the number of effective key bits.\n * @param encrypt false for decryption, true for encryption.\n *\n * @return the cipher.\n */\nvar createCipher = function(key, bits, encrypt) {\n  var _finish = false, _input = null, _output = null, _iv = null;\n  var mixRound, mashRound;\n  var i, j, K = [];\n\n  /* Expand key and fill into K[] Array */\n  key = forge.rc2.expandKey(key, bits);\n  for(i = 0; i < 64; i++) {\n    K.push(key.getInt16Le());\n  }\n\n  if(encrypt) {\n    /**\n     * Perform one mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */\n    mixRound = function(R) {\n      for(i = 0; i < 4; i++) {\n        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\n        R[i] = rol(R[i], s[i]);\n        j++;\n      }\n    };\n\n    /**\n     * Perform one mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */\n    mashRound = function(R) {\n      for(i = 0; i < 4; i++) {\n        R[i] += K[R[(i + 3) % 4] & 63];\n      }\n    };\n  } else {\n    /**\n     * Perform one r-mixing round \"in place\".\n     *\n     * @param R Array of four words to perform mixing on.\n     */\n    mixRound = function(R) {\n      for(i = 3; i >= 0; i--) {\n        R[i] = ror(R[i], s[i]);\n        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +\n          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);\n        j--;\n      }\n    };\n\n    /**\n     * Perform one r-mashing round \"in place\".\n     *\n     * @param R Array of four words to perform mashing on.\n     */\n    mashRound = function(R) {\n      for(i = 3; i >= 0; i--) {\n        R[i] -= K[R[(i + 3) % 4] & 63];\n      }\n    };\n  }\n\n  /**\n   * Run the specified cipher execution plan.\n   *\n   * This function takes four words from the input buffer, applies the IV on\n   * it (if requested) and runs the provided execution plan.\n   *\n   * The plan must be put together in form of a array of arrays.  Where the\n   * outer one is simply a list of steps to perform and the inner one needs\n   * to have two elements: the first one telling how many rounds to perform,\n   * the second one telling what to do (i.e. the function to call).\n   *\n   * @param {Array} plan The plan to execute.\n   */\n  var runPlan = function(plan) {\n    var R = [];\n\n    /* Get data from input buffer and fill the four words into R */\n    for(i = 0; i < 4; i++) {\n      var val = _input.getInt16Le();\n\n      if(_iv !== null) {\n        if(encrypt) {\n          /* We're encrypting, apply the IV first. */\n          val ^= _iv.getInt16Le();\n        } else {\n          /* We're decryption, keep cipher text for next block. */\n          _iv.putInt16Le(val);\n        }\n      }\n\n      R.push(val & 0xffff);\n    }\n\n    /* Reset global \"j\" variable as per spec. */\n    j = encrypt ? 0 : 63;\n\n    /* Run execution plan. */\n    for(var ptr = 0; ptr < plan.length; ptr++) {\n      for(var ctr = 0; ctr < plan[ptr][0]; ctr++) {\n        plan[ptr][1](R);\n      }\n    }\n\n    /* Write back result to output buffer. */\n    for(i = 0; i < 4; i++) {\n      if(_iv !== null) {\n        if(encrypt) {\n          /* We're encrypting in CBC-mode, feed back encrypted bytes into\n             IV buffer to carry it forward to next block. */\n          _iv.putInt16Le(R[i]);\n        } else {\n          R[i] ^= _iv.getInt16Le();\n        }\n      }\n\n      _output.putInt16Le(R[i]);\n    }\n  };\n\n  /* Create cipher object */\n  var cipher = null;\n  cipher = {\n    /**\n     * Starts or restarts the encryption or decryption process, whichever\n     * was previously configured.\n     *\n     * To use the cipher in CBC mode, iv may be given either as a string\n     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.\n     *\n     * @param iv the initialization vector to use, null for ECB mode.\n     * @param output the output the buffer to write to, null to create one.\n     */\n    start: function(iv, output) {\n      if(iv) {\n        /* CBC mode */\n        if(typeof iv === 'string') {\n          iv = forge.util.createBuffer(iv);\n        }\n      }\n\n      _finish = false;\n      _input = forge.util.createBuffer();\n      _output = output || new forge.util.createBuffer();\n      _iv = iv;\n\n      cipher.output = _output;\n    },\n\n    /**\n     * Updates the next block.\n     *\n     * @param input the buffer to read from.\n     */\n    update: function(input) {\n      if(!_finish) {\n        // not finishing, so fill the input buffer with more input\n        _input.putBuffer(input);\n      }\n\n      while(_input.length() >= 8) {\n        runPlan([\n            [ 5, mixRound ],\n            [ 1, mashRound ],\n            [ 6, mixRound ],\n            [ 1, mashRound ],\n            [ 5, mixRound ]\n          ]);\n      }\n    },\n\n    /**\n     * Finishes encrypting or decrypting.\n     *\n     * @param pad a padding function to use, null for PKCS#7 padding,\n     *           signature(blockSize, buffer, decrypt).\n     *\n     * @return true if successful, false on error.\n     */\n    finish: function(pad) {\n      var rval = true;\n\n      if(encrypt) {\n        if(pad) {\n          rval = pad(8, _input, !encrypt);\n        } else {\n          // add PKCS#7 padding to block (each pad byte is the\n          // value of the number of pad bytes)\n          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());\n          _input.fillWithByte(padding, padding);\n        }\n      }\n\n      if(rval) {\n        // do final update\n        _finish = true;\n        cipher.update();\n      }\n\n      if(!encrypt) {\n        // check for error: input data not a multiple of block size\n        rval = (_input.length() === 0);\n        if(rval) {\n          if(pad) {\n            rval = pad(8, _output, !encrypt);\n          } else {\n            // ensure padding byte count is valid\n            var len = _output.length();\n            var count = _output.at(len - 1);\n\n            if(count > len) {\n              rval = false;\n            } else {\n              // trim off padding bytes\n              _output.truncate(count);\n            }\n          }\n        }\n      }\n\n      return rval;\n    }\n  };\n\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */\nforge.rc2.startEncrypting = function(key, iv, output) {\n  var cipher = forge.rc2.createEncryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start encrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */\nforge.rc2.createEncryptionCipher = function(key, bits) {\n  return createCipher(key, bits, true);\n};\n\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key. The output will be stored in the 'output' member\n * of the returned cipher.\n *\n * The key and iv may be given as a string of bytes or a byte buffer.\n * The cipher is initialized to use 128 effective key bits.\n *\n * @param key the symmetric key to use.\n * @param iv the initialization vector to use.\n * @param output the buffer to write to, null to create one.\n *\n * @return the cipher.\n */\nforge.rc2.startDecrypting = function(key, iv, output) {\n  var cipher = forge.rc2.createDecryptionCipher(key, 128);\n  cipher.start(iv, output);\n  return cipher;\n};\n\n/**\n * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the\n * given symmetric key.\n *\n * The key may be given as a string of bytes or a byte buffer.\n *\n * To start decrypting call start() on the cipher with an iv and optional\n * output buffer.\n *\n * @param key the symmetric key to use.\n *\n * @return the cipher.\n */\nforge.rc2.createDecryptionCipher = function(key, bits) {\n  return createCipher(key, bits, false);\n};\n","/**\n * Javascript implementation of basic RSA algorithms.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n *\n * The only algorithm currently supported for PKI is RSA.\n *\n * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo\n * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier\n * and a subjectPublicKey of type bit string.\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of RSA, there aren't any.\n *\n * SubjectPublicKeyInfo ::= SEQUENCE {\n *   algorithm AlgorithmIdentifier,\n *   subjectPublicKey BIT STRING\n * }\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *   algorithm OBJECT IDENTIFIER,\n *   parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * For an RSA public key, the subjectPublicKey is:\n *\n * RSAPublicKey ::= SEQUENCE {\n *   modulus            INTEGER,    -- n\n *   publicExponent     INTEGER     -- e\n * }\n *\n * PrivateKeyInfo ::= SEQUENCE {\n *   version                   Version,\n *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n *   privateKey                PrivateKey,\n *   attributes           [0]  IMPLICIT Attributes OPTIONAL\n * }\n *\n * Version ::= INTEGER\n * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\n * PrivateKey ::= OCTET STRING\n * Attributes ::= SET OF Attribute\n *\n * An RSA private key as the following structure:\n *\n * RSAPrivateKey ::= SEQUENCE {\n *   version Version,\n *   modulus INTEGER, -- n\n *   publicExponent INTEGER, -- e\n *   privateExponent INTEGER, -- d\n *   prime1 INTEGER, -- p\n *   prime2 INTEGER, -- q\n *   exponent1 INTEGER, -- d mod (p-1)\n *   exponent2 INTEGER, -- d mod (q-1)\n *   coefficient INTEGER -- (inverse of q) mod p\n * }\n *\n * Version ::= INTEGER\n *\n * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./jsbn');\nrequire('./oids');\nrequire('./pkcs1');\nrequire('./prime');\nrequire('./random');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\nvar _crypto = forge.util.isNodejs ? require('crypto') : null;\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n// shortcut for util API\nvar util = forge.util;\n\n/*\n * RSA encryption and decryption, see RFC 2313.\n */\nforge.pki = forge.pki || {};\nmodule.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};\nvar pki = forge.pki;\n\n// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n\n// validator for a PrivateKeyInfo structure\nvar privateKeyValidator = {\n  // PrivateKeyInfo\n  name: 'PrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'PrivateKeyInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // privateKeyAlgorithm\n    name: 'PrivateKeyInfo.privateKeyAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'privateKeyOid'\n    }]\n  }, {\n    // PrivateKey\n    name: 'PrivateKeyInfo',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'privateKey'\n  }]\n};\n\n// validator for an RSA private key\nvar rsaPrivateKeyValidator = {\n  // RSAPrivateKey\n  name: 'RSAPrivateKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'RSAPrivateKey.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // modulus (n)\n    name: 'RSAPrivateKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPrivateKey.publicExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPublicExponent'\n  }, {\n    // privateExponent (d)\n    name: 'RSAPrivateKey.privateExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrivateExponent'\n  }, {\n    // prime1 (p)\n    name: 'RSAPrivateKey.prime1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime1'\n  }, {\n    // prime2 (q)\n    name: 'RSAPrivateKey.prime2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime2'\n  }, {\n    // exponent1 (d mod (p-1))\n    name: 'RSAPrivateKey.exponent1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent1'\n  }, {\n    // exponent2 (d mod (q-1))\n    name: 'RSAPrivateKey.exponent2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent2'\n  }, {\n    // coefficient ((inverse of q) mod p)\n    name: 'RSAPrivateKey.coefficient',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyCoefficient'\n  }]\n};\n\n// validator for an RSA public key\nvar rsaPublicKeyValidator = {\n  // RSAPublicKey\n  name: 'RSAPublicKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // modulus (n)\n    name: 'RSAPublicKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPublicKey.exponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyExponent'\n  }]\n};\n\n// validator for an SubjectPublicKeyInfo structure\n// Note: Currently only works with an RSA public key\nvar publicKeyValidator = forge.pki.rsa.publicKeyValidator = {\n  name: 'SubjectPublicKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  captureAsn1: 'subjectPublicKeyInfo',\n  value: [{\n    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'publicKeyOid'\n    }]\n  }, {\n    // subjectPublicKey\n    name: 'SubjectPublicKeyInfo.subjectPublicKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.BITSTRING,\n    constructed: false,\n    value: [{\n      // RSAPublicKey\n      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      optional: true,\n      captureAsn1: 'rsaPublicKey'\n    }]\n  }]\n};\n\n/**\n * Wrap digest in DigestInfo object.\n *\n * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.\n *\n * DigestInfo ::= SEQUENCE {\n *   digestAlgorithm DigestAlgorithmIdentifier,\n *   digest Digest\n * }\n *\n * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n * Digest ::= OCTET STRING\n *\n * @param md the message digest object with the hash to sign.\n *\n * @return the encoded message (ready for RSA encrytion)\n */\nvar emsaPkcs1v15encode = function(md) {\n  // get the oid for the algorithm\n  var oid;\n  if(md.algorithm in pki.oids) {\n    oid = pki.oids[md.algorithm];\n  } else {\n    var error = new Error('Unknown message digest algorithm.');\n    error.algorithm = md.algorithm;\n    throw error;\n  }\n  var oidBytes = asn1.oidToDer(oid).getBytes();\n\n  // create the digest info\n  var digestInfo = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  var digestAlgorithm = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  digestAlgorithm.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));\n  digestAlgorithm.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));\n  var digest = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,\n    false, md.digest().getBytes());\n  digestInfo.value.push(digestAlgorithm);\n  digestInfo.value.push(digest);\n\n  // encode digest info\n  return asn1.toDer(digestInfo).getBytes();\n};\n\n/**\n * Performs x^c mod n (RSA encryption or decryption operation).\n *\n * @param x the number to raise and mod.\n * @param key the key to use.\n * @param pub true if the key is public, false if private.\n *\n * @return the result of x^c mod n.\n */\nvar _modPow = function(x, key, pub) {\n  if(pub) {\n    return x.modPow(key.e, key.n);\n  }\n\n  if(!key.p || !key.q) {\n    // allow calculation without CRT params (slow)\n    return x.modPow(key.d, key.n);\n  }\n\n  // pre-compute dP, dQ, and qInv if necessary\n  if(!key.dP) {\n    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));\n  }\n  if(!key.dQ) {\n    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));\n  }\n  if(!key.qInv) {\n    key.qInv = key.q.modInverse(key.p);\n  }\n\n  /* Chinese remainder theorem (CRT) states:\n\n    Suppose n1, n2, ..., nk are positive integers which are pairwise\n    coprime (n1 and n2 have no common factors other than 1). For any\n    integers x1, x2, ..., xk there exists an integer x solving the\n    system of simultaneous congruences (where ~= means modularly\n    congruent so a ~= b mod n means a mod n = b mod n):\n\n    x ~= x1 mod n1\n    x ~= x2 mod n2\n    ...\n    x ~= xk mod nk\n\n    This system of congruences has a single simultaneous solution x\n    between 0 and n - 1. Furthermore, each xk solution and x itself\n    is congruent modulo the product n = n1*n2*...*nk.\n    So x1 mod n = x2 mod n = xk mod n = x mod n.\n\n    The single simultaneous solution x can be solved with the following\n    equation:\n\n    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.\n\n    Where x is less than n, xi = x mod ni.\n\n    For RSA we are only concerned with k = 2. The modulus n = pq, where\n    p and q are coprime. The RSA decryption algorithm is:\n\n    y = x^d mod n\n\n    Given the above:\n\n    x1 = x^d mod p\n    r1 = n/p = q\n    s1 = q^-1 mod p\n    x2 = x^d mod q\n    r2 = n/q = p\n    s2 = p^-1 mod q\n\n    So y = (x1r1s1 + x2r2s2) mod n\n         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n\n\n    According to Fermat's Little Theorem, if the modulus P is prime,\n    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.\n    Since A is not divisible by P it follows that if:\n    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:\n\n    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort\n    to calculate). In order to calculate x^d mod p more quickly the\n    exponent d mod (p - 1) is stored in the RSA private key (the same\n    is done for x^d mod q). These values are referred to as dP and dQ\n    respectively. Therefore we now have:\n\n    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n\n\n    Since we'll be reducing x^dP by modulo p (same for q) we can also\n    reduce x by p (and q respectively) before hand. Therefore, let\n\n    xp = ((x mod p)^dP mod p), and\n    xq = ((x mod q)^dQ mod q), yielding:\n\n    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n\n\n    This can be further reduced to a simple algorithm that only\n    requires 1 inverse (the q inverse is used) to be used and stored.\n    The algorithm is called Garner's algorithm. If qInv is the\n    inverse of q, we simply calculate:\n\n    y = (qInv*(xp - xq) mod p) * q + xq\n\n    However, there are two further complications. First, we need to\n    ensure that xp > xq to prevent signed BigIntegers from being used\n    so we add p until this is true (since we will be mod'ing with\n    p anyway). Then, there is a known timing attack on algorithms\n    using the CRT. To mitigate this risk, \"cryptographic blinding\"\n    should be used. This requires simply generating a random number r\n    between 0 and n-1 and its inverse and multiplying x by r^e before\n    calculating y and then multiplying y by r^-1 afterwards. Note that\n    r must be coprime with n (gcd(r, n) === 1) in order to have an\n    inverse.\n  */\n\n  // cryptographic blinding\n  var r;\n  do {\n    r = new BigInteger(\n      forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),\n      16);\n  } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));\n  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);\n\n  // calculate xp and xq\n  var xp = x.mod(key.p).modPow(key.dP, key.p);\n  var xq = x.mod(key.q).modPow(key.dQ, key.q);\n\n  // xp must be larger than xq to avoid signed bit usage\n  while(xp.compareTo(xq) < 0) {\n    xp = xp.add(key.p);\n  }\n\n  // do last step\n  var y = xp.subtract(xq)\n    .multiply(key.qInv).mod(key.p)\n    .multiply(key.q).add(xq);\n\n  // remove effect of random for cryptographic blinding\n  y = y.multiply(r.modInverse(key.n)).mod(key.n);\n\n  return y;\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or\n * 'encrypt' on a public key object instead.\n *\n * Performs RSA encryption.\n *\n * The parameter bt controls whether to put padding bytes before the\n * message passed in. Set bt to either true or false to disable padding\n * completely (in order to handle e.g. EMSA-PSS encoding seperately before),\n * signaling whether the encryption operation is a public key operation\n * (i.e. encrypting data) or not, i.e. private key operation (data signing).\n *\n * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01\n * (for signing) or 0x02 (for encryption). The key operation mode (private\n * or public) is derived from this flag in that case).\n *\n * @param m the message to encrypt as a byte string.\n * @param key the RSA key to use.\n * @param bt for PKCS#1 v1.5 padding, the block type to use\n *   (0x01 for private key, 0x02 for public),\n *   to disable padding: true = public key, false = private key.\n *\n * @return the encrypted bytes as a string.\n */\npki.rsa.encrypt = function(m, key, bt) {\n  var pub = bt;\n  var eb;\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  if(bt !== false && bt !== true) {\n    // legacy, default to PKCS#1 v1.5 padding\n    pub = (bt === 0x02);\n    eb = _encodePkcs1_v1_5(m, key, bt);\n  } else {\n    eb = forge.util.createBuffer();\n    eb.putBytes(m);\n  }\n\n  // load encryption block as big integer 'x'\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var x = new BigInteger(eb.toHex(), 16);\n\n  // do RSA encryption\n  var y = _modPow(x, key, pub);\n\n  // convert y into the encrypted data byte string, if y is shorter in\n  // bytes than k, then prepend zero bytes to fill up ed\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var yhex = y.toString(16);\n  var ed = forge.util.createBuffer();\n  var zeros = k - Math.ceil(yhex.length / 2);\n  while(zeros > 0) {\n    ed.putByte(0x00);\n    --zeros;\n  }\n  ed.putBytes(forge.util.hexToBytes(yhex));\n  return ed.getBytes();\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or\n * 'verify' on a public key object instead.\n *\n * Performs RSA decryption.\n *\n * The parameter ml controls whether to apply PKCS#1 v1.5 padding\n * or not.  Set ml = false to disable padding removal completely\n * (in order to handle e.g. EMSA-PSS later on) and simply pass back\n * the RSA encryption block.\n *\n * @param ed the encrypted data to decrypt in as a byte string.\n * @param key the RSA key to use.\n * @param pub true for a public key operation, false for private.\n * @param ml the message length, if known, false to disable padding.\n *\n * @return the decrypted message as a byte string.\n */\npki.rsa.decrypt = function(ed, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  // error if the length of the encrypted data ED is not k\n  if(ed.length !== k) {\n    var error = new Error('Encrypted message length is invalid.');\n    error.length = ed.length;\n    error.expected = k;\n    throw error;\n  }\n\n  // convert encrypted data into a big integer\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);\n\n  // y must be less than the modulus or it wasn't the result of\n  // a previous mod operation (encryption) using that modulus\n  if(y.compareTo(key.n) >= 0) {\n    throw new Error('Encrypted message is invalid.');\n  }\n\n  // do RSA decryption\n  var x = _modPow(y, key, pub);\n\n  // create the encryption block, if x is shorter in bytes than k, then\n  // prepend zero bytes to fill up eb\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var xhex = x.toString(16);\n  var eb = forge.util.createBuffer();\n  var zeros = k - Math.ceil(xhex.length / 2);\n  while(zeros > 0) {\n    eb.putByte(0x00);\n    --zeros;\n  }\n  eb.putBytes(forge.util.hexToBytes(xhex));\n\n  if(ml !== false) {\n    // legacy, default to PKCS#1 v1.5 padding\n    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);\n  }\n\n  // return message\n  return eb.getBytes();\n};\n\n/**\n * Creates an RSA key-pair generation state object. It is used to allow\n * key-generation to be performed in steps. It also allows for a UI to\n * display progress updates.\n *\n * @param bits the size for the private key in bits, defaults to 2048.\n * @param e the public exponent to use, defaults to 65537 (0x10001).\n * @param [options] the options to use.\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n *\n * @return the state object to use to generate the key-pair.\n */\npki.rsa.createKeyPairGenerationState = function(bits, e, options) {\n  // TODO: migrate step-based prime generation code to forge.prime\n\n  // set default bits\n  if(typeof(bits) === 'string') {\n    bits = parseInt(bits, 10);\n  }\n  bits = bits || 2048;\n\n  // create prng with api that matches BigInteger secure random\n  options = options || {};\n  var prng = options.prng || forge.random;\n  var rng = {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      var b = prng.getBytesSync(x.length);\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = b.charCodeAt(i);\n      }\n    }\n  };\n\n  var algorithm = options.algorithm || 'PRIMEINC';\n\n  // create PRIMEINC algorithm state\n  var rval;\n  if(algorithm === 'PRIMEINC') {\n    rval = {\n      algorithm: algorithm,\n      state: 0,\n      bits: bits,\n      rng: rng,\n      eInt: e || 65537,\n      e: new BigInteger(null),\n      p: null,\n      q: null,\n      qBits: bits >> 1,\n      pBits: bits - (bits >> 1),\n      pqState: 0,\n      num: null,\n      keys: null\n    };\n    rval.e.fromInt(rval.eInt);\n  } else {\n    throw new Error('Invalid key generation algorithm: ' + algorithm);\n  }\n\n  return rval;\n};\n\n/**\n * Attempts to runs the key-generation algorithm for at most n seconds\n * (approximately) using the given state. When key-generation has completed,\n * the keys will be stored in state.keys.\n *\n * To use this function to update a UI while generating a key or to prevent\n * causing browser lockups/warnings, set \"n\" to a value other than 0. A\n * simple pattern for generating a key and showing a progress indicator is:\n *\n * var state = pki.rsa.createKeyPairGenerationState(2048);\n * var step = function() {\n *   // step key-generation, run algorithm for 100 ms, repeat\n *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {\n *     setTimeout(step, 1);\n *   } else {\n *     // key-generation complete\n *     // TODO: turn off progress indicator here\n *     // TODO: use the generated key-pair in \"state.keys\"\n *   }\n * };\n * // TODO: turn on progress indicator here\n * setTimeout(step, 0);\n *\n * @param state the state to use.\n * @param n the maximum number of milliseconds to run the algorithm for, 0\n *          to run the algorithm to completion.\n *\n * @return true if the key-generation completed, false if not.\n */\npki.rsa.stepKeyPairGenerationState = function(state, n) {\n  // set default algorithm if not set\n  if(!('algorithm' in state)) {\n    state.algorithm = 'PRIMEINC';\n  }\n\n  // TODO: migrate step-based prime generation code to forge.prime\n  // TODO: abstract as PRIMEINC algorithm\n\n  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)\n  // with some minor optimizations and designed to run in steps\n\n  // local state vars\n  var THIRTY = new BigInteger(null);\n  THIRTY.fromInt(30);\n  var deltaIdx = 0;\n  var op_or = function(x, y) {return x | y;};\n\n  // keep stepping until time limit is reached or done\n  var t1 = +new Date();\n  var t2;\n  var total = 0;\n  while(state.keys === null && (n <= 0 || total < n)) {\n    // generate p or q\n    if(state.state === 0) {\n      /* Note: All primes are of the form:\n\n        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i\n\n        When we generate a random number, we always align it at 30k + 1. Each\n        time the number is determined not to be prime we add to get to the\n        next 'i', eg: if the number was at 30k + 1 we add 6. */\n      var bits = (state.p === null) ? state.pBits : state.qBits;\n      var bits1 = bits - 1;\n\n      // get a random number\n      if(state.pqState === 0) {\n        state.num = new BigInteger(bits, state.rng);\n        // force MSB set\n        if(!state.num.testBit(bits1)) {\n          state.num.bitwiseTo(\n            BigInteger.ONE.shiftLeft(bits1), op_or, state.num);\n        }\n        // align number on 30k+1 boundary\n        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);\n        deltaIdx = 0;\n\n        ++state.pqState;\n      } else if(state.pqState === 1) {\n        // try to make the number a prime\n        if(state.num.bitLength() > bits) {\n          // overflow, try again\n          state.pqState = 0;\n          // do primality test\n        } else if(state.num.isProbablePrime(\n          _getMillerRabinTests(state.num.bitLength()))) {\n          ++state.pqState;\n        } else {\n          // get next potential prime\n          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n        }\n      } else if(state.pqState === 2) {\n        // ensure number is coprime with e\n        state.pqState =\n          (state.num.subtract(BigInteger.ONE).gcd(state.e)\n            .compareTo(BigInteger.ONE) === 0) ? 3 : 0;\n      } else if(state.pqState === 3) {\n        // store p or q\n        state.pqState = 0;\n        if(state.p === null) {\n          state.p = state.num;\n        } else {\n          state.q = state.num;\n        }\n\n        // advance state if both p and q are ready\n        if(state.p !== null && state.q !== null) {\n          ++state.state;\n        }\n        state.num = null;\n      }\n    } else if(state.state === 1) {\n      // ensure p is larger than q (swap them if not)\n      if(state.p.compareTo(state.q) < 0) {\n        state.num = state.p;\n        state.p = state.q;\n        state.q = state.num;\n      }\n      ++state.state;\n    } else if(state.state === 2) {\n      // compute phi: (p - 1)(q - 1) (Euler's totient function)\n      state.p1 = state.p.subtract(BigInteger.ONE);\n      state.q1 = state.q.subtract(BigInteger.ONE);\n      state.phi = state.p1.multiply(state.q1);\n      ++state.state;\n    } else if(state.state === 3) {\n      // ensure e and phi are coprime\n      if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {\n        // phi and e are coprime, advance\n        ++state.state;\n      } else {\n        // phi and e aren't coprime, so generate a new p and q\n        state.p = null;\n        state.q = null;\n        state.state = 0;\n      }\n    } else if(state.state === 4) {\n      // create n, ensure n is has the right number of bits\n      state.n = state.p.multiply(state.q);\n\n      // ensure n is right number of bits\n      if(state.n.bitLength() === state.bits) {\n        // success, advance\n        ++state.state;\n      } else {\n        // failed, get new q\n        state.q = null;\n        state.state = 0;\n      }\n    } else if(state.state === 5) {\n      // set keys\n      var d = state.e.modInverse(state.phi);\n      state.keys = {\n        privateKey: pki.rsa.setPrivateKey(\n          state.n, state.e, d, state.p, state.q,\n          d.mod(state.p1), d.mod(state.q1),\n          state.q.modInverse(state.p)),\n        publicKey: pki.rsa.setPublicKey(state.n, state.e)\n      };\n    }\n\n    // update timing\n    t2 = +new Date();\n    total += t2 - t1;\n    t1 = t2;\n  }\n\n  return state.keys !== null;\n};\n\n/**\n * Generates an RSA public-private key pair in a single call.\n *\n * To generate a key-pair in steps (to allow for progress updates and to\n * prevent blocking or warnings in slow browsers) then use the key-pair\n * generation state functions.\n *\n * To generate a key-pair asynchronously (either through web-workers, if\n * available, or by breaking up the work on the main thread), pass a\n * callback function.\n *\n * @param [bits] the size for the private key in bits, defaults to 2048.\n * @param [e] the public exponent to use, defaults to 65537.\n * @param [options] options for key-pair generation, if given then 'bits'\n *            and 'e' must *not* be given:\n *          bits the size for the private key in bits, (default: 2048).\n *          e the public exponent to use, (default: 65537 (0x10001)).\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\". Disables use of native APIs.\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n * @param [callback(err, keypair)] called once the operation completes.\n *\n * @return an object with privateKey and publicKey properties.\n */\npki.rsa.generateKeyPair = function(bits, e, options, callback) {\n  // (bits), (options), (callback)\n  if(arguments.length === 1) {\n    if(typeof bits === 'object') {\n      options = bits;\n      bits = undefined;\n    } else if(typeof bits === 'function') {\n      callback = bits;\n      bits = undefined;\n    }\n  } else if(arguments.length === 2) {\n    // (bits, e), (bits, options), (bits, callback), (options, callback)\n    if(typeof bits === 'number') {\n      if(typeof e === 'function') {\n        callback = e;\n        e = undefined;\n      } else if(typeof e !== 'number') {\n        options = e;\n        e = undefined;\n      }\n    } else {\n      options = bits;\n      callback = e;\n      bits = undefined;\n      e = undefined;\n    }\n  } else if(arguments.length === 3) {\n    // (bits, e, options), (bits, e, callback), (bits, options, callback)\n    if(typeof e === 'number') {\n      if(typeof options === 'function') {\n        callback = options;\n        options = undefined;\n      }\n    } else {\n      callback = options;\n      options = e;\n      e = undefined;\n    }\n  }\n  options = options || {};\n  if(bits === undefined) {\n    bits = options.bits || 2048;\n  }\n  if(e === undefined) {\n    e = options.e || 0x10001;\n  }\n\n  // use native code if permitted, available, and parameters are acceptable\n  if(!forge.options.usePureJavaScript && !options.prng &&\n    bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {\n    if(callback) {\n      // try native async\n      if(_detectNodeCrypto('generateKeyPair')) {\n        return _crypto.generateKeyPair('rsa', {\n          modulusLength: bits,\n          publicExponent: e,\n          publicKeyEncoding: {\n            type: 'spki',\n            format: 'pem'\n          },\n          privateKeyEncoding: {\n            type: 'pkcs8',\n            format: 'pem'\n          }\n        }, function(err, pub, priv) {\n          if(err) {\n            return callback(err);\n          }\n          callback(null, {\n            privateKey: pki.privateKeyFromPem(priv),\n            publicKey: pki.publicKeyFromPem(pub)\n          });\n        });\n      }\n      if(_detectSubtleCrypto('generateKey') &&\n        _detectSubtleCrypto('exportKey')) {\n        // use standard native generateKey\n        return util.globalScope.crypto.subtle.generateKey({\n          name: 'RSASSA-PKCS1-v1_5',\n          modulusLength: bits,\n          publicExponent: _intToUint8Array(e),\n          hash: {name: 'SHA-256'}\n        }, true /* key can be exported*/, ['sign', 'verify'])\n        .then(function(pair) {\n          return util.globalScope.crypto.subtle.exportKey(\n            'pkcs8', pair.privateKey);\n        // avoiding catch(function(err) {...}) to support IE <= 8\n        }).then(undefined, function(err) {\n          callback(err);\n        }).then(function(pkcs8) {\n          if(pkcs8) {\n            var privateKey = pki.privateKeyFromAsn1(\n              asn1.fromDer(forge.util.createBuffer(pkcs8)));\n            callback(null, {\n              privateKey: privateKey,\n              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n            });\n          }\n        });\n      }\n      if(_detectSubtleMsCrypto('generateKey') &&\n        _detectSubtleMsCrypto('exportKey')) {\n        var genOp = util.globalScope.msCrypto.subtle.generateKey({\n          name: 'RSASSA-PKCS1-v1_5',\n          modulusLength: bits,\n          publicExponent: _intToUint8Array(e),\n          hash: {name: 'SHA-256'}\n        }, true /* key can be exported*/, ['sign', 'verify']);\n        genOp.oncomplete = function(e) {\n          var pair = e.target.result;\n          var exportOp = util.globalScope.msCrypto.subtle.exportKey(\n            'pkcs8', pair.privateKey);\n          exportOp.oncomplete = function(e) {\n            var pkcs8 = e.target.result;\n            var privateKey = pki.privateKeyFromAsn1(\n              asn1.fromDer(forge.util.createBuffer(pkcs8)));\n            callback(null, {\n              privateKey: privateKey,\n              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n            });\n          };\n          exportOp.onerror = function(err) {\n            callback(err);\n          };\n        };\n        genOp.onerror = function(err) {\n          callback(err);\n        };\n        return;\n      }\n    } else {\n      // try native sync\n      if(_detectNodeCrypto('generateKeyPairSync')) {\n        var keypair = _crypto.generateKeyPairSync('rsa', {\n          modulusLength: bits,\n          publicExponent: e,\n          publicKeyEncoding: {\n            type: 'spki',\n            format: 'pem'\n          },\n          privateKeyEncoding: {\n            type: 'pkcs8',\n            format: 'pem'\n          }\n        });\n        return {\n          privateKey: pki.privateKeyFromPem(keypair.privateKey),\n          publicKey: pki.publicKeyFromPem(keypair.publicKey)\n        };\n      }\n    }\n  }\n\n  // use JavaScript implementation\n  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);\n  if(!callback) {\n    pki.rsa.stepKeyPairGenerationState(state, 0);\n    return state.keys;\n  }\n  _generateKeyPair(state, options, callback);\n};\n\n/**\n * Sets an RSA public key from BigIntegers modulus and exponent.\n *\n * @param n the modulus.\n * @param e the exponent.\n *\n * @return the public key.\n */\npki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {\n  var key = {\n    n: n,\n    e: e\n  };\n\n  /**\n   * Encrypts the given data with this public key. Newer applications\n   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for\n   * legacy applications.\n   *\n   * @param data the byte string to encrypt.\n   * @param scheme the encryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA encryption,\n   *          an object with an 'encode' property set to a function\n   *          with the signature 'function(data, key)' that returns\n   *          a binary-encoded string representing the encoded data.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the encrypted byte string.\n   */\n  key.encrypt = function(data, scheme, schemeOptions) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n\n    if(scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = {\n        encode: function(m, key, pub) {\n          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();\n        }\n      };\n    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        encode: function(m, key) {\n          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);\n        }\n      };\n    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = {encode: function(e) {return e;}};\n    } else if(typeof scheme === 'string') {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // do scheme-based encoding then rsa encryption\n    var e = scheme.encode(data, key, true);\n    return pki.rsa.encrypt(e, key, true);\n  };\n\n  /**\n   * Verifies the given signature against the given digest.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the\n   * signature is an OCTET STRING that holds a DigestInfo.\n   *\n   * DigestInfo ::= SEQUENCE {\n   *   digestAlgorithm DigestAlgorithmIdentifier,\n   *   digest Digest\n   * }\n   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n   * Digest ::= OCTET STRING\n   *\n   * To perform PSS signature verification, provide an instance\n   * of Forge PSS object as the scheme parameter.\n   *\n   * @param digest the message digest hash to compare against the signature,\n   *          as a binary-encoded string.\n   * @param signature the signature to verify, as a binary-encoded string.\n   * @param scheme signature verification scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be expected, but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return true if the signature was verified, false if not.\n   */\n  key.verify = function(digest, signature, scheme) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSASSA-PKCS1-V1_5';\n    }\n\n    if(scheme === 'RSASSA-PKCS1-V1_5') {\n      scheme = {\n        verify: function(digest, d) {\n          // remove padding\n          d = _decodePkcs1_v1_5(d, key, true);\n          // d is ASN.1 BER-encoded DigestInfo\n          var obj = asn1.fromDer(d);\n          // compare the given digest to the decrypted one\n          return digest === obj.value[1].value;\n        }\n      };\n    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n      scheme = {\n        verify: function(digest, d) {\n          // remove padding\n          d = _decodePkcs1_v1_5(d, key, true);\n          return digest === d;\n        }\n      };\n    }\n\n    // do rsa decryption w/o any decoding, then verify -- which does decoding\n    var d = pki.rsa.decrypt(signature, key, true, false);\n    return scheme.verify(digest, d, key.n.bitLength());\n  };\n\n  return key;\n};\n\n/**\n * Sets an RSA private key from BigIntegers modulus, exponent, primes,\n * prime exponents, and modular multiplicative inverse.\n *\n * @param n the modulus.\n * @param e the public exponent.\n * @param d the private exponent ((inverse of e) mod n).\n * @param p the first prime.\n * @param q the second prime.\n * @param dP exponent1 (d mod (p-1)).\n * @param dQ exponent2 (d mod (q-1)).\n * @param qInv ((inverse of q) mod p)\n *\n * @return the private key.\n */\npki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(\n  n, e, d, p, q, dP, dQ, qInv) {\n  var key = {\n    n: n,\n    e: e,\n    d: d,\n    p: p,\n    q: q,\n    dP: dP,\n    dQ: dQ,\n    qInv: qInv\n  };\n\n  /**\n   * Decrypts the given data with this private key. The decryption scheme\n   * must match the one used to encrypt the data.\n   *\n   * @param data the byte string to decrypt.\n   * @param scheme the decryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA decryption.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the decrypted byte string.\n   */\n  key.decrypt = function(data, scheme, schemeOptions) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n\n    // do rsa decryption w/o any decoding\n    var d = pki.rsa.decrypt(data, key, false, false);\n\n    if(scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = {decode: _decodePkcs1_v1_5};\n    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        decode: function(d, key) {\n          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);\n        }\n      };\n    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = {decode: function(d) {return d;}};\n    } else {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // decode according to scheme\n    return scheme.decode(d, key, false);\n  };\n\n  /**\n   * Signs the given digest, producing a signature.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide\n   * an instance of Forge PSS object as the scheme parameter.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param scheme the signature scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be used but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return the signature as a byte string.\n   */\n  key.sign = function(md, scheme) {\n    /* Note: The internal implementation of RSA operations is being\n      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy\n      code like the use of an encoding block identifier 'bt' will eventually\n      be removed. */\n\n    // private key operation\n    var bt = false;\n\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    }\n\n    if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {\n      scheme = {encode: emsaPkcs1v15encode};\n      bt = 0x01;\n    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n      scheme = {encode: function() {return md;}};\n      bt = 0x01;\n    }\n\n    // encode and then encrypt\n    var d = scheme.encode(md, key.n.bitLength());\n    return pki.rsa.encrypt(d, key, bt);\n  };\n\n  return key;\n};\n\n/**\n * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.\n *\n * @param rsaKey the ASN.1 RSAPrivateKey.\n *\n * @return the ASN.1 PrivateKeyInfo.\n */\npki.wrapRsaPrivateKey = function(rsaKey) {\n  // PrivateKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (0)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(0).getBytes()),\n    // privateKeyAlgorithm\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ]),\n    // PrivateKey\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n      asn1.toDer(rsaKey).getBytes())\n  ]);\n};\n\n/**\n * Converts a private key from an ASN.1 object.\n *\n * @param obj the ASN.1 representation of a PrivateKeyInfo containing an\n *          RSAPrivateKey or an RSAPrivateKey.\n *\n * @return the private key.\n */\npki.privateKeyFromAsn1 = function(obj) {\n  // get PrivateKeyInfo\n  var capture = {};\n  var errors = [];\n  if(asn1.validate(obj, privateKeyValidator, capture, errors)) {\n    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));\n  }\n\n  // get RSAPrivateKey\n  capture = {};\n  errors = [];\n  if(!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read private key. ' +\n      'ASN.1 object does not contain an RSAPrivateKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // Note: Version is currently ignored.\n  // capture.privateKeyVersion\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n, e, d, p, q, dP, dQ, qInv;\n  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();\n  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();\n  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();\n  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();\n  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();\n  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();\n  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();\n  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();\n\n  // set private key\n  return pki.setRsaPrivateKey(\n    new BigInteger(n, 16),\n    new BigInteger(e, 16),\n    new BigInteger(d, 16),\n    new BigInteger(p, 16),\n    new BigInteger(q, 16),\n    new BigInteger(dP, 16),\n    new BigInteger(dQ, 16),\n    new BigInteger(qInv, 16));\n};\n\n/**\n * Converts a private key to an ASN.1 RSAPrivateKey.\n *\n * @param key the private key.\n *\n * @return the ASN.1 representation of an RSAPrivateKey.\n */\npki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {\n  // RSAPrivateKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (0 = only 2 primes, 1 multiple primes)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(0).getBytes()),\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e)),\n    // privateExponent (d)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.d)),\n    // privateKeyPrime1 (p)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.p)),\n    // privateKeyPrime2 (q)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.q)),\n    // privateKeyExponent1 (dP)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dP)),\n    // privateKeyExponent2 (dQ)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dQ)),\n    // coefficient (qInv)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.qInv))\n  ]);\n};\n\n/**\n * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @return the public key.\n */\npki.publicKeyFromAsn1 = function(obj) {\n  // get SubjectPublicKeyInfo\n  var capture = {};\n  var errors = [];\n  if(asn1.validate(obj, publicKeyValidator, capture, errors)) {\n    // get oid\n    var oid = asn1.derToOid(capture.publicKeyOid);\n    if(oid !== pki.oids.rsaEncryption) {\n      var error = new Error('Cannot read public key. Unknown OID.');\n      error.oid = oid;\n      throw error;\n    }\n    obj = capture.rsaPublicKey;\n  }\n\n  // get RSA params\n  errors = [];\n  if(!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read public key. ' +\n      'ASN.1 object does not contain an RSAPublicKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();\n  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();\n\n  // set public key\n  return pki.setRsaPublicKey(\n    new BigInteger(n, 16),\n    new BigInteger(e, 16));\n};\n\n/**\n * Converts a public key to an ASN.1 SubjectPublicKeyInfo.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a SubjectPublicKeyInfo.\n */\npki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {\n  // SubjectPublicKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // AlgorithmIdentifier\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n      // parameters (null)\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ]),\n    // subjectPublicKey\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [\n      pki.publicKeyToRSAPublicKey(key)\n    ])\n  ]);\n};\n\n/**\n * Converts a public key to an ASN.1 RSAPublicKey.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a RSAPublicKey.\n */\npki.publicKeyToRSAPublicKey = function(key) {\n  // RSAPublicKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e))\n  ]);\n};\n\n/**\n * Encodes a message using PKCS#1 v1.5 padding.\n *\n * @param m the message to encode.\n * @param key the RSA key to use.\n * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02\n *          (for encryption).\n *\n * @return the padded byte buffer.\n */\nfunction _encodePkcs1_v1_5(m, key, bt) {\n  var eb = forge.util.createBuffer();\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* use PKCS#1 v1.5 padding */\n  if(m.length > (k - 11)) {\n    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');\n    error.length = m.length;\n    error.max = k - 11;\n    throw error;\n  }\n\n  /* A block type BT, a padding string PS, and the data D shall be\n    formatted into an octet string EB, the encryption block:\n\n    EB = 00 || BT || PS || 00 || D\n\n    The block type BT shall be a single octet indicating the structure of\n    the encryption block. For this version of the document it shall have\n    value 00, 01, or 02. For a private-key operation, the block type\n    shall be 00 or 01. For a public-key operation, it shall be 02.\n\n    The padding string PS shall consist of k-3-||D|| octets. For block\n    type 00, the octets shall have value 00; for block type 01, they\n    shall have value FF; and for block type 02, they shall be\n    pseudorandomly generated and nonzero. This makes the length of the\n    encryption block EB equal to k. */\n\n  // build the encryption block\n  eb.putByte(0x00);\n  eb.putByte(bt);\n\n  // create the padding\n  var padNum = k - 3 - m.length;\n  var padByte;\n  // private key op\n  if(bt === 0x00 || bt === 0x01) {\n    padByte = (bt === 0x00) ? 0x00 : 0xFF;\n    for(var i = 0; i < padNum; ++i) {\n      eb.putByte(padByte);\n    }\n  } else {\n    // public key op\n    // pad with random non-zero values\n    while(padNum > 0) {\n      var numZeros = 0;\n      var padBytes = forge.random.getBytes(padNum);\n      for(var i = 0; i < padNum; ++i) {\n        padByte = padBytes.charCodeAt(i);\n        if(padByte === 0) {\n          ++numZeros;\n        } else {\n          eb.putByte(padByte);\n        }\n      }\n      padNum = numZeros;\n    }\n  }\n\n  // zero followed by message\n  eb.putByte(0x00);\n  eb.putBytes(m);\n\n  return eb;\n}\n\n/**\n * Decodes a message using PKCS#1 v1.5 padding.\n *\n * @param em the message to decode.\n * @param key the RSA key to use.\n * @param pub true if the key is a public key, false if it is private.\n * @param ml the message length, if specified.\n *\n * @return the decoded bytes.\n */\nfunction _decodePkcs1_v1_5(em, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* It is an error if any of the following conditions occurs:\n\n    1. The encryption block EB cannot be parsed unambiguously.\n    2. The padding string PS consists of fewer than eight octets\n      or is inconsisent with the block type BT.\n    3. The decryption process is a public-key operation and the block\n      type BT is not 00 or 01, or the decryption process is a\n      private-key operation and the block type is not 02.\n   */\n\n  // parse the encryption block\n  var eb = forge.util.createBuffer(em);\n  var first = eb.getByte();\n  var bt = eb.getByte();\n  if(first !== 0x00 ||\n    (pub && bt !== 0x00 && bt !== 0x01) ||\n    (!pub && bt != 0x02) ||\n    (pub && bt === 0x00 && typeof(ml) === 'undefined')) {\n    throw new Error('Encryption block is invalid.');\n  }\n\n  var padNum = 0;\n  if(bt === 0x00) {\n    // check all padding bytes for 0x00\n    padNum = k - 3 - ml;\n    for(var i = 0; i < padNum; ++i) {\n      if(eb.getByte() !== 0x00) {\n        throw new Error('Encryption block is invalid.');\n      }\n    }\n  } else if(bt === 0x01) {\n    // find the first byte that isn't 0xFF, should be after all padding\n    padNum = 0;\n    while(eb.length() > 1) {\n      if(eb.getByte() !== 0xFF) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  } else if(bt === 0x02) {\n    // look for 0x00 byte\n    padNum = 0;\n    while(eb.length() > 1) {\n      if(eb.getByte() === 0x00) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  }\n\n  // zero must be 0x00 and padNum must be (k - 3 - message length)\n  var zero = eb.getByte();\n  if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {\n    throw new Error('Encryption block is invalid.');\n  }\n\n  return eb.getBytes();\n}\n\n/**\n * Runs the key-generation algorithm asynchronously, either in the background\n * via Web Workers, or using the main thread and setImmediate.\n *\n * @param state the key-pair generation state.\n * @param [options] options for key-pair generation:\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2, -1 to use estimated cores minus one).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n * @param callback(err, keypair) called once the operation completes.\n */\nfunction _generateKeyPair(state, options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  var opts = {\n    algorithm: {\n      name: options.algorithm || 'PRIMEINC',\n      options: {\n        workers: options.workers || 2,\n        workLoad: options.workLoad || 100,\n        workerScript: options.workerScript\n      }\n    }\n  };\n  if('prng' in options) {\n    opts.prng = options.prng;\n  }\n\n  generate();\n\n  function generate() {\n    // find p and then q (done in series to simplify)\n    getPrime(state.pBits, function(err, num) {\n      if(err) {\n        return callback(err);\n      }\n      state.p = num;\n      if(state.q !== null) {\n        return finish(err, state.q);\n      }\n      getPrime(state.qBits, finish);\n    });\n  }\n\n  function getPrime(bits, callback) {\n    forge.prime.generateProbablePrime(bits, opts, callback);\n  }\n\n  function finish(err, num) {\n    if(err) {\n      return callback(err);\n    }\n\n    // set q\n    state.q = num;\n\n    // ensure p is larger than q (swap them if not)\n    if(state.p.compareTo(state.q) < 0) {\n      var tmp = state.p;\n      state.p = state.q;\n      state.q = tmp;\n    }\n\n    // ensure p is coprime with e\n    if(state.p.subtract(BigInteger.ONE).gcd(state.e)\n      .compareTo(BigInteger.ONE) !== 0) {\n      state.p = null;\n      generate();\n      return;\n    }\n\n    // ensure q is coprime with e\n    if(state.q.subtract(BigInteger.ONE).gcd(state.e)\n      .compareTo(BigInteger.ONE) !== 0) {\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // compute phi: (p - 1)(q - 1) (Euler's totient function)\n    state.p1 = state.p.subtract(BigInteger.ONE);\n    state.q1 = state.q.subtract(BigInteger.ONE);\n    state.phi = state.p1.multiply(state.q1);\n\n    // ensure e and phi are coprime\n    if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n      // phi and e aren't coprime, so generate a new p and q\n      state.p = state.q = null;\n      generate();\n      return;\n    }\n\n    // create n, ensure n is has the right number of bits\n    state.n = state.p.multiply(state.q);\n    if(state.n.bitLength() !== state.bits) {\n      // failed, get new q\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // set keys\n    var d = state.e.modInverse(state.phi);\n    state.keys = {\n      privateKey: pki.rsa.setPrivateKey(\n        state.n, state.e, d, state.p, state.q,\n        d.mod(state.p1), d.mod(state.q1),\n        state.q.modInverse(state.p)),\n      publicKey: pki.rsa.setPublicKey(state.n, state.e)\n    };\n\n    callback(null, state.keys);\n  }\n}\n\n/**\n * Converts a positive BigInteger into 2's-complement big-endian bytes.\n *\n * @param b the big integer to convert.\n *\n * @return the bytes.\n */\nfunction _bnToBytes(b) {\n  // prepend 0x00 if first byte >= 0x80\n  var hex = b.toString(16);\n  if(hex[0] >= '8') {\n    hex = '00' + hex;\n  }\n  var bytes = forge.util.hexToBytes(hex);\n\n  // ensure integer is minimally-encoded\n  if(bytes.length > 1 &&\n    // leading 0x00 for positive integer\n    ((bytes.charCodeAt(0) === 0 &&\n    (bytes.charCodeAt(1) & 0x80) === 0) ||\n    // leading 0xFF for negative integer\n    (bytes.charCodeAt(0) === 0xFF &&\n    (bytes.charCodeAt(1) & 0x80) === 0x80))) {\n    return bytes.substr(1);\n  }\n  return bytes;\n}\n\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\nfunction _getMillerRabinTests(bits) {\n  if(bits <= 100) return 27;\n  if(bits <= 150) return 18;\n  if(bits <= 200) return 15;\n  if(bits <= 250) return 12;\n  if(bits <= 300) return 9;\n  if(bits <= 350) return 8;\n  if(bits <= 400) return 7;\n  if(bits <= 500) return 6;\n  if(bits <= 600) return 5;\n  if(bits <= 800) return 4;\n  if(bits <= 1250) return 3;\n  return 2;\n}\n\n/**\n * Performs feature detection on the Node crypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectNodeCrypto(fn) {\n  return forge.util.isNodejs && typeof _crypto[fn] === 'function';\n}\n\n/**\n * Performs feature detection on the SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleCrypto(fn) {\n  return (typeof util.globalScope !== 'undefined' &&\n    typeof util.globalScope.crypto === 'object' &&\n    typeof util.globalScope.crypto.subtle === 'object' &&\n    typeof util.globalScope.crypto.subtle[fn] === 'function');\n}\n\n/**\n * Performs feature detection on the deprecated Microsoft Internet Explorer\n * outdated SubtleCrypto interface. This function should only be used after\n * checking for the modern, standard SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleMsCrypto(fn) {\n  return (typeof util.globalScope !== 'undefined' &&\n    typeof util.globalScope.msCrypto === 'object' &&\n    typeof util.globalScope.msCrypto.subtle === 'object' &&\n    typeof util.globalScope.msCrypto.subtle[fn] === 'function');\n}\n\nfunction _intToUint8Array(x) {\n  var bytes = forge.util.hexToBytes(x.toString(16));\n  var buffer = new Uint8Array(bytes.length);\n  for(var i = 0; i < bytes.length; ++i) {\n    buffer[i] = bytes.charCodeAt(i);\n  }\n  return buffer;\n}\n\nfunction _privateKeyFromJwk(jwk) {\n  if(jwk.kty !== 'RSA') {\n    throw new Error(\n      'Unsupported key algorithm \"' + jwk.kty + '\"; algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPrivateKey(\n    _base64ToBigInt(jwk.n),\n    _base64ToBigInt(jwk.e),\n    _base64ToBigInt(jwk.d),\n    _base64ToBigInt(jwk.p),\n    _base64ToBigInt(jwk.q),\n    _base64ToBigInt(jwk.dp),\n    _base64ToBigInt(jwk.dq),\n    _base64ToBigInt(jwk.qi));\n}\n\nfunction _publicKeyFromJwk(jwk) {\n  if(jwk.kty !== 'RSA') {\n    throw new Error('Key algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPublicKey(\n    _base64ToBigInt(jwk.n),\n    _base64ToBigInt(jwk.e));\n}\n\nfunction _base64ToBigInt(b64) {\n  return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);\n}\n","/**\n * Javascript implementation of PKCS#7 v1.5.\n *\n * @author Stefan Siegl\n * @author Dave Longley\n *\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n * Copyright (c) 2012-2015 Digital Bazaar, Inc.\n *\n * Currently this implementation only supports ContentType of EnvelopedData,\n * EncryptedData, or SignedData at the root level. The top level elements may\n * contain only a ContentInfo of ContentType Data, i.e. plain data. Further\n * nesting is not (yet) supported.\n *\n * The Forge validators for PKCS #7's ASN.1 structures are available from\n * a separate file pkcs7asn1.js, since those are referenced from other\n * PKCS standards like PKCS #12.\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./oids');\nrequire('./pem');\nrequire('./pkcs7asn1');\nrequire('./random');\nrequire('./util');\nrequire('./x509');\n\n// shortcut for ASN.1 API\nvar asn1 = forge.asn1;\n\n// shortcut for PKCS#7 API\nvar p7 = module.exports = forge.pkcs7 = forge.pkcs7 || {};\n\n/**\n * Converts a PKCS#7 message from PEM format.\n *\n * @param pem the PEM-formatted PKCS#7 message.\n *\n * @return the PKCS#7 message.\n */\np7.messageFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'PKCS7') {\n    var error = new Error('Could not convert PKCS#7 message from PEM; PEM ' +\n      'header type is not \"PKCS#7\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert PKCS#7 message from PEM; PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  var obj = asn1.fromDer(msg.body);\n\n  return p7.messageFromAsn1(obj);\n};\n\n/**\n * Converts a PKCS#7 message to PEM format.\n *\n * @param msg The PKCS#7 message object\n * @param maxline The maximum characters per line, defaults to 64.\n *\n * @return The PEM-formatted PKCS#7 message.\n */\np7.messageToPem = function(msg, maxline) {\n  // convert to ASN.1, then DER, then PEM-encode\n  var pemObj = {\n    type: 'PKCS7',\n    body: asn1.toDer(msg.toAsn1()).getBytes()\n  };\n  return forge.pem.encode(pemObj, {maxline: maxline});\n};\n\n/**\n * Converts a PKCS#7 message from an ASN.1 object.\n *\n * @param obj the ASN.1 representation of a ContentInfo.\n *\n * @return the PKCS#7 message.\n */\np7.messageFromAsn1 = function(obj) {\n  // validate root level ContentInfo and capture data\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)) {\n    var error = new Error('Cannot read PKCS#7 message. ' +\n      'ASN.1 object is not an PKCS#7 ContentInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var contentType = asn1.derToOid(capture.contentType);\n  var msg;\n\n  switch(contentType) {\n    case forge.pki.oids.envelopedData:\n      msg = p7.createEnvelopedData();\n      break;\n\n    case forge.pki.oids.encryptedData:\n      msg = p7.createEncryptedData();\n      break;\n\n    case forge.pki.oids.signedData:\n      msg = p7.createSignedData();\n      break;\n\n    default:\n      throw new Error('Cannot read PKCS#7 message. ContentType with OID ' +\n        contentType + ' is not (yet) supported.');\n  }\n\n  msg.fromAsn1(capture.content.value[0]);\n  return msg;\n};\n\np7.createSignedData = function() {\n  var msg = null;\n  msg = {\n    type: forge.pki.oids.signedData,\n    version: 1,\n    certificates: [],\n    crls: [],\n    // TODO: add json-formatted signer stuff here?\n    signers: [],\n    // populated during sign()\n    digestAlgorithmIdentifiers: [],\n    contentInfo: null,\n    signerInfos: [],\n\n    fromAsn1: function(obj) {\n      // validate SignedData content block and capture data.\n      _fromAsn1(msg, obj, p7.asn1.signedDataValidator);\n      msg.certificates = [];\n      msg.crls = [];\n      msg.digestAlgorithmIdentifiers = [];\n      msg.contentInfo = null;\n      msg.signerInfos = [];\n\n      if(msg.rawCapture.certificates) {\n        var certs = msg.rawCapture.certificates.value;\n        for(var i = 0; i < certs.length; ++i) {\n          msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));\n        }\n      }\n\n      // TODO: parse crls\n    },\n\n    toAsn1: function() {\n      // degenerate case with no content\n      if(!msg.contentInfo) {\n        msg.sign();\n      }\n\n      var certs = [];\n      for(var i = 0; i < msg.certificates.length; ++i) {\n        certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));\n      }\n\n      var crls = [];\n      // TODO: implement CRLs\n\n      // [0] SignedData\n      var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // Version\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n            asn1.integerToDer(msg.version).getBytes()),\n          // DigestAlgorithmIdentifiers\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.SET, true,\n            msg.digestAlgorithmIdentifiers),\n          // ContentInfo\n          msg.contentInfo\n        ])\n      ]);\n      if(certs.length > 0) {\n        // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL\n        signedData.value[0].value.push(\n          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs));\n      }\n      if(crls.length > 0) {\n        // [1] IMPLICIT CertificateRevocationLists OPTIONAL\n        signedData.value[0].value.push(\n          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls));\n      }\n      // SignerInfos\n      signedData.value[0].value.push(\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,\n          msg.signerInfos));\n\n      // ContentInfo\n      return asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // ContentType\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(msg.type).getBytes()),\n          // [0] SignedData\n          signedData\n        ]);\n    },\n\n    /**\n     * Add (another) entity to list of signers.\n     *\n     * Note: If authenticatedAttributes are provided, then, per RFC 2315,\n     * they must include at least two attributes: content type and\n     * message digest. The message digest attribute value will be\n     * auto-calculated during signing and will be ignored if provided.\n     *\n     * Here's an example of providing these two attributes:\n     *\n     * forge.pkcs7.createSignedData();\n     * p7.addSigner({\n     *   issuer: cert.issuer.attributes,\n     *   serialNumber: cert.serialNumber,\n     *   key: privateKey,\n     *   digestAlgorithm: forge.pki.oids.sha1,\n     *   authenticatedAttributes: [{\n     *     type: forge.pki.oids.contentType,\n     *     value: forge.pki.oids.data\n     *   }, {\n     *     type: forge.pki.oids.messageDigest\n     *   }]\n     * });\n     *\n     * TODO: Support [subjectKeyIdentifier] as signer's ID.\n     *\n     * @param signer the signer information:\n     *          key the signer's private key.\n     *          [certificate] a certificate containing the public key\n     *            associated with the signer's private key; use this option as\n     *            an alternative to specifying signer.issuer and\n     *            signer.serialNumber.\n     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).\n     *          [serialNumber] the signer's certificate's serial number in\n     *           hexadecimal (eg: cert.serialNumber).\n     *          [digestAlgorithm] the message digest OID, as a string, to use\n     *            (eg: forge.pki.oids.sha1).\n     *          [authenticatedAttributes] an optional array of attributes\n     *            to also sign along with the content.\n     */\n    addSigner: function(signer) {\n      var issuer = signer.issuer;\n      var serialNumber = signer.serialNumber;\n      if(signer.certificate) {\n        var cert = signer.certificate;\n        if(typeof cert === 'string') {\n          cert = forge.pki.certificateFromPem(cert);\n        }\n        issuer = cert.issuer.attributes;\n        serialNumber = cert.serialNumber;\n      }\n      var key = signer.key;\n      if(!key) {\n        throw new Error(\n          'Could not add PKCS#7 signer; no private key specified.');\n      }\n      if(typeof key === 'string') {\n        key = forge.pki.privateKeyFromPem(key);\n      }\n\n      // ensure OID known for digest algorithm\n      var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;\n      switch(digestAlgorithm) {\n      case forge.pki.oids.sha1:\n      case forge.pki.oids.sha256:\n      case forge.pki.oids.sha384:\n      case forge.pki.oids.sha512:\n      case forge.pki.oids.md5:\n        break;\n      default:\n        throw new Error(\n          'Could not add PKCS#7 signer; unknown message digest algorithm: ' +\n          digestAlgorithm);\n      }\n\n      // if authenticatedAttributes is present, then the attributes\n      // must contain at least PKCS #9 content-type and message-digest\n      var authenticatedAttributes = signer.authenticatedAttributes || [];\n      if(authenticatedAttributes.length > 0) {\n        var contentType = false;\n        var messageDigest = false;\n        for(var i = 0; i < authenticatedAttributes.length; ++i) {\n          var attr = authenticatedAttributes[i];\n          if(!contentType && attr.type === forge.pki.oids.contentType) {\n            contentType = true;\n            if(messageDigest) {\n              break;\n            }\n            continue;\n          }\n          if(!messageDigest && attr.type === forge.pki.oids.messageDigest) {\n            messageDigest = true;\n            if(contentType) {\n              break;\n            }\n            continue;\n          }\n        }\n\n        if(!contentType || !messageDigest) {\n          throw new Error('Invalid signer.authenticatedAttributes. If ' +\n            'signer.authenticatedAttributes is specified, then it must ' +\n            'contain at least two attributes, PKCS #9 content-type and ' +\n            'PKCS #9 message-digest.');\n        }\n      }\n\n      msg.signers.push({\n        key: key,\n        version: 1,\n        issuer: issuer,\n        serialNumber: serialNumber,\n        digestAlgorithm: digestAlgorithm,\n        signatureAlgorithm: forge.pki.oids.rsaEncryption,\n        signature: null,\n        authenticatedAttributes: authenticatedAttributes,\n        unauthenticatedAttributes: []\n      });\n    },\n\n    /**\n     * Signs the content.\n     * @param options Options to apply when signing:\n     *    [detached] boolean. If signing should be done in detached mode. Defaults to false.\n     */\n    sign: function(options) {\n      options = options || {};\n      // auto-generate content info\n      if(typeof msg.content !== 'object' || msg.contentInfo === null) {\n        // use Data ContentInfo\n        msg.contentInfo = asn1.create(\n          asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // ContentType\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n              asn1.oidToDer(forge.pki.oids.data).getBytes())\n          ]);\n\n        // add actual content, if present\n        if('content' in msg) {\n          var content;\n          if(msg.content instanceof forge.util.ByteBuffer) {\n            content = msg.content.bytes();\n          } else if(typeof msg.content === 'string') {\n            content = forge.util.encodeUtf8(msg.content);\n          }\n\n          if (options.detached) {\n            msg.detachedContent = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content);\n          } else {\n            msg.contentInfo.value.push(\n              // [0] EXPLICIT content\n              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n                  content)\n              ]));\n          }\n        }\n      }\n\n      // no signers, return early (degenerate case for certificate container)\n      if(msg.signers.length === 0) {\n        return;\n      }\n\n      // generate digest algorithm identifiers\n      var mds = addDigestAlgorithmIds();\n\n      // generate signerInfos\n      addSignerInfos(mds);\n    },\n\n    verify: function() {\n      throw new Error('PKCS#7 signature verification not yet implemented.');\n    },\n\n    /**\n     * Add a certificate.\n     *\n     * @param cert the certificate to add.\n     */\n    addCertificate: function(cert) {\n      // convert from PEM\n      if(typeof cert === 'string') {\n        cert = forge.pki.certificateFromPem(cert);\n      }\n      msg.certificates.push(cert);\n    },\n\n    /**\n     * Add a certificate revokation list.\n     *\n     * @param crl the certificate revokation list to add.\n     */\n    addCertificateRevokationList: function(crl) {\n      throw new Error('PKCS#7 CRL support not yet implemented.');\n    }\n  };\n  return msg;\n\n  function addDigestAlgorithmIds() {\n    var mds = {};\n\n    for(var i = 0; i < msg.signers.length; ++i) {\n      var signer = msg.signers[i];\n      var oid = signer.digestAlgorithm;\n      if(!(oid in mds)) {\n        // content digest\n        mds[oid] = forge.md[forge.pki.oids[oid]].create();\n      }\n      if(signer.authenticatedAttributes.length === 0) {\n        // no custom attributes to digest; use content message digest\n        signer.md = mds[oid];\n      } else {\n        // custom attributes to be digested; use own message digest\n        // TODO: optimize to just copy message digest state if that\n        // feature is ever supported with message digests\n        signer.md = forge.md[forge.pki.oids[oid]].create();\n      }\n    }\n\n    // add unique digest algorithm identifiers\n    msg.digestAlgorithmIdentifiers = [];\n    for(var oid in mds) {\n      msg.digestAlgorithmIdentifiers.push(\n        // AlgorithmIdentifier\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(oid).getBytes()),\n          // parameters (null)\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n        ]));\n    }\n\n    return mds;\n  }\n\n  function addSignerInfos(mds) {\n    var content;\n\n    if (msg.detachedContent) {\n      // Signature has been made in detached mode.\n      content = msg.detachedContent;\n    } else {\n      // Note: ContentInfo is a SEQUENCE with 2 values, second value is\n      // the content field and is optional for a ContentInfo but required here\n      // since signers are present\n      // get ContentInfo content\n      content = msg.contentInfo.value[1];\n      // skip [0] EXPLICIT content wrapper\n      content = content.value[0];\n    }\n\n    if(!content) {\n      throw new Error(\n        'Could not sign PKCS#7 message; there is no content to sign.');\n    }\n\n    // get ContentInfo content type\n    var contentType = asn1.derToOid(msg.contentInfo.value[0].value);\n\n    // serialize content\n    var bytes = asn1.toDer(content);\n\n    // skip identifier and length per RFC 2315 9.3\n    // skip identifier (1 byte)\n    bytes.getByte();\n    // read and discard length bytes\n    asn1.getBerValueLength(bytes);\n    bytes = bytes.getBytes();\n\n    // digest content DER value bytes\n    for(var oid in mds) {\n      mds[oid].start().update(bytes);\n    }\n\n    // sign content\n    var signingTime = new Date();\n    for(var i = 0; i < msg.signers.length; ++i) {\n      var signer = msg.signers[i];\n\n      if(signer.authenticatedAttributes.length === 0) {\n        // if ContentInfo content type is not \"Data\", then\n        // authenticatedAttributes must be present per RFC 2315\n        if(contentType !== forge.pki.oids.data) {\n          throw new Error(\n            'Invalid signer; authenticatedAttributes must be present ' +\n            'when the ContentInfo content type is not PKCS#7 Data.');\n        }\n      } else {\n        // process authenticated attributes\n        // [0] IMPLICIT\n        signer.authenticatedAttributesAsn1 = asn1.create(\n          asn1.Class.CONTEXT_SPECIFIC, 0, true, []);\n\n        // per RFC 2315, attributes are to be digested using a SET container\n        // not the above [0] IMPLICIT container\n        var attrsAsn1 = asn1.create(\n          asn1.Class.UNIVERSAL, asn1.Type.SET, true, []);\n\n        for(var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {\n          var attr = signer.authenticatedAttributes[ai];\n          if(attr.type === forge.pki.oids.messageDigest) {\n            // use content message digest as value\n            attr.value = mds[signer.digestAlgorithm].digest();\n          } else if(attr.type === forge.pki.oids.signingTime) {\n            // auto-populate signing time if not already set\n            if(!attr.value) {\n              attr.value = signingTime;\n            }\n          }\n\n          // convert to ASN.1 and push onto Attributes SET (for signing) and\n          // onto authenticatedAttributesAsn1 to complete SignedData ASN.1\n          // TODO: optimize away duplication\n          attrsAsn1.value.push(_attributeToAsn1(attr));\n          signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));\n        }\n\n        // DER-serialize and digest SET OF attributes only\n        bytes = asn1.toDer(attrsAsn1).getBytes();\n        signer.md.start().update(bytes);\n      }\n\n      // sign digest\n      signer.signature = signer.key.sign(signer.md, 'RSASSA-PKCS1-V1_5');\n    }\n\n    // add signer info\n    msg.signerInfos = _signersToAsn1(msg.signers);\n  }\n};\n\n/**\n * Creates an empty PKCS#7 message of type EncryptedData.\n *\n * @return the message.\n */\np7.createEncryptedData = function() {\n  var msg = null;\n  msg = {\n    type: forge.pki.oids.encryptedData,\n    version: 0,\n    encryptedContent: {\n      algorithm: forge.pki.oids['aes256-CBC']\n    },\n\n    /**\n     * Reads an EncryptedData content block (in ASN.1 format)\n     *\n     * @param obj The ASN.1 representation of the EncryptedData content block\n     */\n    fromAsn1: function(obj) {\n      // Validate EncryptedData content block and capture data.\n      _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);\n    },\n\n    /**\n     * Decrypt encrypted content\n     *\n     * @param key The (symmetric) key as a byte buffer\n     */\n    decrypt: function(key) {\n      if(key !== undefined) {\n        msg.encryptedContent.key = key;\n      }\n      _decryptContent(msg);\n    }\n  };\n  return msg;\n};\n\n/**\n * Creates an empty PKCS#7 message of type EnvelopedData.\n *\n * @return the message.\n */\np7.createEnvelopedData = function() {\n  var msg = null;\n  msg = {\n    type: forge.pki.oids.envelopedData,\n    version: 0,\n    recipients: [],\n    encryptedContent: {\n      algorithm: forge.pki.oids['aes256-CBC']\n    },\n\n    /**\n     * Reads an EnvelopedData content block (in ASN.1 format)\n     *\n     * @param obj the ASN.1 representation of the EnvelopedData content block.\n     */\n    fromAsn1: function(obj) {\n      // validate EnvelopedData content block and capture data\n      var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);\n      msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);\n    },\n\n    toAsn1: function() {\n      // ContentInfo\n      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // ContentType\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(msg.type).getBytes()),\n        // [0] EnvelopedData\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // Version\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n              asn1.integerToDer(msg.version).getBytes()),\n            // RecipientInfos\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,\n              _recipientsToAsn1(msg.recipients)),\n            // EncryptedContentInfo\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true,\n              _encryptedContentToAsn1(msg.encryptedContent))\n          ])\n        ])\n      ]);\n    },\n\n    /**\n     * Find recipient by X.509 certificate's issuer.\n     *\n     * @param cert the certificate with the issuer to look for.\n     *\n     * @return the recipient object.\n     */\n    findRecipient: function(cert) {\n      var sAttr = cert.issuer.attributes;\n\n      for(var i = 0; i < msg.recipients.length; ++i) {\n        var r = msg.recipients[i];\n        var rAttr = r.issuer;\n\n        if(r.serialNumber !== cert.serialNumber) {\n          continue;\n        }\n\n        if(rAttr.length !== sAttr.length) {\n          continue;\n        }\n\n        var match = true;\n        for(var j = 0; j < sAttr.length; ++j) {\n          if(rAttr[j].type !== sAttr[j].type ||\n            rAttr[j].value !== sAttr[j].value) {\n            match = false;\n            break;\n          }\n        }\n\n        if(match) {\n          return r;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Decrypt enveloped content\n     *\n     * @param recipient The recipient object related to the private key\n     * @param privKey The (RSA) private key object\n     */\n    decrypt: function(recipient, privKey) {\n      if(msg.encryptedContent.key === undefined && recipient !== undefined &&\n        privKey !== undefined) {\n        switch(recipient.encryptedContent.algorithm) {\n          case forge.pki.oids.rsaEncryption:\n          case forge.pki.oids.desCBC:\n            var key = privKey.decrypt(recipient.encryptedContent.content);\n            msg.encryptedContent.key = forge.util.createBuffer(key);\n            break;\n\n          default:\n            throw new Error('Unsupported asymmetric cipher, ' +\n              'OID ' + recipient.encryptedContent.algorithm);\n        }\n      }\n\n      _decryptContent(msg);\n    },\n\n    /**\n     * Add (another) entity to list of recipients.\n     *\n     * @param cert The certificate of the entity to add.\n     */\n    addRecipient: function(cert) {\n      msg.recipients.push({\n        version: 0,\n        issuer: cert.issuer.attributes,\n        serialNumber: cert.serialNumber,\n        encryptedContent: {\n          // We simply assume rsaEncryption here, since forge.pki only\n          // supports RSA so far.  If the PKI module supports other\n          // ciphers one day, we need to modify this one as well.\n          algorithm: forge.pki.oids.rsaEncryption,\n          key: cert.publicKey\n        }\n      });\n    },\n\n    /**\n     * Encrypt enveloped content.\n     *\n     * This function supports two optional arguments, cipher and key, which\n     * can be used to influence symmetric encryption.  Unless cipher is\n     * provided, the cipher specified in encryptedContent.algorithm is used\n     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key\n     * is (re-)used.  If that one's not set, a random key will be generated\n     * automatically.\n     *\n     * @param [key] The key to be used for symmetric encryption.\n     * @param [cipher] The OID of the symmetric cipher to use.\n     */\n    encrypt: function(key, cipher) {\n      // Part 1: Symmetric encryption\n      if(msg.encryptedContent.content === undefined) {\n        cipher = cipher || msg.encryptedContent.algorithm;\n        key = key || msg.encryptedContent.key;\n\n        var keyLen, ivLen, ciphFn;\n        switch(cipher) {\n          case forge.pki.oids['aes128-CBC']:\n            keyLen = 16;\n            ivLen = 16;\n            ciphFn = forge.aes.createEncryptionCipher;\n            break;\n\n          case forge.pki.oids['aes192-CBC']:\n            keyLen = 24;\n            ivLen = 16;\n            ciphFn = forge.aes.createEncryptionCipher;\n            break;\n\n          case forge.pki.oids['aes256-CBC']:\n            keyLen = 32;\n            ivLen = 16;\n            ciphFn = forge.aes.createEncryptionCipher;\n            break;\n\n          case forge.pki.oids['des-EDE3-CBC']:\n            keyLen = 24;\n            ivLen = 8;\n            ciphFn = forge.des.createEncryptionCipher;\n            break;\n\n          default:\n            throw new Error('Unsupported symmetric cipher, OID ' + cipher);\n        }\n\n        if(key === undefined) {\n          key = forge.util.createBuffer(forge.random.getBytes(keyLen));\n        } else if(key.length() != keyLen) {\n          throw new Error('Symmetric key has wrong length; ' +\n            'got ' + key.length() + ' bytes, expected ' + keyLen + '.');\n        }\n\n        // Keep a copy of the key & IV in the object, so the caller can\n        // use it for whatever reason.\n        msg.encryptedContent.algorithm = cipher;\n        msg.encryptedContent.key = key;\n        msg.encryptedContent.parameter = forge.util.createBuffer(\n          forge.random.getBytes(ivLen));\n\n        var ciph = ciphFn(key);\n        ciph.start(msg.encryptedContent.parameter.copy());\n        ciph.update(msg.content);\n\n        // The finish function does PKCS#7 padding by default, therefore\n        // no action required by us.\n        if(!ciph.finish()) {\n          throw new Error('Symmetric encryption failed.');\n        }\n\n        msg.encryptedContent.content = ciph.output;\n      }\n\n      // Part 2: asymmetric encryption for each recipient\n      for(var i = 0; i < msg.recipients.length; ++i) {\n        var recipient = msg.recipients[i];\n\n        // Nothing to do, encryption already done.\n        if(recipient.encryptedContent.content !== undefined) {\n          continue;\n        }\n\n        switch(recipient.encryptedContent.algorithm) {\n          case forge.pki.oids.rsaEncryption:\n            recipient.encryptedContent.content =\n              recipient.encryptedContent.key.encrypt(\n                msg.encryptedContent.key.data);\n            break;\n\n          default:\n            throw new Error('Unsupported asymmetric cipher, OID ' +\n              recipient.encryptedContent.algorithm);\n        }\n      }\n    }\n  };\n  return msg;\n};\n\n/**\n * Converts a single recipient from an ASN.1 object.\n *\n * @param obj the ASN.1 RecipientInfo.\n *\n * @return the recipient object.\n */\nfunction _recipientFromAsn1(obj) {\n  // validate EnvelopedData content block and capture data\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {\n    var error = new Error('Cannot read PKCS#7 RecipientInfo. ' +\n      'ASN.1 object is not an PKCS#7 RecipientInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  return {\n    version: capture.version.charCodeAt(0),\n    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),\n    serialNumber: forge.util.createBuffer(capture.serial).toHex(),\n    encryptedContent: {\n      algorithm: asn1.derToOid(capture.encAlgorithm),\n      parameter: capture.encParameter.value,\n      content: capture.encKey\n    }\n  };\n}\n\n/**\n * Converts a single recipient object to an ASN.1 object.\n *\n * @param obj the recipient object.\n *\n * @return the ASN.1 RecipientInfo.\n */\nfunction _recipientToAsn1(obj) {\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // Version\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(obj.version).getBytes()),\n    // IssuerAndSerialNumber\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // Name\n      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),\n      // Serial\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        forge.util.hexToBytes(obj.serialNumber))\n    ]),\n    // KeyEncryptionAlgorithmIdentifier\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // Algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()),\n      // Parameter, force NULL, only RSA supported for now.\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ]),\n    // EncryptedKey\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n      obj.encryptedContent.content)\n  ]);\n}\n\n/**\n * Map a set of RecipientInfo ASN.1 objects to recipient objects.\n *\n * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).\n *\n * @return an array of recipient objects.\n */\nfunction _recipientsFromAsn1(infos) {\n  var ret = [];\n  for(var i = 0; i < infos.length; ++i) {\n    ret.push(_recipientFromAsn1(infos[i]));\n  }\n  return ret;\n}\n\n/**\n * Map an array of recipient objects to ASN.1 RecipientInfo objects.\n *\n * @param recipients an array of recipientInfo objects.\n *\n * @return an array of ASN.1 RecipientInfos.\n */\nfunction _recipientsToAsn1(recipients) {\n  var ret = [];\n  for(var i = 0; i < recipients.length; ++i) {\n    ret.push(_recipientToAsn1(recipients[i]));\n  }\n  return ret;\n}\n\n/**\n * Converts a single signer from an ASN.1 object.\n *\n * @param obj the ASN.1 representation of a SignerInfo.\n *\n * @return the signer object.\n */\nfunction _signerFromAsn1(obj) {\n  // validate EnvelopedData content block and capture data\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, p7.asn1.signerInfoValidator, capture, errors)) {\n    var error = new Error('Cannot read PKCS#7 SignerInfo. ' +\n      'ASN.1 object is not an PKCS#7 SignerInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var rval = {\n    version: capture.version.charCodeAt(0),\n    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),\n    serialNumber: forge.util.createBuffer(capture.serial).toHex(),\n    digestAlgorithm: asn1.derToOid(capture.digestAlgorithm),\n    signatureAlgorithm: asn1.derToOid(capture.signatureAlgorithm),\n    signature: capture.signature,\n    authenticatedAttributes: [],\n    unauthenticatedAttributes: []\n  };\n\n  // TODO: convert attributes\n  var authenticatedAttributes = capture.authenticatedAttributes || [];\n  var unauthenticatedAttributes = capture.unauthenticatedAttributes || [];\n\n  return rval;\n}\n\n/**\n * Converts a single signerInfo object to an ASN.1 object.\n *\n * @param obj the signerInfo object.\n *\n * @return the ASN.1 representation of a SignerInfo.\n */\nfunction _signerToAsn1(obj) {\n  // SignerInfo\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(obj.version).getBytes()),\n    // issuerAndSerialNumber\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // name\n      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),\n      // serial\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        forge.util.hexToBytes(obj.serialNumber))\n    ]),\n    // digestAlgorithm\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(obj.digestAlgorithm).getBytes()),\n      // parameters (null)\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ])\n  ]);\n\n  // authenticatedAttributes (OPTIONAL)\n  if(obj.authenticatedAttributesAsn1) {\n    // add ASN.1 previously generated during signing\n    rval.value.push(obj.authenticatedAttributesAsn1);\n  }\n\n  // digestEncryptionAlgorithm\n  rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // algorithm\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n      asn1.oidToDer(obj.signatureAlgorithm).getBytes()),\n    // parameters (null)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n  ]));\n\n  // encryptedDigest\n  rval.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.signature));\n\n  // unauthenticatedAttributes (OPTIONAL)\n  if(obj.unauthenticatedAttributes.length > 0) {\n    // [1] IMPLICIT\n    var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);\n    for(var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {\n      var attr = obj.unauthenticatedAttributes[i];\n      attrsAsn1.values.push(_attributeToAsn1(attr));\n    }\n    rval.value.push(attrsAsn1);\n  }\n\n  return rval;\n}\n\n/**\n * Map a set of SignerInfo ASN.1 objects to an array of signer objects.\n *\n * @param signerInfoAsn1s an array of ASN.1 SignerInfos (i.e. SET OF).\n *\n * @return an array of signers objects.\n */\nfunction _signersFromAsn1(signerInfoAsn1s) {\n  var ret = [];\n  for(var i = 0; i < signerInfoAsn1s.length; ++i) {\n    ret.push(_signerFromAsn1(signerInfoAsn1s[i]));\n  }\n  return ret;\n}\n\n/**\n * Map an array of signer objects to ASN.1 objects.\n *\n * @param signers an array of signer objects.\n *\n * @return an array of ASN.1 SignerInfos.\n */\nfunction _signersToAsn1(signers) {\n  var ret = [];\n  for(var i = 0; i < signers.length; ++i) {\n    ret.push(_signerToAsn1(signers[i]));\n  }\n  return ret;\n}\n\n/**\n * Convert an attribute object to an ASN.1 Attribute.\n *\n * @param attr the attribute object.\n *\n * @return the ASN.1 Attribute.\n */\nfunction _attributeToAsn1(attr) {\n  var value;\n\n  // TODO: generalize to support more attributes\n  if(attr.type === forge.pki.oids.contentType) {\n    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n      asn1.oidToDer(attr.value).getBytes());\n  } else if(attr.type === forge.pki.oids.messageDigest) {\n    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n      attr.value.bytes());\n  } else if(attr.type === forge.pki.oids.signingTime) {\n    /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049\n      (inclusive) MUST be encoded as UTCTime. Any dates with year values\n      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]\n      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST\n      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the\n      number of seconds is zero.  Midnight (GMT) must be represented as\n      \"YYMMDD000000Z\". */\n    // TODO: make these module-level constants\n    var jan_1_1950 = new Date('1950-01-01T00:00:00Z');\n    var jan_1_2050 = new Date('2050-01-01T00:00:00Z');\n    var date = attr.value;\n    if(typeof date === 'string') {\n      // try to parse date\n      var timestamp = Date.parse(date);\n      if(!isNaN(timestamp)) {\n        date = new Date(timestamp);\n      } else if(date.length === 13) {\n        // YYMMDDHHMMSSZ (13 chars for UTCTime)\n        date = asn1.utcTimeToDate(date);\n      } else {\n        // assume generalized time\n        date = asn1.generalizedTimeToDate(date);\n      }\n    }\n\n    if(date >= jan_1_1950 && date < jan_1_2050) {\n      value = asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,\n        asn1.dateToUtcTime(date));\n    } else {\n      value = asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false,\n        asn1.dateToGeneralizedTime(date));\n    }\n  }\n\n  // TODO: expose as common API call\n  // create a RelativeDistinguishedName set\n  // each value in the set is an AttributeTypeAndValue first\n  // containing the type (an OID) and second the value\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // AttributeType\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n      asn1.oidToDer(attr.type).getBytes()),\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n      // AttributeValue\n      value\n    ])\n  ]);\n}\n\n/**\n * Map messages encrypted content to ASN.1 objects.\n *\n * @param ec The encryptedContent object of the message.\n *\n * @return ASN.1 representation of the encryptedContent object (SEQUENCE).\n */\nfunction _encryptedContentToAsn1(ec) {\n  return [\n    // ContentType, always Data for the moment\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n      asn1.oidToDer(forge.pki.oids.data).getBytes()),\n    // ContentEncryptionAlgorithmIdentifier\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // Algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(ec.algorithm).getBytes()),\n      // Parameters (IV)\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n        ec.parameter.getBytes())\n    ]),\n    // [0] EncryptedContent\n    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n        ec.content.getBytes())\n    ])\n  ];\n}\n\n/**\n * Reads the \"common part\" of an PKCS#7 content block (in ASN.1 format)\n *\n * This function reads the \"common part\" of the PKCS#7 content blocks\n * EncryptedData and EnvelopedData, i.e. version number and symmetrically\n * encrypted content block.\n *\n * The result of the ASN.1 validate and capture process is returned\n * to allow the caller to extract further data, e.g. the list of recipients\n * in case of a EnvelopedData object.\n *\n * @param msg the PKCS#7 object to read the data to.\n * @param obj the ASN.1 representation of the content block.\n * @param validator the ASN.1 structure validator object to use.\n *\n * @return the value map captured by validator object.\n */\nfunction _fromAsn1(msg, obj, validator) {\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, validator, capture, errors)) {\n    var error = new Error('Cannot read PKCS#7 message. ' +\n      'ASN.1 object is not a supported PKCS#7 message.');\n    error.errors = error;\n    throw error;\n  }\n\n  // Check contentType, so far we only support (raw) Data.\n  var contentType = asn1.derToOid(capture.contentType);\n  if(contentType !== forge.pki.oids.data) {\n    throw new Error('Unsupported PKCS#7 message. ' +\n      'Only wrapped ContentType Data supported.');\n  }\n\n  if(capture.encryptedContent) {\n    var content = '';\n    if(forge.util.isArray(capture.encryptedContent)) {\n      for(var i = 0; i < capture.encryptedContent.length; ++i) {\n        if(capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {\n          throw new Error('Malformed PKCS#7 message, expecting encrypted ' +\n            'content constructed of only OCTET STRING objects.');\n        }\n        content += capture.encryptedContent[i].value;\n      }\n    } else {\n      content = capture.encryptedContent;\n    }\n    msg.encryptedContent = {\n      algorithm: asn1.derToOid(capture.encAlgorithm),\n      parameter: forge.util.createBuffer(capture.encParameter.value),\n      content: forge.util.createBuffer(content)\n    };\n  }\n\n  if(capture.content) {\n    var content = '';\n    if(forge.util.isArray(capture.content)) {\n      for(var i = 0; i < capture.content.length; ++i) {\n        if(capture.content[i].type !== asn1.Type.OCTETSTRING) {\n          throw new Error('Malformed PKCS#7 message, expecting ' +\n            'content constructed of only OCTET STRING objects.');\n        }\n        content += capture.content[i].value;\n      }\n    } else {\n      content = capture.content;\n    }\n    msg.content = forge.util.createBuffer(content);\n  }\n\n  msg.version = capture.version.charCodeAt(0);\n  msg.rawCapture = capture;\n\n  return capture;\n}\n\n/**\n * Decrypt the symmetrically encrypted content block of the PKCS#7 message.\n *\n * Decryption is skipped in case the PKCS#7 message object already has a\n * (decrypted) content attribute.  The algorithm, key and cipher parameters\n * (probably the iv) are taken from the encryptedContent attribute of the\n * message object.\n *\n * @param The PKCS#7 message object.\n */\nfunction _decryptContent(msg) {\n  if(msg.encryptedContent.key === undefined) {\n    throw new Error('Symmetric key not available.');\n  }\n\n  if(msg.content === undefined) {\n    var ciph;\n\n    switch(msg.encryptedContent.algorithm) {\n      case forge.pki.oids['aes128-CBC']:\n      case forge.pki.oids['aes192-CBC']:\n      case forge.pki.oids['aes256-CBC']:\n        ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);\n        break;\n\n      case forge.pki.oids['desCBC']:\n      case forge.pki.oids['des-EDE3-CBC']:\n        ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);\n        break;\n\n      default:\n        throw new Error('Unsupported symmetric cipher, OID ' +\n          msg.encryptedContent.algorithm);\n    }\n    ciph.start(msg.encryptedContent.parameter);\n    ciph.update(msg.encryptedContent.content);\n\n    if(!ciph.finish()) {\n      throw new Error('Symmetric decryption failed.');\n    }\n\n    msg.content = ciph.output;\n  }\n}\n","/**\n * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.\n *\n * See FIPS 180-2 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\nvar sha256 = module.exports = forge.sha256 = forge.sha256 || {};\nforge.md.sha256 = forge.md.algorithms.sha256 = sha256;\n\n/**\n * Creates a SHA-256 message digest object.\n *\n * @return a message digest object.\n */\nsha256.create = function() {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  // SHA-256 state contains eight 32-bit integers\n  var _state = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for word storage\n  var _w = new Array(64);\n\n  // message digest object\n  var md = {\n    algorithm: 'sha256',\n    blockLength: 64,\n    digestLength: 32,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 8\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength64 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength64 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _state = {\n      h0: 0x6A09E667,\n      h1: 0xBB67AE85,\n      h2: 0x3C6EF372,\n      h3: 0xA54FF53A,\n      h4: 0x510E527F,\n      h5: 0x9B05688C,\n      h6: 0x1F83D9AB,\n      h7: 0x5BE0CD19\n    };\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = ((len[1] / 0x100000000) >>> 0);\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_state, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-256 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 448 mod 512. In other words,\n    the data to be digested must be a multiple of 512 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 8 bytes (64\n    bits), that means that the last segment of the data must have 56 bytes\n    (448 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 448 mod 512 because\n    512 - 128 = 448.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 448 mod 512, then 512 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in big-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry from next int\n    var next, carry;\n    var bits = md.fullMessageLength[0] * 8;\n    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n      next = md.fullMessageLength[i + 1] * 8;\n      carry = (next / 0x100000000) >>> 0;\n      bits += carry;\n      finalBlock.putInt32(bits >>> 0);\n      bits = next >>> 0;\n    }\n    finalBlock.putInt32(bits);\n\n    var s2 = {\n      h0: _state.h0,\n      h1: _state.h1,\n      h2: _state.h2,\n      h3: _state.h3,\n      h4: _state.h4,\n      h5: _state.h5,\n      h6: _state.h6,\n      h7: _state.h7\n    };\n    _update(s2, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    rval.putInt32(s2.h0);\n    rval.putInt32(s2.h1);\n    rval.putInt32(s2.h2);\n    rval.putInt32(s2.h3);\n    rval.putInt32(s2.h4);\n    rval.putInt32(s2.h5);\n    rval.putInt32(s2.h6);\n    rval.putInt32(s2.h7);\n    return rval;\n  };\n\n  return md;\n};\n\n// sha-256 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n\n// table of constants\nvar _k = null;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);\n\n  // create K table for SHA-256\n  _k = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates a SHA-256 state with the given byte buffer.\n *\n * @param s the SHA-256 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (64 byte) chunks\n  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;\n  var len = bytes.length();\n  while(len >= 64) {\n    // the w array will be populated with sixteen 32-bit big-endian words\n    // and then extended into 64 32-bit words according to SHA-256\n    for(i = 0; i < 16; ++i) {\n      w[i] = bytes.getInt32();\n    }\n    for(; i < 64; ++i) {\n      // XOR word 2 words ago rot right 17, rot right 19, shft right 10\n      t1 = w[i - 2];\n      t1 =\n        ((t1 >>> 17) | (t1 << 15)) ^\n        ((t1 >>> 19) | (t1 << 13)) ^\n        (t1 >>> 10);\n      // XOR word 15 words ago rot right 7, rot right 18, shft right 3\n      t2 = w[i - 15];\n      t2 =\n        ((t2 >>> 7) | (t2 << 25)) ^\n        ((t2 >>> 18) | (t2 << 14)) ^\n        (t2 >>> 3);\n      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32\n      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;\n    }\n\n    // initialize hash value for this chunk\n    a = s.h0;\n    b = s.h1;\n    c = s.h2;\n    d = s.h3;\n    e = s.h4;\n    f = s.h5;\n    g = s.h6;\n    h = s.h7;\n\n    // round function\n    for(i = 0; i < 64; ++i) {\n      // Sum1(e)\n      s1 =\n        ((e >>> 6) | (e << 26)) ^\n        ((e >>> 11) | (e << 21)) ^\n        ((e >>> 25) | (e << 7));\n      // Ch(e, f, g) (optimized the same way as SHA-1)\n      ch = g ^ (e & (f ^ g));\n      // Sum0(a)\n      s0 =\n        ((a >>> 2) | (a << 30)) ^\n        ((a >>> 13) | (a << 19)) ^\n        ((a >>> 22) | (a << 10));\n      // Maj(a, b, c) (optimized the same way as SHA-1)\n      maj = (a & b) | (c & (a ^ b));\n\n      // main algorithm\n      t1 = h + s1 + ch + _k[i] + w[i];\n      t2 = s0 + maj;\n      h = g;\n      g = f;\n      f = e;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      // can't truncate with `| 0`\n      e = (d + t1) >>> 0;\n      d = c;\n      c = b;\n      b = a;\n      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug\n      // can't truncate with `| 0`\n      a = (t1 + t2) >>> 0;\n    }\n\n    // update hash state\n    s.h0 = (s.h0 + a) | 0;\n    s.h1 = (s.h1 + b) | 0;\n    s.h2 = (s.h2 + c) | 0;\n    s.h3 = (s.h3 + d) | 0;\n    s.h4 = (s.h4 + e) | 0;\n    s.h5 = (s.h5 + f) | 0;\n    s.h6 = (s.h6 + g) | 0;\n    s.h7 = (s.h7 + h) | 0;\n    len -= 64;\n  }\n}\n","/**\n * Javascript implementation of PKCS#12.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * The ASN.1 representation of PKCS#12 is as follows\n * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)\n *\n * PFX ::= SEQUENCE {\n *   version  INTEGER {v3(3)}(v3,...),\n *   authSafe ContentInfo,\n *   macData  MacData OPTIONAL\n * }\n *\n * MacData ::= SEQUENCE {\n *   mac DigestInfo,\n *   macSalt OCTET STRING,\n *   iterations INTEGER DEFAULT 1\n * }\n * Note: The iterations default is for historical reasons and its use is\n * deprecated. A higher value, like 1024, is recommended.\n *\n * DigestInfo is defined in PKCS#7 as follows:\n *\n * DigestInfo ::= SEQUENCE {\n *   digestAlgorithm DigestAlgorithmIdentifier,\n *   digest Digest\n * }\n *\n * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of SHA1 there is none.\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *    algorithm OBJECT IDENTIFIER,\n *    parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * Digest ::= OCTET STRING\n *\n *\n * ContentInfo ::= SEQUENCE {\n *   contentType ContentType,\n *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL\n * }\n *\n * ContentType ::= OBJECT IDENTIFIER\n *\n * AuthenticatedSafe ::= SEQUENCE OF ContentInfo\n * -- Data if unencrypted\n * -- EncryptedData if password-encrypted\n * -- EnvelopedData if public key-encrypted\n *\n *\n * SafeContents ::= SEQUENCE OF SafeBag\n *\n * SafeBag ::= SEQUENCE {\n *   bagId     BAG-TYPE.&id ({PKCS12BagSet})\n *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),\n *   bagAttributes SET OF PKCS12Attribute OPTIONAL\n * }\n *\n * PKCS12Attribute ::= SEQUENCE {\n *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),\n *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})\n * } -- This type is compatible with the X.500 type 'Attribute'\n *\n * PKCS12AttrSet ATTRIBUTE ::= {\n *   friendlyName | -- from PKCS #9\n *   localKeyId, -- from PKCS #9\n *   ... -- Other attributes are allowed\n * }\n *\n * CertBag ::= SEQUENCE {\n *   certId    BAG-TYPE.&id   ({CertTypes}),\n *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})\n * }\n *\n * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}\n *   -- DER-encoded X.509 certificate stored in OCTET STRING\n *\n * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}\n * -- Base64-encoded SDSI certificate stored in IA5String\n *\n * CertTypes BAG-TYPE ::= {\n *   x509Certificate |\n *   sdsiCertificate,\n *   ... -- For future extensions\n * }\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./hmac');\nrequire('./oids');\nrequire('./pkcs7asn1');\nrequire('./pbe');\nrequire('./random');\nrequire('./rsa');\nrequire('./sha1');\nrequire('./util');\nrequire('./x509');\n\n// shortcut for asn.1 & PKI API\nvar asn1 = forge.asn1;\nvar pki = forge.pki;\n\n// shortcut for PKCS#12 API\nvar p12 = module.exports = forge.pkcs12 = forge.pkcs12 || {};\n\nvar contentInfoValidator = {\n  name: 'ContentInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,  // a ContentInfo\n  constructed: true,\n  value: [{\n    name: 'ContentInfo.contentType',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'contentType'\n  }, {\n    name: 'ContentInfo.content',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    constructed: true,\n    captureAsn1: 'content'\n  }]\n};\n\nvar pfxValidator = {\n  name: 'PFX',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PFX.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'version'\n  },\n  contentInfoValidator, {\n    name: 'PFX.macData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    optional: true,\n    captureAsn1: 'mac',\n    value: [{\n      name: 'PFX.macData.mac',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,  // DigestInfo\n      constructed: true,\n      value: [{\n        name: 'PFX.macData.mac.digestAlgorithm',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,  // DigestAlgorithmIdentifier\n        constructed: true,\n        value: [{\n          name: 'PFX.macData.mac.digestAlgorithm.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'macAlgorithm'\n        }, {\n          name: 'PFX.macData.mac.digestAlgorithm.parameters',\n          tagClass: asn1.Class.UNIVERSAL,\n          captureAsn1: 'macAlgorithmParameters'\n        }]\n      }, {\n        name: 'PFX.macData.mac.digest',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'macDigest'\n      }]\n    }, {\n      name: 'PFX.macData.macSalt',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'macSalt'\n    }, {\n      name: 'PFX.macData.iterations',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.INTEGER,\n      constructed: false,\n      optional: true,\n      capture: 'macIterations'\n    }]\n  }]\n};\n\nvar safeBagValidator = {\n  name: 'SafeBag',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'SafeBag.bagId',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'bagId'\n  }, {\n    name: 'SafeBag.bagValue',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    constructed: true,\n    captureAsn1: 'bagValue'\n  }, {\n    name: 'SafeBag.bagAttributes',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    optional: true,\n    capture: 'bagAttributes'\n  }]\n};\n\nvar attributeValidator = {\n  name: 'Attribute',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'Attribute.attrId',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'oid'\n  }, {\n    name: 'Attribute.attrValues',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SET,\n    constructed: true,\n    capture: 'values'\n  }]\n};\n\nvar certBagValidator = {\n  name: 'CertBag',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'CertBag.certId',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OID,\n    constructed: false,\n    capture: 'certId'\n  }, {\n    name: 'CertBag.certValue',\n    tagClass: asn1.Class.CONTEXT_SPECIFIC,\n    constructed: true,\n    /* So far we only support X.509 certificates (which are wrapped in\n       an OCTET STRING, hence hard code that here). */\n    value: [{\n      name: 'CertBag.certValue[0]',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Class.OCTETSTRING,\n      constructed: false,\n      capture: 'cert'\n    }]\n  }]\n};\n\n/**\n * Search SafeContents structure for bags with matching attributes.\n *\n * The search can optionally be narrowed by a certain bag type.\n *\n * @param safeContents the SafeContents structure to search in.\n * @param attrName the name of the attribute to compare against.\n * @param attrValue the attribute value to search for.\n * @param [bagType] bag type to narrow search by.\n *\n * @return an array of matching bags.\n */\nfunction _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {\n  var result = [];\n\n  for(var i = 0; i < safeContents.length; i++) {\n    for(var j = 0; j < safeContents[i].safeBags.length; j++) {\n      var bag = safeContents[i].safeBags[j];\n      if(bagType !== undefined && bag.type !== bagType) {\n        continue;\n      }\n      // only filter by bag type, no attribute specified\n      if(attrName === null) {\n        result.push(bag);\n        continue;\n      }\n      if(bag.attributes[attrName] !== undefined &&\n        bag.attributes[attrName].indexOf(attrValue) >= 0) {\n        result.push(bag);\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.\n *\n * @param obj The PKCS#12 PFX in ASN.1 notation.\n * @param strict true to use strict DER decoding, false not to (default: true).\n * @param {String} password Password to decrypt with (optional).\n *\n * @return PKCS#12 PFX object.\n */\np12.pkcs12FromAsn1 = function(obj, strict, password) {\n  // handle args\n  if(typeof strict === 'string') {\n    password = strict;\n    strict = true;\n  } else if(strict === undefined) {\n    strict = true;\n  }\n\n  // validate PFX and capture data\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, pfxValidator, capture, errors)) {\n    var error = new Error('Cannot read PKCS#12 PFX. ' +\n      'ASN.1 object is not an PKCS#12 PFX.');\n    error.errors = error;\n    throw error;\n  }\n\n  var pfx = {\n    version: capture.version.charCodeAt(0),\n    safeContents: [],\n\n    /**\n     * Gets bags with matching attributes.\n     *\n     * @param filter the attributes to filter by:\n     *          [localKeyId] the localKeyId to search for.\n     *          [localKeyIdHex] the localKeyId in hex to search for.\n     *          [friendlyName] the friendly name to search for.\n     *          [bagType] bag type to narrow each attribute search by.\n     *\n     * @return a map of attribute type to an array of matching bags or, if no\n     *           attribute was given but a bag type, the map key will be the\n     *           bag type.\n     */\n    getBags: function(filter) {\n      var rval = {};\n\n      var localKeyId;\n      if('localKeyId' in filter) {\n        localKeyId = filter.localKeyId;\n      } else if('localKeyIdHex' in filter) {\n        localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);\n      }\n\n      // filter on bagType only\n      if(localKeyId === undefined && !('friendlyName' in filter) &&\n        'bagType' in filter) {\n        rval[filter.bagType] = _getBagsByAttribute(\n          pfx.safeContents, null, null, filter.bagType);\n      }\n\n      if(localKeyId !== undefined) {\n        rval.localKeyId = _getBagsByAttribute(\n          pfx.safeContents, 'localKeyId',\n          localKeyId, filter.bagType);\n      }\n      if('friendlyName' in filter) {\n        rval.friendlyName = _getBagsByAttribute(\n          pfx.safeContents, 'friendlyName',\n          filter.friendlyName, filter.bagType);\n      }\n\n      return rval;\n    },\n\n    /**\n     * DEPRECATED: use getBags() instead.\n     *\n     * Get bags with matching friendlyName attribute.\n     *\n     * @param friendlyName the friendly name to search for.\n     * @param [bagType] bag type to narrow search by.\n     *\n     * @return an array of bags with matching friendlyName attribute.\n     */\n    getBagsByFriendlyName: function(friendlyName, bagType) {\n      return _getBagsByAttribute(\n        pfx.safeContents, 'friendlyName', friendlyName, bagType);\n    },\n\n    /**\n     * DEPRECATED: use getBags() instead.\n     *\n     * Get bags with matching localKeyId attribute.\n     *\n     * @param localKeyId the localKeyId to search for.\n     * @param [bagType] bag type to narrow search by.\n     *\n     * @return an array of bags with matching localKeyId attribute.\n     */\n    getBagsByLocalKeyId: function(localKeyId, bagType) {\n      return _getBagsByAttribute(\n        pfx.safeContents, 'localKeyId', localKeyId, bagType);\n    }\n  };\n\n  if(capture.version.charCodeAt(0) !== 3) {\n    var error = new Error('PKCS#12 PFX of version other than 3 not supported.');\n    error.version = capture.version.charCodeAt(0);\n    throw error;\n  }\n\n  if(asn1.derToOid(capture.contentType) !== pki.oids.data) {\n    var error = new Error('Only PKCS#12 PFX in password integrity mode supported.');\n    error.oid = asn1.derToOid(capture.contentType);\n    throw error;\n  }\n\n  var data = capture.content.value[0];\n  if(data.tagClass !== asn1.Class.UNIVERSAL ||\n     data.type !== asn1.Type.OCTETSTRING) {\n    throw new Error('PKCS#12 authSafe content data is not an OCTET STRING.');\n  }\n  data = _decodePkcs7Data(data);\n\n  // check for MAC\n  if(capture.mac) {\n    var md = null;\n    var macKeyBytes = 0;\n    var macAlgorithm = asn1.derToOid(capture.macAlgorithm);\n    switch(macAlgorithm) {\n    case pki.oids.sha1:\n      md = forge.md.sha1.create();\n      macKeyBytes = 20;\n      break;\n    case pki.oids.sha256:\n      md = forge.md.sha256.create();\n      macKeyBytes = 32;\n      break;\n    case pki.oids.sha384:\n      md = forge.md.sha384.create();\n      macKeyBytes = 48;\n      break;\n    case pki.oids.sha512:\n      md = forge.md.sha512.create();\n      macKeyBytes = 64;\n      break;\n    case pki.oids.md5:\n      md = forge.md.md5.create();\n      macKeyBytes = 16;\n      break;\n    }\n    if(md === null) {\n      throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + macAlgorithm);\n    }\n\n    // verify MAC (iterations default to 1)\n    var macSalt = new forge.util.ByteBuffer(capture.macSalt);\n    var macIterations = (('macIterations' in capture) ?\n      parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1);\n    var macKey = p12.generateKey(\n      password, macSalt, 3, macIterations, macKeyBytes, md);\n    var mac = forge.hmac.create();\n    mac.start(md, macKey);\n    mac.update(data.value);\n    var macValue = mac.getMac();\n    if(macValue.getBytes() !== capture.macDigest) {\n      throw new Error('PKCS#12 MAC could not be verified. Invalid password?');\n    }\n  }\n\n  _decodeAuthenticatedSafe(pfx, data.value, strict, password);\n  return pfx;\n};\n\n/**\n * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines \"Data\" as an OCTET STRING,\n * but it is sometimes an OCTET STRING that is composed/constructed of chunks,\n * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This\n * function transforms this corner-case into the usual simple,\n * non-composed/constructed OCTET STRING.\n *\n * This function may be moved to ASN.1 at some point to better deal with\n * more BER-encoding issues, should they arise.\n *\n * @param data the ASN.1 Data object to transform.\n */\nfunction _decodePkcs7Data(data) {\n  // handle special case of \"chunked\" data content: an octet string composed\n  // of other octet strings\n  if(data.composed || data.constructed) {\n    var value = forge.util.createBuffer();\n    for(var i = 0; i < data.value.length; ++i) {\n      value.putBytes(data.value[i].value);\n    }\n    data.composed = data.constructed = false;\n    data.value = value.getBytes();\n  }\n  return data;\n}\n\n/**\n * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.\n *\n * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.\n *\n * @param pfx The PKCS#12 PFX object to fill.\n * @param {String} authSafe BER-encoded AuthenticatedSafe.\n * @param strict true to use strict DER decoding, false not to.\n * @param {String} password Password to decrypt with (optional).\n */\nfunction _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {\n  authSafe = asn1.fromDer(authSafe, strict);  /* actually it's BER encoded */\n\n  if(authSafe.tagClass !== asn1.Class.UNIVERSAL ||\n     authSafe.type !== asn1.Type.SEQUENCE ||\n     authSafe.constructed !== true) {\n    throw new Error('PKCS#12 AuthenticatedSafe expected to be a ' +\n      'SEQUENCE OF ContentInfo');\n  }\n\n  for(var i = 0; i < authSafe.value.length; i++) {\n    var contentInfo = authSafe.value[i];\n\n    // validate contentInfo and capture data\n    var capture = {};\n    var errors = [];\n    if(!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {\n      var error = new Error('Cannot read ContentInfo.');\n      error.errors = errors;\n      throw error;\n    }\n\n    var obj = {\n      encrypted: false\n    };\n    var safeContents = null;\n    var data = capture.content.value[0];\n    switch(asn1.derToOid(capture.contentType)) {\n    case pki.oids.data:\n      if(data.tagClass !== asn1.Class.UNIVERSAL ||\n         data.type !== asn1.Type.OCTETSTRING) {\n        throw new Error('PKCS#12 SafeContents Data is not an OCTET STRING.');\n      }\n      safeContents = _decodePkcs7Data(data).value;\n      break;\n    case pki.oids.encryptedData:\n      safeContents = _decryptSafeContents(data, password);\n      obj.encrypted = true;\n      break;\n    default:\n      var error = new Error('Unsupported PKCS#12 contentType.');\n      error.contentType = asn1.derToOid(capture.contentType);\n      throw error;\n    }\n\n    obj.safeBags = _decodeSafeContents(safeContents, strict, password);\n    pfx.safeContents.push(obj);\n  }\n}\n\n/**\n * Decrypt PKCS#7 EncryptedData structure.\n *\n * @param data ASN.1 encoded EncryptedContentInfo object.\n * @param password The user-provided password.\n *\n * @return The decrypted SafeContents (ASN.1 object).\n */\nfunction _decryptSafeContents(data, password) {\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(\n    data, forge.pkcs7.asn1.encryptedDataValidator, capture, errors)) {\n    var error = new Error('Cannot read EncryptedContentInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var oid = asn1.derToOid(capture.contentType);\n  if(oid !== pki.oids.data) {\n    var error = new Error(\n      'PKCS#12 EncryptedContentInfo ContentType is not Data.');\n    error.oid = oid;\n    throw error;\n  }\n\n  // get cipher\n  oid = asn1.derToOid(capture.encAlgorithm);\n  var cipher = pki.pbe.getCipher(oid, capture.encParameter, password);\n\n  // get encrypted data\n  var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);\n  var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);\n\n  cipher.update(encrypted);\n  if(!cipher.finish()) {\n    throw new Error('Failed to decrypt PKCS#12 SafeContents.');\n  }\n\n  return cipher.output.getBytes();\n}\n\n/**\n * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.\n *\n * The safeContents is a BER-encoded SEQUENCE OF SafeBag.\n *\n * @param {String} safeContents BER-encoded safeContents.\n * @param strict true to use strict DER decoding, false not to.\n * @param {String} password Password to decrypt with (optional).\n *\n * @return {Array} Array of Bag objects.\n */\nfunction _decodeSafeContents(safeContents, strict, password) {\n  // if strict and no safe contents, return empty safes\n  if(!strict && safeContents.length === 0) {\n    return [];\n  }\n\n  // actually it's BER-encoded\n  safeContents = asn1.fromDer(safeContents, strict);\n\n  if(safeContents.tagClass !== asn1.Class.UNIVERSAL ||\n    safeContents.type !== asn1.Type.SEQUENCE ||\n    safeContents.constructed !== true) {\n    throw new Error(\n      'PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.');\n  }\n\n  var res = [];\n  for(var i = 0; i < safeContents.value.length; i++) {\n    var safeBag = safeContents.value[i];\n\n    // validate SafeBag and capture data\n    var capture = {};\n    var errors = [];\n    if(!asn1.validate(safeBag, safeBagValidator, capture, errors)) {\n      var error = new Error('Cannot read SafeBag.');\n      error.errors = errors;\n      throw error;\n    }\n\n    /* Create bag object and push to result array. */\n    var bag = {\n      type: asn1.derToOid(capture.bagId),\n      attributes: _decodeBagAttributes(capture.bagAttributes)\n    };\n    res.push(bag);\n\n    var validator, decoder;\n    var bagAsn1 = capture.bagValue.value[0];\n    switch(bag.type) {\n      case pki.oids.pkcs8ShroudedKeyBag:\n        /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.\n           Afterwards we can handle it like a keyBag,\n           which is a PrivateKeyInfo. */\n        bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);\n        if(bagAsn1 === null) {\n          throw new Error(\n            'Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?');\n        }\n\n        /* fall through */\n      case pki.oids.keyBag:\n        /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our\n           PKI module, hence we don't have to do validation/capturing here,\n           just pass what we already got. */\n        try {\n          bag.key = pki.privateKeyFromAsn1(bagAsn1);\n        } catch(e) {\n          // ignore unknown key type, pass asn1 value\n          bag.key = null;\n          bag.asn1 = bagAsn1;\n        }\n        continue;  /* Nothing more to do. */\n\n      case pki.oids.certBag:\n        /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.\n           Therefore put the SafeBag content through another validator to\n           capture the fields.  Afterwards check & store the results. */\n        validator = certBagValidator;\n        decoder = function() {\n          if(asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {\n            var error = new Error(\n              'Unsupported certificate type, only X.509 supported.');\n            error.oid = asn1.derToOid(capture.certId);\n            throw error;\n          }\n\n          // true=produce cert hash\n          var certAsn1 = asn1.fromDer(capture.cert, strict);\n          try {\n            bag.cert = pki.certificateFromAsn1(certAsn1, true);\n          } catch(e) {\n            // ignore unknown cert type, pass asn1 value\n            bag.cert = null;\n            bag.asn1 = certAsn1;\n          }\n        };\n        break;\n\n      default:\n        var error = new Error('Unsupported PKCS#12 SafeBag type.');\n        error.oid = bag.type;\n        throw error;\n    }\n\n    /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */\n    if(validator !== undefined &&\n       !asn1.validate(bagAsn1, validator, capture, errors)) {\n      var error = new Error('Cannot read PKCS#12 ' + validator.name);\n      error.errors = errors;\n      throw error;\n    }\n\n    /* Call decoder function from above to store the results. */\n    decoder();\n  }\n\n  return res;\n}\n\n/**\n * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.\n *\n * @param attributes SET OF PKCS12Attribute (ASN.1 object).\n *\n * @return the decoded attributes.\n */\nfunction _decodeBagAttributes(attributes) {\n  var decodedAttrs = {};\n\n  if(attributes !== undefined) {\n    for(var i = 0; i < attributes.length; ++i) {\n      var capture = {};\n      var errors = [];\n      if(!asn1.validate(attributes[i], attributeValidator, capture, errors)) {\n        var error = new Error('Cannot read PKCS#12 BagAttribute.');\n        error.errors = errors;\n        throw error;\n      }\n\n      var oid = asn1.derToOid(capture.oid);\n      if(pki.oids[oid] === undefined) {\n        // unsupported attribute type, ignore.\n        continue;\n      }\n\n      decodedAttrs[pki.oids[oid]] = [];\n      for(var j = 0; j < capture.values.length; ++j) {\n        decodedAttrs[pki.oids[oid]].push(capture.values[j].value);\n      }\n    }\n  }\n\n  return decodedAttrs;\n}\n\n/**\n * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a\n * password is provided then the private key will be encrypted.\n *\n * An entire certificate chain may also be included. To do this, pass\n * an array for the \"cert\" parameter where the first certificate is\n * the one that is paired with the private key and each subsequent one\n * verifies the previous one. The certificates may be in PEM format or\n * have been already parsed by Forge.\n *\n * @todo implement password-based-encryption for the whole package\n *\n * @param key the private key.\n * @param cert the certificate (may be an array of certificates in order\n *          to specify a certificate chain).\n * @param password the password to use, null for none.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          useMac true to include a MAC, false not to, defaults to true.\n *          localKeyId the local key ID to use, in hex.\n *          friendlyName the friendly name to use.\n *          generateLocalKeyId true to generate a random local key ID,\n *            false not to, defaults to true.\n *\n * @return the PKCS#12 PFX ASN.1 object.\n */\np12.toPkcs12Asn1 = function(key, cert, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';\n  if(!('useMac' in options)) {\n    options.useMac = true;\n  }\n  if(!('localKeyId' in options)) {\n    options.localKeyId = null;\n  }\n  if(!('generateLocalKeyId' in options)) {\n    options.generateLocalKeyId = true;\n  }\n\n  var localKeyId = options.localKeyId;\n  var bagAttrs;\n  if(localKeyId !== null) {\n    localKeyId = forge.util.hexToBytes(localKeyId);\n  } else if(options.generateLocalKeyId) {\n    // use SHA-1 of paired cert, if available\n    if(cert) {\n      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;\n      if(typeof pairedCert === 'string') {\n        pairedCert = pki.certificateFromPem(pairedCert);\n      }\n      var sha1 = forge.md.sha1.create();\n      sha1.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());\n      localKeyId = sha1.digest().getBytes();\n    } else {\n      // FIXME: consider using SHA-1 of public key (which can be generated\n      // from private key components), see: cert.generateSubjectKeyIdentifier\n      // generate random bytes\n      localKeyId = forge.random.getBytes(20);\n    }\n  }\n\n  var attrs = [];\n  if(localKeyId !== null) {\n    attrs.push(\n      // localKeyID\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // attrId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.localKeyId).getBytes()),\n        // attrValues\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n            localKeyId)\n        ])\n      ]));\n  }\n  if('friendlyName' in options) {\n    attrs.push(\n      // friendlyName\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // attrId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.friendlyName).getBytes()),\n        // attrValues\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BMPSTRING, false,\n            options.friendlyName)\n        ])\n      ]));\n  }\n\n  if(attrs.length > 0) {\n    bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);\n  }\n\n  // collect contents for AuthenticatedSafe\n  var contents = [];\n\n  // create safe bag(s) for certificate chain\n  var chain = [];\n  if(cert !== null) {\n    if(forge.util.isArray(cert)) {\n      chain = cert;\n    } else {\n      chain = [cert];\n    }\n  }\n\n  var certSafeBags = [];\n  for(var i = 0; i < chain.length; ++i) {\n    // convert cert from PEM as necessary\n    cert = chain[i];\n    if(typeof cert === 'string') {\n      cert = pki.certificateFromPem(cert);\n    }\n\n    // SafeBag\n    var certBagAttrs = (i === 0) ? bagAttrs : undefined;\n    var certAsn1 = pki.certificateToAsn1(cert);\n    var certSafeBag =\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // bagId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.certBag).getBytes()),\n        // bagValue\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          // CertBag\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n            // certId\n            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n              asn1.oidToDer(pki.oids.x509Certificate).getBytes()),\n            // certValue (x509Certificate)\n            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n              asn1.create(\n                asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n                asn1.toDer(certAsn1).getBytes())\n            ])])]),\n        // bagAttributes (OPTIONAL)\n        certBagAttrs\n      ]);\n    certSafeBags.push(certSafeBag);\n  }\n\n  if(certSafeBags.length > 0) {\n    // SafeContents\n    var certSafeContents = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, certSafeBags);\n\n    // ContentInfo\n    var certCI =\n      // PKCS#7 ContentInfo\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // contentType\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          // OID for the content type is 'data'\n          asn1.oidToDer(pki.oids.data).getBytes()),\n        // content\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n            asn1.toDer(certSafeContents).getBytes())\n        ])\n      ]);\n    contents.push(certCI);\n  }\n\n  // create safe contents for private key\n  var keyBag = null;\n  if(key !== null) {\n    // SafeBag\n    var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));\n    if(password === null) {\n      // no encryption\n      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // bagId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.keyBag).getBytes()),\n        // bagValue\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          // PrivateKeyInfo\n          pkAsn1\n        ]),\n        // bagAttributes (OPTIONAL)\n        bagAttrs\n      ]);\n    } else {\n      // encrypted PrivateKeyInfo\n      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // bagId\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()),\n        // bagValue\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          // EncryptedPrivateKeyInfo\n          pki.encryptPrivateKeyInfo(pkAsn1, password, options)\n        ]),\n        // bagAttributes (OPTIONAL)\n        bagAttrs\n      ]);\n    }\n\n    // SafeContents\n    var keySafeContents =\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]);\n\n    // ContentInfo\n    var keyCI =\n      // PKCS#7 ContentInfo\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // contentType\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          // OID for the content type is 'data'\n          asn1.oidToDer(pki.oids.data).getBytes()),\n        // content\n        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n            asn1.toDer(keySafeContents).getBytes())\n        ])\n      ]);\n    contents.push(keyCI);\n  }\n\n  // create AuthenticatedSafe by stringing together the contents\n  var safe = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, contents);\n\n  var macData;\n  if(options.useMac) {\n    // MacData\n    var sha1 = forge.md.sha1.create();\n    var macSalt = new forge.util.ByteBuffer(\n      forge.random.getBytes(options.saltSize));\n    var count = options.count;\n    // 160-bit key\n    var key = p12.generateKey(password, macSalt, 3, count, 20);\n    var mac = forge.hmac.create();\n    mac.start(sha1, key);\n    mac.update(asn1.toDer(safe).getBytes());\n    var macValue = mac.getMac();\n    macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // mac DigestInfo\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // digestAlgorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          // algorithm = SHA-1\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(pki.oids.sha1).getBytes()),\n          // parameters = Null\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n        ]),\n        // digest\n        asn1.create(\n          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,\n          false, macValue.getBytes())\n      ]),\n      // macSalt OCTET STRING\n      asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macSalt.getBytes()),\n      // iterations INTEGER (XXX: Only support count < 65536)\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        asn1.integerToDer(count).getBytes()\n      )\n    ]);\n  }\n\n  // PFX\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (3)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(3).getBytes()),\n    // PKCS#7 ContentInfo\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // contentType\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        // OID for the content type is 'data'\n        asn1.oidToDer(pki.oids.data).getBytes()),\n      // content\n      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [\n        asn1.create(\n          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n          asn1.toDer(safe).getBytes())\n      ])\n    ]),\n    macData\n  ]);\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\np12.generateKey = forge.pbe.generatePkcs12Key;\n","/**\n * Secure Hash Algorithm with a 1024-bit block size implementation.\n *\n * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For\n * SHA-256 (block size 512 bits), see sha256.js.\n *\n * See FIPS 180-4 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2014-2015 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./md');\nrequire('./util');\n\nvar sha512 = module.exports = forge.sha512 = forge.sha512 || {};\n\n// SHA-512\nforge.md.sha512 = forge.md.algorithms.sha512 = sha512;\n\n// SHA-384\nvar sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};\nsha384.create = function() {\n  return sha512.create('SHA-384');\n};\nforge.md.sha384 = forge.md.algorithms.sha384 = sha384;\n\n// SHA-512/256\nforge.sha512.sha256 = forge.sha512.sha256 || {\n  create: function() {\n    return sha512.create('SHA-512/256');\n  }\n};\nforge.md['sha512/256'] = forge.md.algorithms['sha512/256'] =\n  forge.sha512.sha256;\n\n// SHA-512/224\nforge.sha512.sha224 = forge.sha512.sha224 || {\n  create: function() {\n    return sha512.create('SHA-512/224');\n  }\n};\nforge.md['sha512/224'] = forge.md.algorithms['sha512/224'] =\n  forge.sha512.sha224;\n\n/**\n * Creates a SHA-2 message digest object.\n *\n * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,\n *          SHA-512/256).\n *\n * @return a message digest object.\n */\nsha512.create = function(algorithm) {\n  // do initialization as necessary\n  if(!_initialized) {\n    _init();\n  }\n\n  if(typeof algorithm === 'undefined') {\n    algorithm = 'SHA-512';\n  }\n\n  if(!(algorithm in _states)) {\n    throw new Error('Invalid SHA-512 algorithm: ' + algorithm);\n  }\n\n  // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)\n  var _state = _states[algorithm];\n  var _h = null;\n\n  // input buffer\n  var _input = forge.util.createBuffer();\n\n  // used for 64-bit word storage\n  var _w = new Array(80);\n  for(var wi = 0; wi < 80; ++wi) {\n    _w[wi] = new Array(2);\n  }\n\n  // determine digest length by algorithm name (default)\n  var digestLength = 64;\n  switch(algorithm) {\n    case 'SHA-384':\n      digestLength = 48;\n      break;\n    case 'SHA-512/256':\n      digestLength = 32;\n      break;\n    case 'SHA-512/224':\n      digestLength = 28;\n      break;\n  }\n\n  // message digest object\n  var md = {\n    // SHA-512 => sha512\n    algorithm: algorithm.replace('-', '').toLowerCase(),\n    blockLength: 128,\n    digestLength: digestLength,\n    // 56-bit length of message so far (does not including padding)\n    messageLength: 0,\n    // true message length\n    fullMessageLength: null,\n    // size of message length in bytes\n    messageLengthSize: 16\n  };\n\n  /**\n   * Starts the digest.\n   *\n   * @return this digest object.\n   */\n  md.start = function() {\n    // up to 56-bit message length for convenience\n    md.messageLength = 0;\n\n    // full message length (set md.messageLength128 for backwards-compatibility)\n    md.fullMessageLength = md.messageLength128 = [];\n    var int32s = md.messageLengthSize / 4;\n    for(var i = 0; i < int32s; ++i) {\n      md.fullMessageLength.push(0);\n    }\n    _input = forge.util.createBuffer();\n    _h = new Array(_state.length);\n    for(var i = 0; i < _state.length; ++i) {\n      _h[i] = _state[i].slice(0);\n    }\n    return md;\n  };\n  // start digest automatically for first time\n  md.start();\n\n  /**\n   * Updates the digest with the given message input. The given input can\n   * treated as raw input (no encoding will be applied) or an encoding of\n   * 'utf8' maybe given to encode the input using UTF-8.\n   *\n   * @param msg the message input to update with.\n   * @param encoding the encoding to use (default: 'raw', other: 'utf8').\n   *\n   * @return this digest object.\n   */\n  md.update = function(msg, encoding) {\n    if(encoding === 'utf8') {\n      msg = forge.util.encodeUtf8(msg);\n    }\n\n    // update message length\n    var len = msg.length;\n    md.messageLength += len;\n    len = [(len / 0x100000000) >>> 0, len >>> 0];\n    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {\n      md.fullMessageLength[i] += len[1];\n      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);\n      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;\n      len[0] = ((len[1] / 0x100000000) >>> 0);\n    }\n\n    // add bytes to input buffer\n    _input.putBytes(msg);\n\n    // process bytes\n    _update(_h, _w, _input);\n\n    // compact input buffer every 2K or if empty\n    if(_input.read > 2048 || _input.length() === 0) {\n      _input.compact();\n    }\n\n    return md;\n  };\n\n  /**\n   * Produces the digest.\n   *\n   * @return a byte buffer containing the digest value.\n   */\n  md.digest = function() {\n    /* Note: Here we copy the remaining bytes in the input buffer and\n    add the appropriate SHA-512 padding. Then we do the final update\n    on a copy of the state so that if the user wants to get\n    intermediate digests they can do so. */\n\n    /* Determine the number of bytes that must be added to the message\n    to ensure its length is congruent to 896 mod 1024. In other words,\n    the data to be digested must be a multiple of 1024 bits (or 128 bytes).\n    This data includes the message, some padding, and the length of the\n    message. Since the length of the message will be encoded as 16 bytes (128\n    bits), that means that the last segment of the data must have 112 bytes\n    (896 bits) of message and padding. Therefore, the length of the message\n    plus the padding must be congruent to 896 mod 1024 because\n    1024 - 128 = 896.\n\n    In order to fill up the message length it must be filled with\n    padding that begins with 1 bit followed by all 0 bits. Padding\n    must *always* be present, so if the message length is already\n    congruent to 896 mod 1024, then 1024 padding bits must be added. */\n\n    var finalBlock = forge.util.createBuffer();\n    finalBlock.putBytes(_input.bytes());\n\n    // compute remaining size to be digested (include message length size)\n    var remaining = (\n      md.fullMessageLength[md.fullMessageLength.length - 1] +\n      md.messageLengthSize);\n\n    // add padding for overflow blockSize - overflow\n    // _padding starts with 1 byte with first bit is set (byte value 128), then\n    // there may be up to (blockSize - 1) other pad bytes\n    var overflow = remaining & (md.blockLength - 1);\n    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));\n\n    // serialize message length in bits in big-endian order; since length\n    // is stored in bytes we multiply by 8 and add carry from next int\n    var next, carry;\n    var bits = md.fullMessageLength[0] * 8;\n    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {\n      next = md.fullMessageLength[i + 1] * 8;\n      carry = (next / 0x100000000) >>> 0;\n      bits += carry;\n      finalBlock.putInt32(bits >>> 0);\n      bits = next >>> 0;\n    }\n    finalBlock.putInt32(bits);\n\n    var h = new Array(_h.length);\n    for(var i = 0; i < _h.length; ++i) {\n      h[i] = _h[i].slice(0);\n    }\n    _update(h, _w, finalBlock);\n    var rval = forge.util.createBuffer();\n    var hlen;\n    if(algorithm === 'SHA-512') {\n      hlen = h.length;\n    } else if(algorithm === 'SHA-384') {\n      hlen = h.length - 2;\n    } else {\n      hlen = h.length - 4;\n    }\n    for(var i = 0; i < hlen; ++i) {\n      rval.putInt32(h[i][0]);\n      if(i !== hlen - 1 || algorithm !== 'SHA-512/224') {\n        rval.putInt32(h[i][1]);\n      }\n    }\n    return rval;\n  };\n\n  return md;\n};\n\n// sha-512 padding bytes not initialized yet\nvar _padding = null;\nvar _initialized = false;\n\n// table of constants\nvar _k = null;\n\n// initial hash states\nvar _states = null;\n\n/**\n * Initializes the constant tables.\n */\nfunction _init() {\n  // create padding\n  _padding = String.fromCharCode(128);\n  _padding += forge.util.fillString(String.fromCharCode(0x00), 128);\n\n  // create K table for SHA-512\n  _k = [\n    [0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd],\n    [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc],\n    [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019],\n    [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118],\n    [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe],\n    [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2],\n    [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1],\n    [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694],\n    [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3],\n    [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65],\n    [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483],\n    [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5],\n    [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210],\n    [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4],\n    [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725],\n    [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70],\n    [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926],\n    [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df],\n    [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8],\n    [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b],\n    [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001],\n    [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30],\n    [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910],\n    [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8],\n    [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53],\n    [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8],\n    [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb],\n    [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3],\n    [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60],\n    [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec],\n    [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9],\n    [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b],\n    [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207],\n    [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178],\n    [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6],\n    [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b],\n    [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493],\n    [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c],\n    [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a],\n    [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]\n  ];\n\n  // initial hash states\n  _states = {};\n  _states['SHA-512'] = [\n    [0x6a09e667, 0xf3bcc908],\n    [0xbb67ae85, 0x84caa73b],\n    [0x3c6ef372, 0xfe94f82b],\n    [0xa54ff53a, 0x5f1d36f1],\n    [0x510e527f, 0xade682d1],\n    [0x9b05688c, 0x2b3e6c1f],\n    [0x1f83d9ab, 0xfb41bd6b],\n    [0x5be0cd19, 0x137e2179]\n  ];\n  _states['SHA-384'] = [\n    [0xcbbb9d5d, 0xc1059ed8],\n    [0x629a292a, 0x367cd507],\n    [0x9159015a, 0x3070dd17],\n    [0x152fecd8, 0xf70e5939],\n    [0x67332667, 0xffc00b31],\n    [0x8eb44a87, 0x68581511],\n    [0xdb0c2e0d, 0x64f98fa7],\n    [0x47b5481d, 0xbefa4fa4]\n  ];\n  _states['SHA-512/256'] = [\n    [0x22312194, 0xFC2BF72C],\n    [0x9F555FA3, 0xC84C64C2],\n    [0x2393B86B, 0x6F53B151],\n    [0x96387719, 0x5940EABD],\n    [0x96283EE2, 0xA88EFFE3],\n    [0xBE5E1E25, 0x53863992],\n    [0x2B0199FC, 0x2C85B8AA],\n    [0x0EB72DDC, 0x81C52CA2]\n  ];\n  _states['SHA-512/224'] = [\n    [0x8C3D37C8, 0x19544DA2],\n    [0x73E19966, 0x89DCD4D6],\n    [0x1DFAB7AE, 0x32FF9C82],\n    [0x679DD514, 0x582F9FCF],\n    [0x0F6D2B69, 0x7BD44DA8],\n    [0x77E36F73, 0x04C48942],\n    [0x3F9D85A8, 0x6A1D36C8],\n    [0x1112E6AD, 0x91D692A1]\n  ];\n\n  // now initialized\n  _initialized = true;\n}\n\n/**\n * Updates a SHA-512 state with the given byte buffer.\n *\n * @param s the SHA-512 state to update.\n * @param w the array to use to store words.\n * @param bytes the byte buffer to update with.\n */\nfunction _update(s, w, bytes) {\n  // consume 512 bit (128 byte) chunks\n  var t1_hi, t1_lo;\n  var t2_hi, t2_lo;\n  var s0_hi, s0_lo;\n  var s1_hi, s1_lo;\n  var ch_hi, ch_lo;\n  var maj_hi, maj_lo;\n  var a_hi, a_lo;\n  var b_hi, b_lo;\n  var c_hi, c_lo;\n  var d_hi, d_lo;\n  var e_hi, e_lo;\n  var f_hi, f_lo;\n  var g_hi, g_lo;\n  var h_hi, h_lo;\n  var i, hi, lo, w2, w7, w15, w16;\n  var len = bytes.length();\n  while(len >= 128) {\n    // the w array will be populated with sixteen 64-bit big-endian words\n    // and then extended into 64 64-bit words according to SHA-512\n    for(i = 0; i < 16; ++i) {\n      w[i][0] = bytes.getInt32() >>> 0;\n      w[i][1] = bytes.getInt32() >>> 0;\n    }\n    for(; i < 80; ++i) {\n      // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)\n      w2 = w[i - 2];\n      hi = w2[0];\n      lo = w2[1];\n\n      // high bits\n      t1_hi = (\n        ((hi >>> 19) | (lo << 13)) ^ // ROTR 19\n        ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)\n        (hi >>> 6)) >>> 0; // SHR 6\n      // low bits\n      t1_lo = (\n        ((hi << 13) | (lo >>> 19)) ^ // ROTR 19\n        ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)\n        ((hi << 26) | (lo >>> 6))) >>> 0; // SHR 6\n\n      // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)\n      w15 = w[i - 15];\n      hi = w15[0];\n      lo = w15[1];\n\n      // high bits\n      t2_hi = (\n        ((hi >>> 1) | (lo << 31)) ^ // ROTR 1\n        ((hi >>> 8) | (lo << 24)) ^ // ROTR 8\n        (hi >>> 7)) >>> 0; // SHR 7\n      // low bits\n      t2_lo = (\n        ((hi << 31) | (lo >>> 1)) ^ // ROTR 1\n        ((hi << 24) | (lo >>> 8)) ^ // ROTR 8\n        ((hi << 25) | (lo >>> 7))) >>> 0; // SHR 7\n\n      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)\n      w7 = w[i - 7];\n      w16 = w[i - 16];\n      lo = (t1_lo + w7[1] + t2_lo + w16[1]);\n      w[i][0] = (t1_hi + w7[0] + t2_hi + w16[0] +\n        ((lo / 0x100000000) >>> 0)) >>> 0;\n      w[i][1] = lo >>> 0;\n    }\n\n    // initialize hash value for this chunk\n    a_hi = s[0][0];\n    a_lo = s[0][1];\n    b_hi = s[1][0];\n    b_lo = s[1][1];\n    c_hi = s[2][0];\n    c_lo = s[2][1];\n    d_hi = s[3][0];\n    d_lo = s[3][1];\n    e_hi = s[4][0];\n    e_lo = s[4][1];\n    f_hi = s[5][0];\n    f_lo = s[5][1];\n    g_hi = s[6][0];\n    g_lo = s[6][1];\n    h_hi = s[7][0];\n    h_lo = s[7][1];\n\n    // round function\n    for(i = 0; i < 80; ++i) {\n      // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)\n      s1_hi = (\n        ((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14\n        ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18\n        ((e_lo >>> 9) | (e_hi << 23))) >>> 0; // ROTR 41/(swap + ROTR 9)\n      s1_lo = (\n        ((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14\n        ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18\n        ((e_lo << 23) | (e_hi >>> 9))) >>> 0; // ROTR 41/(swap + ROTR 9)\n\n      // Ch(e, f, g) (optimized the same way as SHA-1)\n      ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;\n      ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;\n\n      // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)\n      s0_hi = (\n        ((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28\n        ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)\n        ((a_lo >>> 7) | (a_hi << 25))) >>> 0; // ROTR 39/(swap + ROTR 7)\n      s0_lo = (\n        ((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28\n        ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)\n        ((a_lo << 25) | (a_hi >>> 7))) >>> 0; // ROTR 39/(swap + ROTR 7)\n\n      // Maj(a, b, c) (optimized the same way as SHA-1)\n      maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;\n      maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;\n\n      // main algorithm\n      // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)\n      lo = (h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1]);\n      t1_hi = (h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] +\n        ((lo / 0x100000000) >>> 0)) >>> 0;\n      t1_lo = lo >>> 0;\n\n      // t2 = s0 + maj modulo 2^64 (carry lo overflow)\n      lo = s0_lo + maj_lo;\n      t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n      t2_lo = lo >>> 0;\n\n      h_hi = g_hi;\n      h_lo = g_lo;\n\n      g_hi = f_hi;\n      g_lo = f_lo;\n\n      f_hi = e_hi;\n      f_lo = e_lo;\n\n      // e = (d + t1) modulo 2^64 (carry lo overflow)\n      lo = d_lo + t1_lo;\n      e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n      e_lo = lo >>> 0;\n\n      d_hi = c_hi;\n      d_lo = c_lo;\n\n      c_hi = b_hi;\n      c_lo = b_lo;\n\n      b_hi = a_hi;\n      b_lo = a_lo;\n\n      // a = (t1 + t2) modulo 2^64 (carry lo overflow)\n      lo = t1_lo + t2_lo;\n      a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n      a_lo = lo >>> 0;\n    }\n\n    // update hash state (additional modulo 2^64)\n    lo = s[0][1] + a_lo;\n    s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[0][1] = lo >>> 0;\n\n    lo = s[1][1] + b_lo;\n    s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[1][1] = lo >>> 0;\n\n    lo = s[2][1] + c_lo;\n    s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[2][1] = lo >>> 0;\n\n    lo = s[3][1] + d_lo;\n    s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[3][1] = lo >>> 0;\n\n    lo = s[4][1] + e_lo;\n    s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[4][1] = lo >>> 0;\n\n    lo = s[5][1] + f_lo;\n    s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[5][1] = lo >>> 0;\n\n    lo = s[6][1] + g_lo;\n    s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[6][1] = lo >>> 0;\n\n    lo = s[7][1] + h_lo;\n    s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;\n    s[7][1] = lo >>> 0;\n\n    len -= 128;\n  }\n}\n"],"sourceRoot":""}