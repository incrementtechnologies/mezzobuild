{"version":3,"sources":["webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/ssh.js","webpack:///./node_modules/google-p12-pem/node_modules/node-forge/lib/task.js"],"names":["forge","ssh","module","exports","_addBigIntegerToBuffer","buffer","val","hexVal","toString","bytes","util","hexToBytes","putInt32","length","putBytes","_addStringToBuffer","putString","_sha1","sha","md","sha1","create","num","arguments","i","update","digest","privateKeyToPutty","privateKey","passphrase","comment","algorithm","encryptionAlgorithm","ppk","pubbuffer","createBuffer","e","n","pub","encode64","Math","floor","priv","privbuffer","d","p","q","qInv","encLen","padding","truncate","putBuffer","aeskey","cipher","aes","createEncryptionCipher","start","fillWithByte","copy","finish","encrypted","output","mackey","macbuffer","hmac","toHex","publicKeyToOpenSSH","key","type","privateKeyToOpenSSH","pki","encryptRsaPrivateKey","legacy","privateKeyToPem","getPublicKeyFingerprint","options","md5","getBytes","encoding","hex","delimiter","match","join","Error","cat","sVL","sTasks","sNextTaskId","debug","set","sTaskQueues","sNoTaskName","sMaxRecursions","sTimeSlice","READY","RUNNING","BLOCKED","SLEEPING","DONE","ERROR","STOP","START","BLOCK","UNBLOCK","SLEEP","WAKEUP","CANCEL","FAIL","sStateTable","Task","this","id","name","parent","run","subtasks","error","state","blocks","timeoutId","swapTime","userData","log","verbose","prototype","msg","next","subrun","subtask","successCallback","failureCallback","push","parallel","isArray","task","ptask","block","startParallelTask","pname","pi","success","unblock","failure","stop","Date","runNext","sleep","self","setTimeout","wait","cond","wakeup","cancelTimeout","cancel","permitsNeeded","fail","recurse","swap","doNext","shift","suppressCallbacks","createCondition","tasks","tmp"],"mappings":"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","file":"js/chunk-vendors~2dbb5110.27032060.js","sourcesContent":["/**\n * Functions to output keys in SSH-friendly formats.\n *\n * This is part of the Forge project which may be used under the terms of\n * either the BSD License or the GNU General Public License (GPL) Version 2.\n *\n * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE\n *\n * @author https://github.com/shellac\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./hmac');\nrequire('./md5');\nrequire('./sha1');\nrequire('./util');\n\nvar ssh = module.exports = forge.ssh = forge.ssh || {};\n\n/**\n * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.\n *\n * @param privateKey the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n * @param comment a comment to include in the key file.\n *\n * @return the PPK file as a string.\n */\nssh.privateKeyToPutty = function(privateKey, passphrase, comment) {\n  comment = comment || '';\n  passphrase = passphrase || '';\n  var algorithm = 'ssh-rsa';\n  var encryptionAlgorithm = (passphrase === '') ? 'none' : 'aes256-cbc';\n\n  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\\r\\n';\n  ppk += 'Encryption: ' + encryptionAlgorithm + '\\r\\n';\n  ppk += 'Comment: ' + comment + '\\r\\n';\n\n  // public key into buffer for ppk\n  var pubbuffer = forge.util.createBuffer();\n  _addStringToBuffer(pubbuffer, algorithm);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.e);\n  _addBigIntegerToBuffer(pubbuffer, privateKey.n);\n\n  // write public key\n  var pub = forge.util.encode64(pubbuffer.bytes(), 64);\n  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \\r\\n\n  ppk += 'Public-Lines: ' + length + '\\r\\n';\n  ppk += pub;\n\n  // private key into a buffer\n  var privbuffer = forge.util.createBuffer();\n  _addBigIntegerToBuffer(privbuffer, privateKey.d);\n  _addBigIntegerToBuffer(privbuffer, privateKey.p);\n  _addBigIntegerToBuffer(privbuffer, privateKey.q);\n  _addBigIntegerToBuffer(privbuffer, privateKey.qInv);\n\n  // optionally encrypt the private key\n  var priv;\n  if(!passphrase) {\n    // use the unencrypted buffer\n    priv = forge.util.encode64(privbuffer.bytes(), 64);\n  } else {\n    // encrypt RSA key using passphrase\n    var encLen = privbuffer.length() + 16 - 1;\n    encLen -= encLen % 16;\n\n    // pad private key with sha1-d data -- needs to be a multiple of 16\n    var padding = _sha1(privbuffer.bytes());\n\n    padding.truncate(padding.length() - encLen + privbuffer.length());\n    privbuffer.putBuffer(padding);\n\n    var aeskey = forge.util.createBuffer();\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x00', passphrase));\n    aeskey.putBuffer(_sha1('\\x00\\x00\\x00\\x01', passphrase));\n\n    // encrypt some bytes using CBC mode\n    // key is 40 bytes, so truncate *by* 8 bytes\n    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');\n    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));\n    cipher.update(privbuffer.copy());\n    cipher.finish();\n    var encrypted = cipher.output;\n\n    // Note: this appears to differ from Putty -- is forge wrong, or putty?\n    // due to padding we finish as an exact multiple of 16\n    encrypted.truncate(16); // all padding\n\n    priv = forge.util.encode64(encrypted.bytes(), 64);\n  }\n\n  // output private key\n  length = Math.floor(priv.length / 66) + 1; // 64 + \\r\\n\n  ppk += '\\r\\nPrivate-Lines: ' + length + '\\r\\n';\n  ppk += priv;\n\n  // MAC\n  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);\n\n  var macbuffer = forge.util.createBuffer();\n  _addStringToBuffer(macbuffer, algorithm);\n  _addStringToBuffer(macbuffer, encryptionAlgorithm);\n  _addStringToBuffer(macbuffer, comment);\n  macbuffer.putInt32(pubbuffer.length());\n  macbuffer.putBuffer(pubbuffer);\n  macbuffer.putInt32(privbuffer.length());\n  macbuffer.putBuffer(privbuffer);\n\n  var hmac = forge.hmac.create();\n  hmac.start('sha1', mackey);\n  hmac.update(macbuffer.bytes());\n\n  ppk += '\\r\\nPrivate-MAC: ' + hmac.digest().toHex() + '\\r\\n';\n\n  return ppk;\n};\n\n/**\n * Encodes a public RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param comment a comment.\n *\n * @return the public key in OpenSSH format.\n */\nssh.publicKeyToOpenSSH = function(key, comment) {\n  var type = 'ssh-rsa';\n  comment = comment || '';\n\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;\n};\n\n/**\n * Encodes a private RSA key as an OpenSSH file.\n *\n * @param key the key.\n * @param passphrase a passphrase to protect the key (falsy for no encryption).\n *\n * @return the public key in OpenSSH format.\n */\nssh.privateKeyToOpenSSH = function(privateKey, passphrase) {\n  if(!passphrase) {\n    return forge.pki.privateKeyToPem(privateKey);\n  }\n  // OpenSSH private key is just a legacy format, it seems\n  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase,\n    {legacy: true, algorithm: 'aes128'});\n};\n\n/**\n * Gets the SSH fingerprint for the given public key.\n *\n * @param options the options to use.\n *          [md] the message digest object to use (defaults to forge.md.md5).\n *          [encoding] an alternative output encoding, such as 'hex'\n *            (defaults to none, outputs a byte buffer).\n *          [delimiter] the delimiter to use between bytes for 'hex' encoded\n *            output, eg: ':' (defaults to none).\n *\n * @return the fingerprint as a byte buffer or other encoding based on options.\n */\nssh.getPublicKeyFingerprint = function(key, options) {\n  options = options || {};\n  var md = options.md || forge.md.md5.create();\n\n  var type = 'ssh-rsa';\n  var buffer = forge.util.createBuffer();\n  _addStringToBuffer(buffer, type);\n  _addBigIntegerToBuffer(buffer, key.e);\n  _addBigIntegerToBuffer(buffer, key.n);\n\n  // hash public key bytes\n  md.start();\n  md.update(buffer.getBytes());\n  var digest = md.digest();\n  if(options.encoding === 'hex') {\n    var hex = digest.toHex();\n    if(options.delimiter) {\n      return hex.match(/.{2}/g).join(options.delimiter);\n    }\n    return hex;\n  } else if(options.encoding === 'binary') {\n    return digest.getBytes();\n  } else if(options.encoding) {\n    throw new Error('Unknown encoding \"' + options.encoding + '\".');\n  }\n  return digest;\n};\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a big integer.\n */\nfunction _addBigIntegerToBuffer(buffer, val) {\n  var hexVal = val.toString(16);\n  // ensure 2s complement +ve\n  if(hexVal[0] >= '8') {\n    hexVal = '00' + hexVal;\n  }\n  var bytes = forge.util.hexToBytes(hexVal);\n  buffer.putInt32(bytes.length);\n  buffer.putBytes(bytes);\n}\n\n/**\n * Adds len(val) then val to a buffer.\n *\n * @param buffer the buffer to add to.\n * @param val a string.\n */\nfunction _addStringToBuffer(buffer, val) {\n  buffer.putInt32(val.length);\n  buffer.putString(val);\n}\n\n/**\n * Hashes the arguments into one value using SHA-1.\n *\n * @return the sha1 hash of the provided arguments.\n */\nfunction _sha1() {\n  var sha = forge.md.sha1.create();\n  var num = arguments.length;\n  for (var i = 0; i < num; ++i) {\n    sha.update(arguments[i]);\n  }\n  return sha.digest();\n}\n","/**\n * Support for concurrent task management and synchronization in web\n * applications.\n *\n * @author Dave Longley\n * @author David I. Lehn <dlehn@digitalbazaar.com>\n *\n * Copyright (c) 2009-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./debug');\nrequire('./log');\nrequire('./util');\n\n// logging category\nvar cat = 'forge.task';\n\n// verbose level\n// 0: off, 1: a little, 2: a whole lot\n// Verbose debug logging is surrounded by a level check to avoid the\n// performance issues with even calling the logging code regardless if it\n// is actually logged.  For performance reasons this should not be set to 2\n// for production use.\n// ex: if(sVL >= 2) forge.log.verbose(....)\nvar sVL = 0;\n\n// track tasks for debugging\nvar sTasks = {};\nvar sNextTaskId = 0;\n// debug access\nforge.debug.set(cat, 'tasks', sTasks);\n\n// a map of task type to task queue\nvar sTaskQueues = {};\n// debug access\nforge.debug.set(cat, 'queues', sTaskQueues);\n\n// name for unnamed tasks\nvar sNoTaskName = '?';\n\n// maximum number of doNext() recursions before a context swap occurs\n// FIXME: might need to tweak this based on the browser\nvar sMaxRecursions = 30;\n\n// time slice for doing tasks before a context swap occurs\n// FIXME: might need to tweak this based on the browser\nvar sTimeSlice = 20;\n\n/**\n * Task states.\n *\n * READY: ready to start processing\n * RUNNING: task or a subtask is running\n * BLOCKED: task is waiting to acquire N permits to continue\n * SLEEPING: task is sleeping for a period of time\n * DONE: task is done\n * ERROR: task has an error\n */\nvar READY = 'ready';\nvar RUNNING = 'running';\nvar BLOCKED = 'blocked';\nvar SLEEPING = 'sleeping';\nvar DONE = 'done';\nvar ERROR = 'error';\n\n/**\n * Task actions.  Used to control state transitions.\n *\n * STOP: stop processing\n * START: start processing tasks\n * BLOCK: block task from continuing until 1 or more permits are released\n * UNBLOCK: release one or more permits\n * SLEEP: sleep for a period of time\n * WAKEUP: wakeup early from SLEEPING state\n * CANCEL: cancel further tasks\n * FAIL: a failure occured\n */\nvar STOP = 'stop';\nvar START = 'start';\nvar BLOCK = 'block';\nvar UNBLOCK = 'unblock';\nvar SLEEP = 'sleep';\nvar WAKEUP = 'wakeup';\nvar CANCEL = 'cancel';\nvar FAIL = 'fail';\n\n/**\n * State transition table.\n *\n * nextState = sStateTable[currentState][action]\n */\nvar sStateTable = {};\n\nsStateTable[READY] = {};\nsStateTable[READY][STOP] = READY;\nsStateTable[READY][START] = RUNNING;\nsStateTable[READY][CANCEL] = DONE;\nsStateTable[READY][FAIL] = ERROR;\n\nsStateTable[RUNNING] = {};\nsStateTable[RUNNING][STOP] = READY;\nsStateTable[RUNNING][START] = RUNNING;\nsStateTable[RUNNING][BLOCK] = BLOCKED;\nsStateTable[RUNNING][UNBLOCK] = RUNNING;\nsStateTable[RUNNING][SLEEP] = SLEEPING;\nsStateTable[RUNNING][WAKEUP] = RUNNING;\nsStateTable[RUNNING][CANCEL] = DONE;\nsStateTable[RUNNING][FAIL] = ERROR;\n\nsStateTable[BLOCKED] = {};\nsStateTable[BLOCKED][STOP] = BLOCKED;\nsStateTable[BLOCKED][START] = BLOCKED;\nsStateTable[BLOCKED][BLOCK] = BLOCKED;\nsStateTable[BLOCKED][UNBLOCK] = BLOCKED;\nsStateTable[BLOCKED][SLEEP] = BLOCKED;\nsStateTable[BLOCKED][WAKEUP] = BLOCKED;\nsStateTable[BLOCKED][CANCEL] = DONE;\nsStateTable[BLOCKED][FAIL] = ERROR;\n\nsStateTable[SLEEPING] = {};\nsStateTable[SLEEPING][STOP] = SLEEPING;\nsStateTable[SLEEPING][START] = SLEEPING;\nsStateTable[SLEEPING][BLOCK] = SLEEPING;\nsStateTable[SLEEPING][UNBLOCK] = SLEEPING;\nsStateTable[SLEEPING][SLEEP] = SLEEPING;\nsStateTable[SLEEPING][WAKEUP] = SLEEPING;\nsStateTable[SLEEPING][CANCEL] = DONE;\nsStateTable[SLEEPING][FAIL] = ERROR;\n\nsStateTable[DONE] = {};\nsStateTable[DONE][STOP] = DONE;\nsStateTable[DONE][START] = DONE;\nsStateTable[DONE][BLOCK] = DONE;\nsStateTable[DONE][UNBLOCK] = DONE;\nsStateTable[DONE][SLEEP] = DONE;\nsStateTable[DONE][WAKEUP] = DONE;\nsStateTable[DONE][CANCEL] = DONE;\nsStateTable[DONE][FAIL] = ERROR;\n\nsStateTable[ERROR] = {};\nsStateTable[ERROR][STOP] = ERROR;\nsStateTable[ERROR][START] = ERROR;\nsStateTable[ERROR][BLOCK] = ERROR;\nsStateTable[ERROR][UNBLOCK] = ERROR;\nsStateTable[ERROR][SLEEP] = ERROR;\nsStateTable[ERROR][WAKEUP] = ERROR;\nsStateTable[ERROR][CANCEL] = ERROR;\nsStateTable[ERROR][FAIL] = ERROR;\n\n/**\n * Creates a new task.\n *\n * @param options options for this task\n *   run: the run function for the task (required)\n *   name: the run function for the task (optional)\n *   parent: parent of this task (optional)\n *\n * @return the empty task.\n */\nvar Task = function(options) {\n  // task id\n  this.id = -1;\n\n  // task name\n  this.name = options.name || sNoTaskName;\n\n  // task has no parent\n  this.parent = options.parent || null;\n\n  // save run function\n  this.run = options.run;\n\n  // create a queue of subtasks to run\n  this.subtasks = [];\n\n  // error flag\n  this.error = false;\n\n  // state of the task\n  this.state = READY;\n\n  // number of times the task has been blocked (also the number\n  // of permits needed to be released to continue running)\n  this.blocks = 0;\n\n  // timeout id when sleeping\n  this.timeoutId = null;\n\n  // no swap time yet\n  this.swapTime = null;\n\n  // no user data\n  this.userData = null;\n\n  // initialize task\n  // FIXME: deal with overflow\n  this.id = sNextTaskId++;\n  sTasks[this.id] = this;\n  if(sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] init', this.id, this.name, this);\n  }\n};\n\n/**\n * Logs debug information on this task and the system state.\n */\nTask.prototype.debug = function(msg) {\n  msg = msg || '';\n  forge.log.debug(cat, msg,\n    '[%s][%s] task:', this.id, this.name, this,\n    'subtasks:', this.subtasks.length,\n    'queue:', sTaskQueues);\n};\n\n/**\n * Adds a subtask to run after task.doNext() or task.fail() is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun a function to run that takes the current task as\n *          its first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\nTask.prototype.next = function(name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if(typeof(name) === 'function') {\n    subrun = name;\n\n    // inherit parent's name\n    name = this.name;\n  }\n  // create subtask, set parent to this task, propagate callbacks\n  var subtask = new Task({\n    run: subrun,\n    name: name,\n    parent: this\n  });\n  // start subtasks running\n  subtask.state = RUNNING;\n  subtask.type = this.type;\n  subtask.successCallback = this.successCallback || null;\n  subtask.failureCallback = this.failureCallback || null;\n\n  // queue a new subtask\n  this.subtasks.push(subtask);\n\n  return this;\n};\n\n/**\n * Adds subtasks to run in parallel after task.doNext() or task.fail()\n * is called.\n *\n * @param name human readable name for this task (optional).\n * @param subrun functions to run that take the current task as\n *          their first parameter.\n *\n * @return the current task (useful for chaining next() calls).\n */\nTask.prototype.parallel = function(name, subrun) {\n  // juggle parameters if it looks like no name is given\n  if(forge.util.isArray(name)) {\n    subrun = name;\n\n    // inherit parent's name\n    name = this.name;\n  }\n  // Wrap parallel tasks in a regular task so they are started at the\n  // proper time.\n  return this.next(name, function(task) {\n    // block waiting for subtasks\n    var ptask = task;\n    ptask.block(subrun.length);\n\n    // we pass the iterator from the loop below as a parameter\n    // to a function because it is otherwise included in the\n    // closure and changes as the loop changes -- causing i\n    // to always be set to its highest value\n    var startParallelTask = function(pname, pi) {\n      forge.task.start({\n        type: pname,\n        run: function(task) {\n           subrun[pi](task);\n        },\n        success: function(task) {\n           ptask.unblock();\n        },\n        failure: function(task) {\n           ptask.unblock();\n        }\n      });\n    };\n\n    for(var i = 0; i < subrun.length; i++) {\n      // Type must be unique so task starts in parallel:\n      //    name + private string + task id + sub-task index\n      // start tasks in parallel and unblock when the finish\n      var pname = name + '__parallel-' + task.id + '-' + i;\n      var pi = i;\n      startParallelTask(pname, pi);\n    }\n  });\n};\n\n/**\n * Stops a running task.\n */\nTask.prototype.stop = function() {\n  this.state = sStateTable[this.state][STOP];\n};\n\n/**\n * Starts running a task.\n */\nTask.prototype.start = function() {\n  this.error = false;\n  this.state = sStateTable[this.state][START];\n\n  // try to restart\n  if(this.state === RUNNING) {\n    this.start = new Date();\n    this.run(this);\n    runNext(this, 0);\n  }\n};\n\n/**\n * Blocks a task until it one or more permits have been released. The\n * task will not resume until the requested number of permits have\n * been released with call(s) to unblock().\n *\n * @param n number of permits to wait for(default: 1).\n */\nTask.prototype.block = function(n) {\n  n = typeof(n) === 'undefined' ? 1 : n;\n  this.blocks += n;\n  if(this.blocks > 0) {\n    this.state = sStateTable[this.state][BLOCK];\n  }\n};\n\n/**\n * Releases a permit to unblock a task. If a task was blocked by\n * requesting N permits via block(), then it will only continue\n * running once enough permits have been released via unblock() calls.\n *\n * If multiple processes need to synchronize with a single task then\n * use a condition variable (see forge.task.createCondition). It is\n * an error to unblock a task more times than it has been blocked.\n *\n * @param n number of permits to release (default: 1).\n *\n * @return the current block count (task is unblocked when count is 0)\n */\nTask.prototype.unblock = function(n) {\n  n = typeof(n) === 'undefined' ? 1 : n;\n  this.blocks -= n;\n  if(this.blocks === 0 && this.state !== DONE) {\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n  return this.blocks;\n};\n\n/**\n * Sleep for a period of time before resuming tasks.\n *\n * @param n number of milliseconds to sleep (default: 0).\n */\nTask.prototype.sleep = function(n) {\n  n = typeof(n) === 'undefined' ? 0 : n;\n  this.state = sStateTable[this.state][SLEEP];\n  var self = this;\n  this.timeoutId = setTimeout(function() {\n    self.timeoutId = null;\n    self.state = RUNNING;\n    runNext(self, 0);\n  }, n);\n};\n\n/**\n * Waits on a condition variable until notified. The next task will\n * not be scheduled until notification. A condition variable can be\n * created with forge.task.createCondition().\n *\n * Once cond.notify() is called, the task will continue.\n *\n * @param cond the condition variable to wait on.\n */\nTask.prototype.wait = function(cond) {\n  cond.wait(this);\n};\n\n/**\n * If sleeping, wakeup and continue running tasks.\n */\nTask.prototype.wakeup = function() {\n  if(this.state === SLEEPING) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n    this.state = RUNNING;\n    runNext(this, 0);\n  }\n};\n\n/**\n * Cancel all remaining subtasks of this task.\n */\nTask.prototype.cancel = function() {\n  this.state = sStateTable[this.state][CANCEL];\n  // remove permits needed\n  this.permitsNeeded = 0;\n  // cancel timeouts\n  if(this.timeoutId !== null) {\n    cancelTimeout(this.timeoutId);\n    this.timeoutId = null;\n  }\n  // remove subtasks\n  this.subtasks = [];\n};\n\n/**\n * Finishes this task with failure and sets error flag. The entire\n * task will be aborted unless the next task that should execute\n * is passed as a parameter. This allows levels of subtasks to be\n * skipped. For instance, to abort only this tasks's subtasks, then\n * call fail(task.parent). To abort this task's subtasks and its\n * parent's subtasks, call fail(task.parent.parent). To abort\n * all tasks and simply call the task callback, call fail() or\n * fail(null).\n *\n * The task callback (success or failure) will always, eventually, be\n * called.\n *\n * @param next the task to continue at, or null to abort entirely.\n */\nTask.prototype.fail = function(next) {\n  // set error flag\n  this.error = true;\n\n  // finish task\n  finish(this, true);\n\n  if(next) {\n    // propagate task info\n    next.error = this.error;\n    next.swapTime = this.swapTime;\n    next.userData = this.userData;\n\n    // do next task as specified\n    runNext(next, 0);\n  } else {\n    if(this.parent !== null) {\n      // finish root task (ensures it is removed from task queue)\n      var parent = this.parent;\n      while(parent.parent !== null) {\n        // propagate task info\n        parent.error = this.error;\n        parent.swapTime = this.swapTime;\n        parent.userData = this.userData;\n        parent = parent.parent;\n      }\n      finish(parent, true);\n    }\n\n    // call failure callback if one exists\n    if(this.failureCallback) {\n      this.failureCallback(this);\n    }\n  }\n};\n\n/**\n * Asynchronously start a task.\n *\n * @param task the task to start.\n */\nvar start = function(task) {\n  task.error = false;\n  task.state = sStateTable[task.state][START];\n  setTimeout(function() {\n    if(task.state === RUNNING) {\n      task.swapTime = +new Date();\n      task.run(task);\n      runNext(task, 0);\n    }\n  }, 0);\n};\n\n/**\n * Run the next subtask or finish this task.\n *\n * @param task the task to process.\n * @param recurse the recursion count.\n */\nvar runNext = function(task, recurse) {\n  // get time since last context swap (ms), if enough time has passed set\n  // swap to true to indicate that doNext was performed asynchronously\n  // also, if recurse is too high do asynchronously\n  var swap =\n    (recurse > sMaxRecursions) ||\n    (+new Date() - task.swapTime) > sTimeSlice;\n\n  var doNext = function(recurse) {\n    recurse++;\n    if(task.state === RUNNING) {\n      if(swap) {\n        // update swap time\n        task.swapTime = +new Date();\n      }\n\n      if(task.subtasks.length > 0) {\n        // run next subtask\n        var subtask = task.subtasks.shift();\n        subtask.error = task.error;\n        subtask.swapTime = task.swapTime;\n        subtask.userData = task.userData;\n        subtask.run(subtask);\n        if(!subtask.error) {\n           runNext(subtask, recurse);\n        }\n      } else {\n        finish(task);\n\n        if(!task.error) {\n          // chain back up and run parent\n          if(task.parent !== null) {\n            // propagate task info\n            task.parent.error = task.error;\n            task.parent.swapTime = task.swapTime;\n            task.parent.userData = task.userData;\n\n            // no subtasks left, call run next subtask on parent\n            runNext(task.parent, recurse);\n          }\n        }\n      }\n    }\n  };\n\n  if(swap) {\n    // we're swapping, so run asynchronously\n    setTimeout(doNext, 0);\n  } else {\n    // not swapping, so run synchronously\n    doNext(recurse);\n  }\n};\n\n/**\n * Finishes a task and looks for the next task in the queue to start.\n *\n * @param task the task to finish.\n * @param suppressCallbacks true to suppress callbacks.\n */\nvar finish = function(task, suppressCallbacks) {\n  // subtask is now done\n  task.state = DONE;\n\n  delete sTasks[task.id];\n  if(sVL >= 1) {\n    forge.log.verbose(cat, '[%s][%s] finish',\n      task.id, task.name, task);\n  }\n\n  // only do queue processing for root tasks\n  if(task.parent === null) {\n    // report error if queue is missing\n    if(!(task.type in sTaskQueues)) {\n      forge.log.error(cat,\n        '[%s][%s] task queue missing [%s]',\n        task.id, task.name, task.type);\n    } else if(sTaskQueues[task.type].length === 0) {\n      // report error if queue is empty\n      forge.log.error(cat,\n        '[%s][%s] task queue empty [%s]',\n        task.id, task.name, task.type);\n    } else if(sTaskQueues[task.type][0] !== task) {\n      // report error if this task isn't the first in the queue\n      forge.log.error(cat,\n        '[%s][%s] task not first in queue [%s]',\n        task.id, task.name, task.type);\n    } else {\n      // remove ourselves from the queue\n      sTaskQueues[task.type].shift();\n      // clean up queue if it is empty\n      if(sTaskQueues[task.type].length === 0) {\n        if(sVL >= 1) {\n          forge.log.verbose(cat, '[%s][%s] delete queue [%s]',\n            task.id, task.name, task.type);\n        }\n        /* Note: Only a task can delete a queue of its own type. This\n         is used as a way to synchronize tasks. If a queue for a certain\n         task type exists, then a task of that type is running.\n         */\n        delete sTaskQueues[task.type];\n      } else {\n        // dequeue the next task and start it\n        if(sVL >= 1) {\n          forge.log.verbose(cat,\n            '[%s][%s] queue start next [%s] remain:%s',\n            task.id, task.name, task.type,\n            sTaskQueues[task.type].length);\n        }\n        sTaskQueues[task.type][0].start();\n      }\n    }\n\n    if(!suppressCallbacks) {\n      // call final callback if one exists\n      if(task.error && task.failureCallback) {\n        task.failureCallback(task);\n      } else if(!task.error && task.successCallback) {\n        task.successCallback(task);\n      }\n    }\n  }\n};\n\n/* Tasks API */\nmodule.exports = forge.task = forge.task || {};\n\n/**\n * Starts a new task that will run the passed function asynchronously.\n *\n * In order to finish the task, either task.doNext() or task.fail()\n * *must* be called.\n *\n * The task must have a type (a string identifier) that can be used to\n * synchronize it with other tasks of the same type. That type can also\n * be used to cancel tasks that haven't started yet.\n *\n * To start a task, the following object must be provided as a parameter\n * (each function takes a task object as its first parameter):\n *\n * {\n *   type: the type of task.\n *   run: the function to run to execute the task.\n *   success: a callback to call when the task succeeds (optional).\n *   failure: a callback to call when the task fails (optional).\n * }\n *\n * @param options the object as described above.\n */\nforge.task.start = function(options) {\n  // create a new task\n  var task = new Task({\n    run: options.run,\n    name: options.name || sNoTaskName\n  });\n  task.type = options.type;\n  task.successCallback = options.success || null;\n  task.failureCallback = options.failure || null;\n\n  // append the task onto the appropriate queue\n  if(!(task.type in sTaskQueues)) {\n    if(sVL >= 1) {\n      forge.log.verbose(cat, '[%s][%s] create queue [%s]',\n        task.id, task.name, task.type);\n    }\n    // create the queue with the new task\n    sTaskQueues[task.type] = [task];\n    start(task);\n  } else {\n    // push the task onto the queue, it will be run after a task\n    // with the same type completes\n    sTaskQueues[options.type].push(task);\n  }\n};\n\n/**\n * Cancels all tasks of the given type that haven't started yet.\n *\n * @param type the type of task to cancel.\n */\nforge.task.cancel = function(type) {\n  // find the task queue\n  if(type in sTaskQueues) {\n    // empty all but the current task from the queue\n    sTaskQueues[type] = [sTaskQueues[type][0]];\n  }\n};\n\n/**\n * Creates a condition variable to synchronize tasks. To make a task wait\n * on the condition variable, call task.wait(condition). To notify all\n * tasks that are waiting, call condition.notify().\n *\n * @return the condition variable.\n */\nforge.task.createCondition = function() {\n  var cond = {\n    // all tasks that are blocked\n    tasks: {}\n  };\n\n  /**\n   * Causes the given task to block until notify is called. If the task\n   * is already waiting on this condition then this is a no-op.\n   *\n   * @param task the task to cause to wait.\n   */\n  cond.wait = function(task) {\n    // only block once\n    if(!(task.id in cond.tasks)) {\n       task.block();\n       cond.tasks[task.id] = task;\n    }\n  };\n\n  /**\n   * Notifies all waiting tasks to wake up.\n   */\n  cond.notify = function() {\n    // since unblock() will run the next task from here, make sure to\n    // clear the condition's blocked task list before unblocking\n    var tmp = cond.tasks;\n    cond.tasks = {};\n    for(var id in tmp) {\n      tmp[id].unblock();\n    }\n  };\n\n  return cond;\n};\n"],"sourceRoot":""}