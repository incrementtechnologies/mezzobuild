{"version":3,"sources":["webpack:///./node_modules/google-spreadsheet/lib/GoogleSpreadsheetCell.js","webpack:///./node_modules/google-spreadsheet/lib/utils.js","webpack:///./node_modules/google-spreadsheet/lib/GoogleSpreadsheetRow.js","webpack:///./node_modules/google-spreadsheet/lib/GoogleSpreadsheetWorksheet.js","webpack:///./node_modules/google-spreadsheet/lib/errors.js","webpack:///./node_modules/google-spreadsheet/index.js","webpack:///./node_modules/google-spreadsheet/lib/GoogleSpreadsheet.js","webpack:///./node_modules/gtoken/build/src/index.js"],"names":["_","columnToLetter","GoogleSpreadsheetFormulaError","GoogleSpreadsheetCell","parentSheet","rowIndex","columnIndex","cellData","this","_sheet","_row","_column","_updateRawData","newData","_rawData","_draftData","_error","get","effectiveValue","errorValue","a1Column","a1Row","undefined","value","Error","values","newValue","isBoolean","valueType","isString","substr","isFinite","isNil","keys","formattedValue","newVal","hyperlink","val","note","userEnteredFormat","effectiveFormat","param","Object","freeze","isEqual","unset","set","clearFormat","_getFormatParam","_setFormatParam","length","saveUpdatedCells","isValueUpdated","isNoteUpdated","isFormatUpdated","isFormatCleared","some","format","updateCells","rows","userEnteredValue","fields","pickBy","join","start","sheetId","module","exports","getFieldMask","obj","column","temp","letter","col","String","fromCharCode","letterToColumn","i","charCodeAt","GoogleSpreadsheetRow","rowNumber","data","_rowNumber","headerValues","propName","defineProperty","enumerable","a1SheetName","options","_deleted","response","_spreadsheet","axios","request","method","url","encodeURIComponent","a1Range","params","valueInputOption","raw","includeValuesInResponse","range","majorDimension","updatedData","result","_makeSingleUpdateRequest","startRowIndex","endRowIndex","shiftDimension","delete","checkForDuplicateHeaders","headers","checkForDupes","groupBy","each","grouped","header","GoogleSpreadsheetWorksheet","parentSpreadsheet","properties","_rawProperties","_cells","_rowMetadata","_columnMetadata","_fillCellData","requestType","requestParams","dataOnly","dataRanges","startRow","startColumn","numRows","rowMetadata","numColumns","columnMetadata","actualRow","j","actualColumn","_ensureInfoLoaded","_getProp","_setProp","gridProperties","rowCount","columnCount","title","replace","allCells","flatten","compact","nonEmpty","filter","c","loaded","total","a1Address","split","match","parseInt","getCell","sheetFilters","loadCells","filtersArray","isArray","map","startsWith","isObject","cellsToSave","_isDirty","saveCells","cellsToUpdate","requests","cell","_getUpdateRequest","responseRanges","_makeBatchUpdateRequest","getCellsInRange","lastColumnLetter","trim","trimmedHeaderValues","h","encodedA1SheetName","times","includes","loadHeaderRow","rowsAsArrays","row","rowAsArray","push","insertDataOption","insert","updatedRange","updates","rowValues","addRows","offset","limit","firstRow","lastRow","lastColumn","rawRows","rowNum","updateProperties","updateGridProperties","columnsOrRows","bounds","dimension","startIndex","endIndex","mergeType","deleteSheet","destinationSpreadsheetId","post","resetLocalCache","errorInfo","type","message","GoogleSpreadsheet","JWT","Axios","GOOGLE_AUTH_SCOPES","AUTH_MODES","API_KEY","RAW_ACCESS_TOKEN","OAUTH","spreadsheetId","authMode","_rawSheets","create","baseURL","forEach","key","isParamTypeObject","isParamTypeArray","slice","interceptors","use","_setAxiosRequestAuth","bind","_handleAxiosResponse","_handleAxiosErrors","defaults","sheets","s","_updateOrCreateSheet","apiKey","token","accessToken","oAuth2Client","creds","impersonateAs","jwtClient","email","client_email","private_key","scopes","subject","renewJwtAuth","authorize","config","Authorization","credentials","access_token","getAccessToken","error","code","includeSpreadsheetInResponse","_updateRawProperties","updatedSpreadsheet","replies","responseIncludeGridData","newProperties","includeCells","includeGridData","loadInfo","sortBy","keyBy","omit","newSheetId","newSheet","sheetsById","setHeaderRow","addSheet","name","namedRangeId","filters","readOnlyMode","dataFilters","gridRange","ranges","sheet","GoogleToken","fs","gaxios_1","jws","path","util_1","readFile","promisify","async","ErrorWithCode","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","super","getPem","configure","rawToken","id_token","token_type","refresh_token","now","Date","getTime","expiresAt","_a","eagerRefreshThresholdMillis","callback","opts","assign","forceRefresh","getTokenAsync","cb","then","t","keyFile","ext","extname","body","JSON","parse","privateKey","clientEmail","Promise","resolve","inFlightRequest","getTokenAsyncInner","isTokenExpiring","getCredentials","iss","ensureEmail","requestToken","revokeTokenAsync","sub","scope","additionalClaims","iat","Math","floor","payload","aud","exp","signedJWT","sign","alg","secret","r","grant_type","assertion","responseType","expires_in","e","tokenExpires","desc","error_description"],"mappings":"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","file":"js/chunk-vendors~37441139.1c91c742.js","sourcesContent":["const _ = require('lodash');\n\nconst { columnToLetter } = require('./utils');\n\nconst { GoogleSpreadsheetFormulaError } = require('./errors');\n\nclass GoogleSpreadsheetCell {\n  constructor(parentSheet, rowIndex, columnIndex, cellData) {\n    this._sheet = parentSheet; // the parent GoogleSpreadsheetWorksheet instance\n    this._row = rowIndex;\n    this._column = columnIndex;\n\n    this._updateRawData(cellData);\n    return this;\n  }\n\n  // newData can be undefined/null if the cell is totally empty and unformatted\n  _updateRawData(newData = {}) {\n    this._rawData = newData;\n    this._draftData = {}; // stuff to save\n    this._error = null;\n    if (_.get(this._rawData, 'effectiveValue.errorValue')) {\n      this._error = new GoogleSpreadsheetFormulaError(this._rawData.effectiveValue.errorValue);\n    }\n  }\n\n  // CELL LOCATION/ADDRESS /////////////////////////////////////////////////////////////////////////\n  get rowIndex() { return this._row; }\n  get columnIndex() { return this._column; }\n  get a1Column() { return columnToLetter(this._column + 1); }\n  get a1Row() { return this._row + 1; } // a1 row numbers start at 1 instead of 0\n  get a1Address() { return `${this.a1Column}${this.a1Row}`; }\n\n  // CELL CONTENTS - VALUE/FORMULA/NOTES ///////////////////////////////////////////////////////////\n  get value() {\n    // const typeKey = _.keys(this._rawData.effectiveValue)[0];\n    if (this._draftData.value !== undefined) throw new Error('Value has been changed');\n    if (this._error) return this._error;\n    if (!this._rawData.effectiveValue) return null;\n    return _.values(this._rawData.effectiveValue)[0];\n  }\n\n  set value(newValue) {\n    if (_.isBoolean(newValue)) {\n      this._draftData.valueType = 'boolValue';\n    } else if (_.isString(newValue)) {\n      if (newValue.substr(0, 1) === '=') this._draftData.valueType = 'formulaValue';\n      else this._draftData.valueType = 'stringValue';\n    } else if (_.isFinite(newValue)) {\n      this._draftData.valueType = 'numberValue';\n    } else if (_.isNil(newValue)) {\n      // null or undefined\n      this._draftData.valueType = 'stringValue';\n      newValue = '';\n    } else {\n      throw new Error('Set value to boolean, string, or number');\n    }\n    this._draftData.value = newValue;\n  }\n\n  get valueType() {\n    // an error only happens with a formula\n    if (this._error) return 'errorValue';\n    if (!this._rawData.effectiveValue) return null;\n    return _.keys(this._rawData.effectiveValue)[0];\n  }\n\n  get formattedValue() { return this._rawData.formattedValue || null; }\n  set formattedValue(newVal) {\n    throw new Error('You cannot modify the formatted value directly');\n  }\n\n  get formula() { return _.get(this._rawData, 'userEnteredValue.formulaValue', null); }\n  set formula(newValue) {\n    if (newValue.substr(0, 1) !== '=') throw new Error('formula must begin with \"=\"');\n    this.value = newValue; // use existing value setter\n  }\n  get formulaError() { return this._error; }\n\n  get hyperlink() {\n    if (this._draftData.value) throw new Error('Save cell to be able to read hyperlink');\n    return this._rawData.hyperlink;\n  }\n  set hyperlink(val) {\n    throw new Error('Do not set hyperlink directly. Instead set cell.formula, for example `cell.formula = \\'=HYPERLINK(\"http://google.com\", \"Google\")\\'`');\n  }\n\n  get note() {\n    return this._draftData.note !== undefined ? this._draftData.note : this._rawData.note;\n  }\n\n  set note(newVal) {\n    if (newVal === null || newVal === undefined) newVal = '';\n    if (!_.isString(newVal)) throw new Error('Note must be a string');\n    if (newVal === this._rawData.note) delete this._draftData.note;\n    else this._draftData.note = newVal;\n  }\n\n  // CELL FORMATTING ///////////////////////////////////////////////////////////////////////////////\n  get userEnteredFormat() { return this._rawData.userEnteredFormat; }\n  get effectiveFormat() { return this._rawData.effectiveFormat; }\n  set userEnteredFormat(newVal) { throw new Error('Do not modify directly, instead use format properties'); }\n  set effectiveFormat(newVal) { throw new Error('Read-only'); }\n\n  _getFormatParam(param) {\n    // we freeze the object so users don't change nested props accidentally\n    // TODO: figure out something that would throw an error if you try to update it?\n    if (_.get(this._draftData, `userEnteredFormat.${param}`)) {\n      throw new Error('User format is unsaved - save the cell to be able to read it again');\n    }\n    return Object.freeze(this._rawData.userEnteredFormat[param]);\n  }\n\n  _setFormatParam(param, newVal) {\n    if (_.isEqual(newVal, _.get(this._rawData, `userEnteredFormat.${param}`))) {\n      _.unset(this._draftData, `userEnteredFormat.${param}`);\n    } else {\n      _.set(this._draftData, `userEnteredFormat.${param}`, newVal);\n      this._draftData.clearFormat = false;\n    }\n  }\n\n  // format getters\n  get numberFormat() { return this._getFormatParam('numberFormat'); }\n  get backgroundColor() { return this._getFormatParam('backgroundColor'); }\n  get borders() { return this._getFormatParam('borders'); }\n  get padding() { return this._getFormatParam('padding'); }\n  get horizontalAlignment() { return this._getFormatParam('horizontalAlignment'); }\n  get verticalAlignment() { return this._getFormatParam('verticalAlignment'); }\n  get wrapStrategy() { return this._getFormatParam('wrapStrategy'); }\n  get textDirection() { return this._getFormatParam('textDirection'); }\n  get textFormat() { return this._getFormatParam('textFormat'); }\n  get hyperlinkDisplayType() { return this._getFormatParam('hyperlinkDisplayType'); }\n  get textRotation() { return this._getFormatParam('textRotation'); }\n\n  // format setters\n  set numberFormat(newVal) { return this._setFormatParam('numberFormat', newVal); }\n  set backgroundColor(newVal) { return this._setFormatParam('backgroundColor', newVal); }\n  set borders(newVal) { return this._setFormatParam('borders', newVal); }\n  set padding(newVal) { return this._setFormatParam('padding', newVal); }\n  set horizontalAlignment(newVal) { return this._setFormatParam('horizontalAlignment', newVal); }\n  set verticalAlignment(newVal) { return this._setFormatParam('verticalAlignment', newVal); }\n  set wrapStrategy(newVal) { return this._setFormatParam('wrapStrategy', newVal); }\n  set textDirection(newVal) { return this._setFormatParam('textDirection', newVal); }\n  set textFormat(newVal) { return this._setFormatParam('textFormat', newVal); }\n  set hyperlinkDisplayType(newVal) { return this._setFormatParam('hyperlinkDisplayType', newVal); }\n  set textRotation(newVal) { return this._setFormatParam('textRotation', newVal); }\n\n  clearAllFormatting() {\n    // need to track this separately since by setting/unsetting things, we may end up with\n    // this._draftData.userEnteredFormat as an empty object, but not an intent to clear it\n    this._draftData.clearFormat = true;\n    delete this._draftData.userEnteredFormat;\n  }\n\n  // SAVING + UTILS ////////////////////////////////////////////////////////////////////////////////\n\n  // returns true if there are any updates that have not been saved yet\n  get _isDirty() {\n    // have to be careful about checking undefined rather than falsy\n    // in case a new value is empty string or 0 or false\n    if (this._draftData.note !== undefined) return true;\n    if (_.keys(this._draftData.userEnteredFormat).length) return true;\n    if (this._draftData.clearFormat) return true;\n    if (this._draftData.value !== undefined) return true;\n    return false;\n  }\n\n  discardUnsavedChanges() {\n    this._draftData = {};\n  }\n\n  async save() {\n    await this._sheet.saveUpdatedCells([this]);\n  }\n\n  // used by worksheet when saving cells\n  // returns an individual batchUpdate request to update the cell\n  _getUpdateRequest() {\n    // this logic should match the _isDirty logic above\n    // but we need it broken up to build the request below\n    const isValueUpdated = this._draftData.value !== undefined;\n    const isNoteUpdated = this._draftData.note !== undefined;\n    const isFormatUpdated = !!_.keys(this._draftData.userEnteredFormat || {}).length;\n    const isFormatCleared = this._draftData.clearFormat;\n\n    // if no updates, we return null, which we can filter out later before sending requests\n    if (!_.some([isValueUpdated, isNoteUpdated, isFormatUpdated, isFormatCleared])) {\n      return null;\n    }\n\n    // build up the formatting object, which has some quirks...\n    const format = {\n      // have to pass the whole object or it will clear existing properties\n      ...this._rawData.userEnteredFormat,\n      ...this._draftData.userEnteredFormat,\n    };\n    // if background color already set, cell has backgroundColor and backgroundColorStyle\n    // but backgroundColorStyle takes precendence so we must remove to set the color\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/cells#CellFormat\n    if (_.get(this._draftData, 'userEnteredFormat.backgroundColor')) {\n      delete (format.backgroundColorStyle);\n    }\n\n\n    return {\n      updateCells: {\n        rows: [{\n          values: [{\n            ...isValueUpdated && {\n              userEnteredValue: { [this._draftData.valueType]: this._draftData.value },\n            },\n            ...isNoteUpdated && {\n              note: this._draftData.note,\n            },\n            ...isFormatUpdated && {\n              userEnteredFormat: format,\n            },\n            ...isFormatCleared && {\n              userEnteredFormat: {},\n            },\n          }],\n        }],\n        // turns into a string of which fields to update ex \"note,userEnteredFormat\"\n        fields: _.keys(_.pickBy({\n          userEnteredValue: isValueUpdated,\n          note: isNoteUpdated,\n          userEnteredFormat: isFormatUpdated || isFormatCleared,\n        })).join(','),\n        start: {\n          sheetId: this._sheet.sheetId,\n          rowIndex: this.rowIndex,\n          columnIndex: this.columnIndex,\n        },\n      },\n    };\n  }\n}\n\nmodule.exports = GoogleSpreadsheetCell;\n","const _ = require('lodash');\n\nfunction getFieldMask(obj) {\n  return _.keys(obj).join(',');\n}\n\nfunction columnToLetter(column) {\n  let temp;\n  let letter = '';\n  let col = column;\n  while (col > 0) {\n    temp = (col - 1) % 26;\n    letter = String.fromCharCode(temp + 65) + letter;\n    col = (col - temp - 1) / 26;\n  }\n  return letter;\n}\n\nfunction letterToColumn(letter) {\n  let column = 0;\n  const { length } = letter;\n  for (let i = 0; i < length; i++) {\n    column += (letter.charCodeAt(i) - 64) * 26 ** (length - i - 1);\n  }\n  return column;\n}\n\nmodule.exports = {\n  getFieldMask,\n  columnToLetter,\n  letterToColumn,\n};\n","const { columnToLetter } = require('./utils');\n\nclass GoogleSpreadsheetRow {\n  constructor(parentSheet, rowNumber, data) {\n    this._sheet = parentSheet; // the parent GoogleSpreadsheetWorksheet instance\n    this._rowNumber = rowNumber; // the A1 row (1-indexed)\n    this._rawData = data;\n\n    for (let i = 0; i < this._sheet.headerValues.length; i++) {\n      const propName = this._sheet.headerValues[i];\n      if (!propName) continue; // skip empty header\n      Object.defineProperty(this, propName, {\n        get: () => this._rawData[i],\n        set: (newVal) => { this._rawData[i] = newVal; },\n        enumerable: true,\n      });\n    }\n\n    return this;\n  }\n\n  get rowNumber() { return this._rowNumber; }\n  // TODO: deprecate rowIndex - the name implies it should be zero indexed :(\n  get rowIndex() { return this._rowNumber; }\n  get a1Range() {\n    return [\n      this._sheet.a1SheetName,\n      '!',\n      `A${this._rowNumber}`,\n      ':',\n      `${columnToLetter(this._sheet.headerValues.length)}${this._rowNumber}`,\n    ].join('');\n  }\n\n  async save(options = {}) {\n    if (this._deleted) throw new Error('This row has been deleted - call getRows again before making updates.');\n\n    const response = await this._sheet._spreadsheet.axios.request({\n      method: 'put',\n      url: `/values/${encodeURIComponent(this.a1Range)}`,\n      params: {\n        valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n        includeValuesInResponse: true,\n      },\n      data: {\n        range: this.a1Range,\n        majorDimension: 'ROWS',\n        values: [this._rawData],\n      },\n    });\n    this._rawData = response.data.updatedData.values[0];\n  }\n\n  // delete this row\n  async delete() {\n    if (this._deleted) throw new Error('This row has been deleted - call getRows again before making updates.');\n\n    const result = await this._sheet._makeSingleUpdateRequest('deleteRange', {\n      range: {\n        sheetId: this._sheet.sheetId,\n        startRowIndex: this._rowNumber - 1, // this format is zero indexed, because of course...\n        endRowIndex: this._rowNumber,\n      },\n      shiftDimension: 'ROWS',\n    });\n    this._deleted = true;\n    return result;\n  }\n  async del() { return this.delete(); } // alias to mimic old version of this module\n}\n\nmodule.exports = GoogleSpreadsheetRow;\n","const _ = require('lodash');\n\nconst GoogleSpreadsheetRow = require('./GoogleSpreadsheetRow');\nconst GoogleSpreadsheetCell = require('./GoogleSpreadsheetCell');\n\nconst { getFieldMask, columnToLetter, letterToColumn } = require('./utils');\n\nfunction checkForDuplicateHeaders(headers) {\n  // check for duplicate headers\n  const checkForDupes = _.groupBy(headers); // { c1: ['c1'], c2: ['c2', 'c2' ]}\n  _.each(checkForDupes, (grouped, header) => {\n    if (!header) return; // empty columns are skipped, so multiple is ok\n    if (grouped.length > 1) {\n      throw new Error(`Duplicate header detected: \"${header}\". Please make sure all non-empty headers are unique`);\n    }\n  });\n}\n\nclass GoogleSpreadsheetWorksheet {\n  constructor(parentSpreadsheet, { properties, data }) {\n    this._spreadsheet = parentSpreadsheet; // the parent GoogleSpreadsheet instance\n\n    // basic properties\n    this._rawProperties = properties;\n\n    this._cells = []; // we will use a 2d sparse array to store cells;\n\n    this._rowMetadata = []; // 1d sparse array\n    this._columnMetadata = [];\n\n    if (data) this._fillCellData(data);\n\n    return this;\n  }\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    // pass the call up to the parent\n    return this._spreadsheet._makeSingleUpdateRequest(requestType, {\n      // sheetId: this.sheetId,\n      ...requestParams,\n    });\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) {\n      throw new Error('You must call `doc.loadInfo()` again before accessing this property');\n    }\n  }\n\n  resetLocalCache(dataOnly) {\n    if (!dataOnly) this._rawProperties = null;\n    this.headerValues = null;\n    this._cells = [];\n  }\n\n  _fillCellData(dataRanges) {\n    _.each(dataRanges, (range) => {\n      const startRow = range.startRow || 0;\n      const startColumn = range.startColumn || 0;\n      const numRows = range.rowMetadata.length;\n      const numColumns = range.columnMetadata.length;\n\n      // update cell data for entire range\n      for (let i = 0; i < numRows; i++) {\n        const actualRow = startRow + i;\n        for (let j = 0; j < numColumns; j++) {\n          const actualColumn = startColumn + j;\n\n          // if the row has not been initialized yet, do it\n          if (!this._cells[actualRow]) this._cells[actualRow] = [];\n\n          // see if the response includes some info for the cell\n          const cellData = _.get(range, `rowData[${i}].values[${j}]`);\n\n          // update the cell object or create it\n          if (this._cells[actualRow][actualColumn]) {\n            this._cells[actualRow][actualColumn]._updateRawData(cellData);\n          } else {\n            this._cells[actualRow][actualColumn] = new GoogleSpreadsheetCell(\n              this,\n              actualRow,\n              actualColumn,\n              cellData\n            );\n          }\n        }\n      }\n\n      // update row metadata\n      for (let i = 0; i < range.rowMetadata.length; i++) {\n        this._rowMetadata[startRow + i] = range.rowMetadata[i];\n      }\n      // update column metadata\n      for (let i = 0; i < range.columnMetadata.length; i++) {\n        this._columnMetadata[startColumn + i] = range.columnMetadata[i];\n      }\n    });\n  }\n\n\n  // PROPERTY GETTERS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get sheetId() { return this._getProp('sheetId'); }\n  get title() { return this._getProp('title'); }\n  get index() { return this._getProp('index'); }\n  get sheetType() { return this._getProp('sheetType'); }\n  get gridProperties() { return this._getProp('gridProperties'); }\n  get hidden() { return this._getProp('hidden'); }\n  get tabColor() { return this._getProp('tabColor'); }\n  get rightToLeft() { return this._getProp('rightToLeft'); }\n\n  set sheetId(newVal) { return this._setProp('sheetId', newVal); }\n  set title(newVal) { return this._setProp('title', newVal); }\n  set index(newVal) { return this._setProp('index', newVal); }\n  set sheetType(newVal) { return this._setProp('sheetType', newVal); }\n  set gridProperties(newVal) { return this._setProp('gridProperties', newVal); }\n  set hidden(newVal) { return this._setProp('hidden', newVal); }\n  set tabColor(newVal) { return this._setProp('tabColor', newVal); }\n  set rightToLeft(newVal) { return this._setProp('rightToLeft', newVal); }\n\n  get rowCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.rowCount;\n  }\n  get columnCount() {\n    this._ensureInfoLoaded();\n    return this.gridProperties.columnCount;\n  }\n  get colCount() { throw new Error('`colCount` is deprecated - please use `columnCount` instead.'); }\n  set rowCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n  set columnCount(newVal) { throw new Error('Do not update directly. Use resize()'); }\n\n  get a1SheetName() { return `'${this.title.replace(/'/g, \"''\")}'`; }\n  get encodedA1SheetName() { return encodeURIComponent(this.a1SheetName); }\n  get lastColumnLetter() { return columnToLetter(this.columnCount); }\n\n\n  // CELLS-BASED INTERACTIONS //////////////////////////////////////////////////////////////////////\n\n  get cellStats() {\n    let allCells = _.flatten(this._cells);\n    allCells = _.compact(allCells);\n    return {\n      nonEmpty: _.filter(allCells, (c) => c.value).length,\n      loaded: allCells.length,\n      total: this.rowCount * this.columnCount,\n    };\n  }\n\n  getCellByA1(a1Address) {\n    const split = a1Address.match(/([A-Z]+)([0-9]+)/);\n    const columnIndex = letterToColumn(split[1]);\n    const rowIndex = parseInt(split[2]);\n    return this.getCell(rowIndex - 1, columnIndex - 1);\n  }\n\n  getCell(rowIndex, columnIndex) {\n    if (rowIndex < 0 || columnIndex < 0) throw new Error('Min coordinate is 0, 0');\n    if (rowIndex >= this.rowCount || columnIndex >= this.columnCount) {\n      throw new Error(`Out of bounds, sheet is ${this.rowCount} by ${this.columnCount}`);\n    }\n\n    if (!_.get(this._cells, `[${rowIndex}][${columnIndex}]`)) {\n      throw new Error('This cell has not been loaded yet');\n    }\n    return this._cells[rowIndex][columnIndex];\n  }\n\n\n  async loadCells(sheetFilters) {\n    // load the whole sheet\n    if (!sheetFilters) return this._spreadsheet.loadCells(this.a1SheetName);\n\n    let filtersArray = _.isArray(sheetFilters) ? sheetFilters : [sheetFilters];\n    filtersArray = _.map(filtersArray, (filter) => {\n      // add sheet name to A1 ranges\n      if (_.isString(filter)) {\n        if (filter.startsWith(this.a1SheetName)) return filter;\n        return `${this.a1SheetName}!${filter}`;\n      }\n      if (_.isObject(filter)) {\n        // TODO: detect and support DeveloperMetadata filters\n        if (!filter.sheetId) {\n          return { sheetId: this.sheetId, ...filter };\n        }\n        if (filter.sheetId !== this.sheetId) {\n          throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n        } else {\n          return filter;\n        }\n      } else {\n        throw new Error('Each filter must be a A1 range string or gridrange object');\n      }\n    });\n    return this._spreadsheet.loadCells(filtersArray);\n  }\n\n  async saveUpdatedCells() {\n    const cellsToSave = _.filter(_.flatten(this._cells), { _isDirty: true });\n    if (cellsToSave.length) {\n      await this.saveCells(cellsToSave);\n    }\n    // TODO: do we want to return stats? or the cells that got updated?\n  }\n\n  async saveCells(cellsToUpdate) {\n    // we send an individual \"updateCells\" request for each cell\n    // because the fields that are udpated for each group are the same\n    // and we dont want to accidentally overwrite something\n    const requests = _.map(cellsToUpdate, (cell) => cell._getUpdateRequest());\n    const responseRanges = _.map(cellsToUpdate, (c) => `${this.a1SheetName}!${c.a1Address}`);\n\n    // if nothing is being updated the request returned is just `null`\n    // so we make sure at least 1 request is valid - otherwise google throws a 400\n    if (!_.compact(requests).length) {\n      throw new Error('At least one cell must have something to update');\n    }\n\n    await this._spreadsheet._makeBatchUpdateRequest(requests, responseRanges);\n  }\n\n  // SAVING THIS FOR FUTURE USE\n  // puts the cells that need updating into batches\n  // async updateCellsByBatches() {\n  //   // saving this code, but it's problematic because each group must have the same update fields\n  //   const cellsByRow = _.groupBy(cellsToUpdate, 'rowIndex');\n  //   const groupsToSave = [];\n  //   _.each(cellsByRow, (cells, rowIndex) => {\n  //     let cellGroup = [];\n  //     _.each(cells, (c) => {\n  //       if (!cellGroup.length) {\n  //         cellGroup.push(c);\n  //       } else if (\n  //         cellGroup[cellGroup.length - 1].columnIndex ===\n  //         c.columnIndex - 1\n  //       ) {\n  //         cellGroup.push(c);\n  //       } else {\n  //         groupsToSave.push(cellGroup);\n  //         cellGroup = [];\n  //       }\n  //     });\n  //     groupsToSave.push(cellGroup);\n  //   });\n  //   const requests = _.map(groupsToSave, (cellGroup) => ({\n  //     updateCells: {\n  //       rows: [\n  //         {\n  //           values: _.map(cellGroup, (cell) => ({\n  //             ...cell._draftData.value && {\n  //               userEnteredValue: { [cell._draftData.valueType]: cell._draftData.value },\n  //             },\n  //             ...cell._draftData.note !== undefined && {\n  //               note: cell._draftData.note ,\n  //             },\n  //             ...cell._draftData.userEnteredFormat && {\n  //               userEnteredValue: cell._draftData.userEnteredFormat,\n  //             },\n  //           })),\n  //         },\n  //       ],\n  //       fields: 'userEnteredValue,note,userEnteredFormat',\n  //       start: {\n  //         sheetId: this.sheetId,\n  //         rowIndex: cellGroup[0].rowIndex,\n  //         columnIndex: cellGroup[0].columnIndex,\n  //       },\n  //     },\n  //   }));\n  //   const responseRanges = _.map(groupsToSave, (cellGroup) => {\n  //     let a1Range = cellGroup[0].a1Address;\n  //     if (cellGroup.length > 1)\n  //       a1Range += `:${cellGroup[cellGroup.length - 1].a1Address}`;\n  //     return `${cellGroup[0]._sheet.a1SheetName}!${a1Range}`;\n  //   });\n  // }\n\n\n  // ROW BASED FUNCTIONS ///////////////////////////////////////////////////////////////////////////\n\n  async loadHeaderRow() {\n    const rows = await this.getCellsInRange(`A1:${this.lastColumnLetter}1`);\n    if (!rows) {\n      throw new Error('No values in the header row - fill the first row with header values before trying to interact with rows');\n    }\n    this.headerValues = _.map(rows[0], (header) => header.trim());\n    if (!_.compact(this.headerValues).length) {\n      throw new Error('All your header cells are blank - fill the first row with header values before trying to interact with rows');\n    }\n    checkForDuplicateHeaders(this.headerValues);\n  }\n\n  async setHeaderRow(headerValues) {\n    if (!headerValues) return;\n    if (headerValues.length > this.columnCount) {\n      throw new Error(`Sheet is not large enough to fit ${headerValues.length} columns. Resize the sheet first.`);\n    }\n    const trimmedHeaderValues = _.map(headerValues, (h) => h.trim());\n    checkForDuplicateHeaders(trimmedHeaderValues);\n\n    if (!_.compact(trimmedHeaderValues).length) {\n      throw new Error('All your header cells are blank -');\n    }\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'put',\n      url: `/values/${this.encodedA1SheetName}!1:1`,\n      params: {\n        valueInputOption: 'USER_ENTERED', // other option is RAW\n        includeValuesInResponse: true,\n      },\n      data: {\n        range: `${this.a1SheetName}!1:1`,\n        majorDimension: 'ROWS',\n        values: [[\n          ...trimmedHeaderValues,\n          // pad the rest of the row with empty values to clear them all out\n          ..._.times(this.columnCount - trimmedHeaderValues.length, () => ''),\n        ]],\n      },\n    });\n    this.headerValues = response.data.updatedData.values[0];\n  }\n\n  async addRows(rows, options = {}) {\n    // adds multiple rows in one API interaction using the append endpoint\n\n    // each row can be an array or object\n    // an array is just cells\n    // ex: ['column 1', 'column 2', 'column 3']\n    // an object must use the header row values as keys\n    // ex: { col1: 'column 1', col2: 'column 2', col3: 'column 3' }\n\n    // google bug that does not handle colons in names\n    // see https://issuetracker.google.com/issues/150373119\n    if (this.title.includes(':')) {\n      throw new Error('Please remove the \":\" from your sheet title. There is a bug with the google API which breaks appending rows if any colons are in the sheet title.');\n    }\n\n    if (!_.isArray(rows)) throw new Error('You must pass in an array of row values to append');\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    // convert each row into an array of cell values rather than the key/value object\n    const rowsAsArrays = [];\n    _.each(rows, (row) => {\n      let rowAsArray;\n      if (_.isArray(row)) {\n        rowAsArray = row;\n      } else if (_.isObject(row)) {\n        rowAsArray = [];\n        for (let i = 0; i < this.headerValues.length; i++) {\n          const propName = this.headerValues[i];\n          rowAsArray[i] = row[propName];\n        }\n      } else {\n        throw new Error('Each row must be an object or an array');\n      }\n      rowsAsArrays.push(rowAsArray);\n    });\n\n    const response = await this._spreadsheet.axios.request({\n      method: 'post',\n      url: `/values/${this.encodedA1SheetName}!A1:append`,\n      params: {\n        valueInputOption: options.raw ? 'RAW' : 'USER_ENTERED',\n        insertDataOption: options.insert ? 'INSERT_ROWS' : 'OVERWRITE',\n        includeValuesInResponse: true,\n      },\n      data: {\n        values: rowsAsArrays,\n      },\n    });\n\n    // extract the new row number from the A1-notation data range in the response\n    // ex: in \"'Sheet8!A2:C2\" -- we want the `2`\n    const { updatedRange } = response.data.updates;\n    let rowNumber = updatedRange.match(/![A-Z]+([0-9]+):?/)[1];\n    rowNumber = parseInt(rowNumber);\n\n    // if new rows were added, we need update sheet.rowRount\n    if (options.insert) {\n      this._rawProperties.gridProperties.rowCount += rows.length;\n    } else if (rowNumber + rows.length > this.rowCount) {\n      // have to subtract 1 since one row was inserted at rowNumber\n      this._rawProperties.gridProperties.rowCount = rowNumber + rows.length - 1;\n    }\n\n    return _.map(response.data.updates.updatedData.values, (rowValues) => {\n      const row = new GoogleSpreadsheetRow(this, rowNumber++, rowValues);\n      return row;\n    });\n  }\n\n  async addRow(rowValues, options) {\n    const rows = await this.addRows([rowValues], options);\n    return rows[0];\n  }\n\n  async getRows(options = {}) {\n    // https://developers.google.com/sheets/api/guides/migration\n    // v4 API does not have equivalents for the row-order query parameters provided\n    // Reverse-order is trivial; simply process the returned values array in reverse order.\n    // Order by column is not supported for reads, but it is possible to sort the data then read\n\n    // v4 API does not currently have a direct equivalent for the Sheets API v3 structured queries\n    // However, you can retrieve the relevant data and sort through it as needed in your application\n\n    // options\n    // - offset\n    // - limit\n\n    options.offset = options.offset || 0;\n    options.limit = options.limit || this.rowCount - 1;\n\n    if (!this.headerValues) await this.loadHeaderRow();\n\n    const firstRow = 2 + options.offset; // skip first row AND not zero indexed\n    const lastRow = firstRow + options.limit - 1; // inclusive so we subtract 1\n    const lastColumn = columnToLetter(this.headerValues.length);\n    const rawRows = await this.getCellsInRange(\n      `A${firstRow}:${lastColumn}${lastRow}`\n    );\n\n    if (!rawRows) return [];\n\n    const rows = [];\n    let rowNum = firstRow;\n    for (let i = 0; i < rawRows.length; i++) {\n      rows.push(new GoogleSpreadsheetRow(this, rowNum++, rawRows[i]));\n    }\n    return rows;\n  }\n\n  // BASIC PROPS ///////////////////////////////////////////////////////////////////////////////////\n  async updateProperties(properties) {\n    // Request type = `updateSheetProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSheetPropertiesRequest\n\n    // properties\n    // - title (string)\n    // - index (number)\n    // - gridProperties ({ object (GridProperties) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#gridproperties\n    // - hidden (boolean)\n    // - tabColor ({ object (Color) } - https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/other#Color\n    // - rightToLeft (boolean)\n\n    return this._makeSingleUpdateRequest('updateSheetProperties', {\n      properties: {\n        sheetId: this.sheetId,\n        ...properties,\n      },\n      fields: getFieldMask(properties),\n    });\n  }\n\n  async updateGridProperties(gridProperties) {\n    // just passes the call through to update gridProperties\n    // see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/sheets#GridProperties\n\n    // gridProperties\n    // - rowCount\n    // - columnCount\n    // - frozenRowCount\n    // - frozenColumnCount\n    // - hideGridLines\n    return this.updateProperties({ gridProperties });\n  }\n\n  // just a shortcut because resize makes more sense to change rowCount / columnCount\n  async resize(gridProperties) {\n    return this.updateGridProperties(gridProperties);\n  }\n\n  async updateDimensionProperties(columnsOrRows, properties, bounds) {\n    // Request type = `updateDimensionProperties`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#updatedimensionpropertiesrequest\n\n    // columnsOrRows = COLUMNS|ROWS\n    // properties\n    // - pixelSize\n    // - hiddenByUser\n    // - developerMetadata\n    // bounds\n    // - startIndex\n    // - endIndex\n\n    return this._makeSingleUpdateRequest('updateDimensionProperties', {\n      range: {\n        sheetId: this.sheetId,\n        dimension: columnsOrRows,\n        ...bounds && {\n          startIndex: bounds.startIndex,\n          endIndex: bounds.endIndex,\n        },\n      },\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // OTHER /////////////////////////////////////////////////////////////////////////////////////////\n\n  // this uses the \"values\" getter and does not give all the info about the cell contents\n  // it is used internally when loading header cells\n  async getCellsInRange(a1Range, options) {\n    const response = await this._spreadsheet.axios.get(`/values/${this.encodedA1SheetName}!${a1Range}`, {\n      params: options,\n    });\n    return response.data.values;\n  }\n\n  async updateNamedRange() {\n    // Request type = `updateNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateNamedRangeRequest\n  }\n\n  async addNamedRange() {\n    // Request type = `addNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddNamedRangeRequest\n  }\n\n  async deleteNamedRange() {\n    // Request type = `deleteNamedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteNamedRangeRequest\n  }\n\n  async repeatCell() {\n    // Request type = `repeatCell`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RepeatCellRequest\n  }\n\n  async autoFill() {\n    // Request type = `autoFill`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoFillRequest\n  }\n\n  async cutPaste() {\n    // Request type = `cutPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CutPasteRequest\n  }\n\n  async copyPaste() {\n    // Request type = `copyPaste`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CopyPasteRequest\n  }\n\n  async mergeCells(range, mergeType = 'MERGE_ALL') {\n    // Request type = `mergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('mergeCells', {\n      mergeType,\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async unmergeCells(range) {\n    // Request type = `unmergeCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UnmergeCellsRequest\n    if (range.sheetId && range.sheetId !== this.sheetId) {\n      throw new Error('Leave sheet ID blank or set to matching ID of this sheet');\n    }\n    await this._makeSingleUpdateRequest('unmergeCells', {\n      range: {\n        ...range,\n        sheetId: this.sheetId,\n      },\n    });\n  }\n\n  async updateBorders() {\n    // Request type = `updateBorders`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBordersRequest\n  }\n\n  async addFilterView() {\n    // Request type = `addFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddFilterViewRequest\n  }\n\n  async appendCells() {\n    // Request type = `appendCells`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendCellsRequest\n  }\n\n  async clearBasicFilter() {\n    // Request type = `clearBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#ClearBasicFilterRequest\n  }\n\n  async deleteDimension() {\n    // Request type = `deleteDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionRequest\n  }\n\n  async deleteEmbeddedObject() {\n    // Request type = `deleteEmbeddedObject`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteEmbeddedObjectRequest\n  }\n\n  async deleteFilterView() {\n    // Request type = `deleteFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteFilterViewRequest\n  }\n\n  async duplicateFilterView() {\n    // Request type = `duplicateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateFilterViewRequest\n  }\n\n  async duplicateSheet() {\n    // Request type = `duplicateSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DuplicateSheetRequest\n  }\n\n  async findReplace() {\n    // Request type = `findReplace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#FindReplaceRequest\n  }\n\n  async insertDimension() {\n    // Request type = `insertDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertDimensionRequest\n  }\n\n  async insertRange() {\n    // Request type = `insertRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#InsertRangeRequest\n  }\n\n  async moveDimension() {\n    // Request type = `moveDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#MoveDimensionRequest\n  }\n\n  async updateEmbeddedObjectPosition() {\n    // Request type = `updateEmbeddedObjectPosition`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateEmbeddedObjectPositionRequest\n  }\n\n  async pasteData() {\n    // Request type = `pasteData`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#PasteDataRequest\n  }\n\n  async textToColumns() {\n    // Request type = `textToColumns`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TextToColumnsRequest\n  }\n\n  async updateFilterView() {\n    // Request type = `updateFilterView`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateFilterViewRequest\n  }\n\n  async deleteRange() {\n    // Request type = `deleteRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteRangeRequest\n  }\n\n  async appendDimension() {\n    // Request type = `appendDimension`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AppendDimensionRequest\n  }\n\n  async addConditionalFormatRule() {\n    // Request type = `addConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddConditionalFormatRuleRequest\n  }\n\n  async updateConditionalFormatRule() {\n    // Request type = `updateConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateConditionalFormatRuleRequest\n  }\n\n  async deleteConditionalFormatRule() {\n    // Request type = `deleteConditionalFormatRule`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteConditionalFormatRuleRequest\n  }\n\n  async sortRange() {\n    // Request type = `sortRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SortRangeRequest\n  }\n\n  async setDataValidation() {\n    // Request type = `setDataValidation`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetDataValidationRequest\n  }\n\n  async setBasicFilter() {\n    // Request type = `setBasicFilter`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#SetBasicFilterRequest\n  }\n\n  async addProtectedRange() {\n    // Request type = `addProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddProtectedRangeRequest\n  }\n\n  async updateProtectedRange() {\n    // Request type = `updateProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateProtectedRangeRequest\n  }\n\n  async deleteProtectedRange() {\n    // Request type = `deleteProtectedRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteProtectedRangeRequest\n  }\n\n  async autoResizeDimensions() {\n    // Request type = `autoResizeDimensions`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AutoResizeDimensionsRequest\n  }\n\n  async addChart() {\n    // Request type = `addChart`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddChartRequest\n  }\n\n  async updateChartSpec() {\n    // Request type = `updateChartSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateChartSpecRequest\n  }\n\n  async updateBanding() {\n    // Request type = `updateBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateBandingRequest\n  }\n\n  async addBanding() {\n    // Request type = `addBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddBandingRequest\n  }\n\n  async deleteBanding() {\n    // Request type = `deleteBanding`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteBandingRequest\n  }\n\n  async createDeveloperMetadata() {\n    // Request type = `createDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#CreateDeveloperMetadataRequest\n  }\n\n  async updateDeveloperMetadata() {\n    // Request type = `updateDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDeveloperMetadataRequest\n  }\n\n  async deleteDeveloperMetadata() {\n    // Request type = `deleteDeveloperMetadata`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDeveloperMetadataRequest\n  }\n\n  async randomizeRange() {\n    // Request type = `randomizeRange`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#RandomizeRangeRequest\n  }\n\n  async addDimensionGroup() {\n    // Request type = `addDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddDimensionGroupRequest\n  }\n\n  async deleteDimensionGroup() {\n    // Request type = `deleteDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDimensionGroupRequest\n  }\n\n  async updateDimensionGroup() {\n    // Request type = `updateDimensionGroup`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateDimensionGroupRequest\n  }\n\n  async trimWhitespace() {\n    // Request type = `trimWhitespace`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#TrimWhitespaceRequest\n  }\n\n  async deleteDuplicates() {\n    // Request type = `deleteDuplicates`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteDuplicatesRequest\n  }\n\n  async addSlicer() {\n    // Request type = `addSlicer`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSlicerRequest\n  }\n\n  async updateSlicerSpec() {\n    // Request type = `updateSlicerSpec`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#UpdateSlicerSpecRequest\n  }\n\n  // delete this worksheet\n  async delete() {\n    return this._spreadsheet.deleteSheet(this.sheetId);\n  }\n  async del() { return this.delete(); } // alias to mimic old interface\n\n  // copies this worksheet into another document/spreadsheet\n  async copyToSpreadsheet(destinationSpreadsheetId) {\n    return this._spreadsheet.axios.post(`/sheets/${this.sheetId}:copyTo`, {\n      destinationSpreadsheetId,\n    });\n  }\n\n  async clear() {\n    // clears all the data in the sheet\n    // sheet name without ie 'sheet1' rather than 'sheet1'!A1:B5 is all cells\n    await this._spreadsheet.axios.post(`/values/${this.encodedA1SheetName}:clear`);\n    this.resetLocalCache(true);\n  }\n}\n\nmodule.exports = GoogleSpreadsheetWorksheet;\n","class GoogleSpreadsheetFormulaError {\n  constructor(errorInfo) {\n    this.type = errorInfo.type;\n    this.message = errorInfo.message;\n  }\n}\n\nmodule.exports = {\n  GoogleSpreadsheetFormulaError,\n};\n","const GoogleSpreadsheet = require('./lib/GoogleSpreadsheet');\nconst GoogleSpreadsheetWorksheet = require('./lib/GoogleSpreadsheetWorksheet');\nconst GoogleSpreadsheetRow = require('./lib/GoogleSpreadsheetRow');\n\nconst { GoogleSpreadsheetFormulaError } = require('./lib/errors');\n\nmodule.exports = {\n  GoogleSpreadsheet,\n  GoogleSpreadsheetWorksheet,\n  GoogleSpreadsheetRow,\n\n  GoogleSpreadsheetFormulaError,\n};\n","const _ = require('lodash');\nconst { JWT } = require('google-auth-library');\nconst Axios = require('axios');\n\nconst GoogleSpreadsheetWorksheet = require('./GoogleSpreadsheetWorksheet');\nconst { getFieldMask } = require('./utils');\n\nconst GOOGLE_AUTH_SCOPES = [\n  'https://www.googleapis.com/auth/spreadsheets',\n\n  // the list from the sheets v4 auth for spreadsheets.get\n  // 'https://www.googleapis.com/auth/drive',\n  // 'https://www.googleapis.com/auth/drive.readonly',\n  // 'https://www.googleapis.com/auth/drive.file',\n  // 'https://www.googleapis.com/auth/spreadsheets',\n  // 'https://www.googleapis.com/auth/spreadsheets.readonly',\n];\n\nconst AUTH_MODES = {\n  JWT: 'JWT',\n  API_KEY: 'API_KEY',\n  RAW_ACCESS_TOKEN: 'RAW_ACCESS_TOKEN',\n  OAUTH: 'OAUTH',\n};\n\nclass GoogleSpreadsheet {\n  constructor(sheetId) {\n    this.spreadsheetId = sheetId;\n    this.authMode = null;\n    this._rawSheets = {};\n    this._rawProperties = null;\n\n    // create an axios instance with sheet root URL and interceptors to handle auth\n    this.axios = Axios.create({\n      baseURL: `https://sheets.googleapis.com/v4/spreadsheets/${sheetId || ''}`,\n      // send arrays in params with duplicate keys - ie `?thing=1&thing=2` vs `?thing[]=1...`\n      // solution taken from https://github.com/axios/axios/issues/604\n      paramsSerializer(params) {\n        let options = '';\n        _.keys(params).forEach((key) => {\n          const isParamTypeObject = typeof params[key] === 'object';\n          const isParamTypeArray = isParamTypeObject && (params[key].length >= 0);\n          if (!isParamTypeObject) options += `${key}=${encodeURIComponent(params[key])}&`;\n          if (isParamTypeObject && isParamTypeArray) {\n            _.each(params[key], (val) => {\n              options += `${key}=${encodeURIComponent(val)}&`;\n            });\n          }\n        });\n        return options ? options.slice(0, -1) : options;\n      },\n    });\n    // have to use bind here or the functions dont have access to `this` :(\n    this.axios.interceptors.request.use(this._setAxiosRequestAuth.bind(this));\n    this.axios.interceptors.response.use(\n      this._handleAxiosResponse.bind(this),\n      this._handleAxiosErrors.bind(this)\n    );\n\n    return this;\n  }\n\n  // CREATE NEW DOC ////////////////////////////////////////////////////////////////////////////////\n  async createNewSpreadsheetDocument(properties) {\n    // see updateProperties for more info about available properties\n\n    if (this.spreadsheetId) {\n      throw new Error('Only call `createNewSpreadsheetDocument()` on a GoogleSpreadsheet object that has no spreadsheetId set');\n    }\n    const response = await this.axios.post(this.url, {\n      properties,\n    });\n    this.spreadsheetId = response.data.spreadsheetId;\n    this.axios.defaults.baseURL += this.spreadsheetId;\n\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  // AUTH RELATED FUNCTIONS ////////////////////////////////////////////////////////////////////////\n  async useApiKey(key) {\n    this.authMode = AUTH_MODES.API_KEY;\n    this.apiKey = key;\n  }\n\n  // token must be created and managed (refreshed) elsewhere\n  async useRawAccessToken(token) {\n    this.authMode = AUTH_MODES.RAW_ACCESS_TOKEN;\n    this.accessToken = token;\n  }\n\n  async useOAuth2Client(oAuth2Client) {\n    this.authMode = AUTH_MODES.OAUTH;\n    this.oAuth2Client = oAuth2Client;\n  }\n\n  // creds should be an object obtained by loading the json file google gives you\n  // impersonateAs is an email of any user in the G Suite domain\n  // (only works if service account has domain-wide delegation enabled)\n  async useServiceAccountAuth(creds, impersonateAs = null) {\n    this.jwtClient = new JWT({\n      email: creds.client_email,\n      key: creds.private_key,\n      scopes: GOOGLE_AUTH_SCOPES,\n      subject: impersonateAs,\n    });\n    await this.renewJwtAuth();\n  }\n\n  async renewJwtAuth() {\n    this.authMode = AUTH_MODES.JWT;\n    await this.jwtClient.authorize();\n    /*\n    returned token looks like\n      {\n        access_token: 'secret-token...',\n        token_type: 'Bearer',\n        expiry_date: 1576005020000,\n        id_token: undefined,\n        refresh_token: 'jwt-placeholder'\n      }\n    */\n  }\n\n  // TODO: provide mechanism to share single JWT auth between docs?\n\n  // INTERNAL UTILITY FUNCTIONS ////////////////////////////////////////////////////////////////////\n  async _setAxiosRequestAuth(config) {\n    // TODO: check auth mode, if valid, renew if expired, etc\n    if (this.authMode === AUTH_MODES.JWT) {\n      if (!this.jwtClient) throw new Error('JWT auth is not set up properly');\n      // this seems to do the right thing and only renew the token if expired\n      await this.jwtClient.authorize();\n      config.headers.Authorization = `Bearer ${this.jwtClient.credentials.access_token}`;\n    } else if (this.authMode === AUTH_MODES.RAW_ACCESS_TOKEN) {\n      if (!this.accessToken) throw new Error('Invalid access token');\n      config.headers.Authorization = `Bearer ${this.accessToken}`;\n    } else if (this.authMode === AUTH_MODES.API_KEY) {\n      if (!this.apiKey) throw new Error('Please set API key');\n      config.params = config.params || {};\n      config.params.key = this.apiKey;\n    } else if (this.authMode === AUTH_MODES.OAUTH) {\n      const credentials = await this.oAuth2Client.getAccessToken();\n      config.headers.Authorization = `Bearer ${credentials.token}`;\n    } else {\n      throw new Error('You must initialize some kind of auth before making any requests');\n    }\n    return config;\n  }\n\n  async _handleAxiosResponse(response) { return response; }\n  async _handleAxiosErrors(error) {\n    // console.log(error);\n    if (error.response && error.response.data) {\n      // usually the error has a code and message, but occasionally not\n      if (!error.response.data.error) throw error;\n\n      const { code, message } = error.response.data.error;\n      error.message = `Google API error - [${code}] ${message}`;\n      throw error;\n    }\n\n    if (_.get(error, 'response.status') === 403) {\n      if (this.authMode === AUTH_MODES.API_KEY) {\n        throw new Error('Sheet is private. Use authentication or make public. (see https://github.com/theoephraim/node-google-spreadsheet#a-note-on-authentication for details)');\n      }\n    }\n    throw error;\n  }\n\n  async _makeSingleUpdateRequest(requestType, requestParams) {\n    const response = await this.axios.post(':batchUpdate', {\n      requests: [{ [requestType]: requestParams }],\n      includeSpreadsheetInResponse: true,\n      // responseRanges: [string]\n      // responseIncludeGridData: true\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n    // console.log('API RESPONSE', response.data.replies[0][requestType]);\n    return response.data.replies[0][requestType];\n  }\n\n  async _makeBatchUpdateRequest(requests, responseRanges) {\n    // this is used for updating batches of cells\n    const response = await this.axios.post(':batchUpdate', {\n      requests,\n      includeSpreadsheetInResponse: true,\n      ...responseRanges && {\n        responseIncludeGridData: true,\n        ...responseRanges !== '*' && { responseRanges },\n      },\n    });\n\n    this._updateRawProperties(response.data.updatedSpreadsheet.properties);\n    _.each(response.data.updatedSpreadsheet.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n\n  _ensureInfoLoaded() {\n    if (!this._rawProperties) throw new Error('You must call `doc.loadInfo()` before accessing this property');\n  }\n\n  _updateRawProperties(newProperties) { this._rawProperties = newProperties; }\n\n  _updateOrCreateSheet({ properties, data }) {\n    const { sheetId } = properties;\n    if (!this._rawSheets[sheetId]) {\n      this._rawSheets[sheetId] = new GoogleSpreadsheetWorksheet(this, { properties, data });\n    } else {\n      this._rawSheets[sheetId]._rawProperties = properties;\n      this._rawSheets[sheetId]._fillCellData(data);\n    }\n  }\n\n  // BASIC PROPS //////////////////////////////////////////////////////////////////////////////\n  _getProp(param) {\n    this._ensureInfoLoaded();\n    return this._rawProperties[param];\n  }\n  _setProp(param, newVal) { // eslint-disable-line no-unused-vars\n    throw new Error('Do not update directly - use `updateProperties()`');\n  }\n\n  get title() { return this._getProp('title'); }\n  get locale() { return this._getProp('locale'); }\n  get timeZone() { return this._getProp('timeZone'); }\n  get autoRecalc() { return this._getProp('autoRecalc'); }\n  get defaultFormat() { return this._getProp('defaultFormat'); }\n  get spreadsheetTheme() { return this._getProp('spreadsheetTheme'); }\n  get iterativeCalculationSettings() { return this._getProp('iterativeCalculationSettings'); }\n\n  set title(newVal) { this._setProp('title', newVal); }\n  set locale(newVal) { this._setProp('locale', newVal); }\n  set timeZone(newVal) { this._setProp('timeZone', newVal); }\n  set autoRecalc(newVal) { this._setProp('autoRecalc', newVal); }\n  set defaultFormat(newVal) { this._setProp('defaultFormat', newVal); }\n  set spreadsheetTheme(newVal) { this._setProp('spreadsheetTheme', newVal); }\n  set iterativeCalculationSettings(newVal) { this._setProp('iterativeCalculationSettings', newVal); }\n\n  async updateProperties(properties) {\n    // updateSpreadsheetProperties\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#SpreadsheetProperties\n\n    /*\n      title (string) - title of the spreadsheet\n      locale (string) - ISO code\n      autoRecalc (enum) - ON_CHANGE|MINUTE|HOUR\n      timeZone (string) - timezone code\n      iterativeCalculationSettings (object) - see https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets#IterativeCalculationSettings\n     */\n\n    await this._makeSingleUpdateRequest('updateSpreadsheetProperties', {\n      properties,\n      fields: getFieldMask(properties),\n    });\n  }\n\n  // BASIC INFO ////////////////////////////////////////////////////////////////////////////////////\n  async loadInfo(includeCells) {\n    const response = await this.axios.get('/', {\n      params: {\n        ...includeCells && { includeGridData: true },\n      },\n    });\n    this._rawProperties = response.data.properties;\n    _.each(response.data.sheets, (s) => this._updateOrCreateSheet(s));\n  }\n  async getInfo() { return this.loadInfo(); } // alias to mimic old version\n\n  resetLocalCache() {\n    this._rawProperties = null;\n    this._rawSheets = {};\n  }\n\n  // WORKSHEETS ////////////////////////////////////////////////////////////////////////////////////\n  get sheetCount() {\n    this._ensureInfoLoaded();\n    return _.values(this._rawSheets).length;\n  }\n\n  get sheetsById() {\n    this._ensureInfoLoaded();\n    return this._rawSheets;\n  }\n\n  get sheetsByIndex() {\n    this._ensureInfoLoaded();\n    return _.sortBy(this._rawSheets, 'index');\n  }\n\n  get sheetsByTitle() {\n    this._ensureInfoLoaded();\n    return _.keyBy(this._rawSheets, 'title');\n  }\n\n  async addSheet(properties = {}) {\n    // Request type = `addSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#AddSheetRequest\n\n    const response = await this._makeSingleUpdateRequest('addSheet', {\n      properties: _.omit(properties, 'headers', 'headerValues'),\n    });\n    // _makeSingleUpdateRequest already adds the sheet\n    const newSheetId = response.properties.sheetId;\n    const newSheet = this.sheetsById[newSheetId];\n\n    // allow it to work with `.headers` but `.headerValues` is the real prop\n    if (properties.headerValues || properties.headers) {\n      await newSheet.setHeaderRow(properties.headerValues || properties.headers);\n    }\n\n    return newSheet;\n  }\n  async addWorksheet(properties) { return this.addSheet(properties); } // alias to mimic old version\n\n  async deleteSheet(sheetId) {\n    // Request type = `deleteSheet`\n    // https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request#DeleteSheetRequest\n    await this._makeSingleUpdateRequest('deleteSheet', { sheetId });\n    delete this._rawSheets[sheetId];\n  }\n\n  // NAMED RANGES //////////////////////////////////////////////////////////////////////////////////\n  async addNamedRange(name, range, namedRangeId) {\n    // namedRangeId is optional\n    return this._makeSingleUpdateRequest('addNamedRange', {\n      name,\n      range,\n      namedRangeId,\n    });\n  }\n\n  async deleteNamedRange(namedRangeId) {\n    return this._makeSingleUpdateRequest('deleteNamedRange', { namedRangeId });\n  }\n\n  // LOADING CELLS /////////////////////////////////////////////////////////////////////////////////\n  async loadCells(filters) {\n    // you can pass in a single filter or an array of filters\n    // strings are treated as a1 ranges\n    // objects are treated as GridRange objects\n    // TODO: make it support DeveloperMetadataLookup objects\n\n    // TODO: switch to this mode if using a read-only auth token?\n    const readOnlyMode = this.authMode === AUTH_MODES.API_KEY;\n\n    const filtersArray = _.isArray(filters) ? filters : [filters];\n    const dataFilters = _.map(filtersArray, (filter) => {\n      if (_.isString(filter)) {\n        return readOnlyMode ? filter : { a1Range: filter };\n      }\n      if (_.isObject(filter)) {\n        if (readOnlyMode) {\n          throw new Error('Only A1 ranges are supported when fetching cells with read-only access (using only an API key)');\n        }\n        // TODO: make this support Developer Metadata filters\n        return { gridRange: filter };\n      }\n      throw new Error('Each filter must be an A1 range string or a gridrange object');\n    });\n\n    let result;\n    // when using an API key only, we must use the regular get endpoint\n    // because :getByDataFilter requires higher access\n    if (this.authMode === AUTH_MODES.API_KEY) {\n      result = await this.axios.get('/', {\n        params: {\n          includeGridData: true,\n          ranges: dataFilters,\n        },\n      });\n    // otherwise we use the getByDataFilter endpoint because it is more flexible\n    } else {\n      result = await this.axios.post(':getByDataFilter', {\n        includeGridData: true,\n        dataFilters,\n      });\n    }\n\n    const { sheets } = result.data;\n    _.each(sheets, (sheet) => { this._updateOrCreateSheet(sheet); });\n  }\n}\n\nmodule.exports = GoogleSpreadsheet;\n","\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleToken = void 0;\nconst fs = require(\"fs\");\nconst gaxios_1 = require(\"gaxios\");\nconst jws = require(\"jws\");\nconst path = require(\"path\");\nconst util_1 = require(\"util\");\nconst readFile = fs.readFile\n    ? util_1.promisify(fs.readFile)\n    : async () => {\n        // if running in the web-browser, fs.readFile may not have been shimmed.\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n    };\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet getPem;\nclass GoogleToken {\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */\n    constructor(options) {\n        this.configure(options);\n    }\n    get accessToken() {\n        return this.rawToken ? this.rawToken.access_token : undefined;\n    }\n    get idToken() {\n        return this.rawToken ? this.rawToken.id_token : undefined;\n    }\n    get tokenType() {\n        return this.rawToken ? this.rawToken.token_type : undefined;\n    }\n    get refreshToken() {\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */\n    hasExpired() {\n        const now = new Date().getTime();\n        if (this.rawToken && this.expiresAt) {\n            return now >= this.expiresAt;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Returns whether the token will expire within eagerRefreshThresholdMillis\n     *\n     * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\n     */\n    isTokenExpiring() {\n        var _a;\n        const now = new Date().getTime();\n        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n        if (this.rawToken && this.expiresAt) {\n            return this.expiresAt <= now + eagerRefreshThresholdMillis;\n        }\n        else {\n            return true;\n        }\n    }\n    getToken(callback, opts = {}) {\n        if (typeof callback === 'object') {\n            opts = callback;\n            callback = undefined;\n        }\n        opts = Object.assign({\n            forceRefresh: false,\n        }, opts);\n        if (callback) {\n            const cb = callback;\n            this.getTokenAsync(opts).then(t => cb(null, t), callback);\n            return;\n        }\n        return this.getTokenAsync(opts);\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n    async getCredentials(keyFile) {\n        const ext = path.extname(keyFile);\n        switch (ext) {\n            case '.json': {\n                const key = await readFile(keyFile, 'utf8');\n                const body = JSON.parse(key);\n                const privateKey = body.private_key;\n                const clientEmail = body.client_email;\n                if (!privateKey || !clientEmail) {\n                    throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n                }\n                return { privateKey, clientEmail };\n            }\n            case '.der':\n            case '.crt':\n            case '.pem': {\n                const privateKey = await readFile(keyFile, 'utf8');\n                return { privateKey };\n            }\n            case '.p12':\n            case '.pfx': {\n                // NOTE:  The loading of `google-p12-pem` is deferred for performance\n                // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n                // bit time to overall module loading, and is likely not frequently\n                // used.  In a future release, p12 support will be entirely removed.\n                if (!getPem) {\n                    getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n                }\n                const privateKey = await getPem(keyFile);\n                return { privateKey };\n            }\n            default:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\n                    'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n        }\n    }\n    async getTokenAsync(opts) {\n        if (this.inFlightRequest && !opts.forceRefresh) {\n            return this.inFlightRequest;\n        }\n        try {\n            return await (this.inFlightRequest = this.getTokenAsyncInner(opts));\n        }\n        finally {\n            this.inFlightRequest = undefined;\n        }\n    }\n    async getTokenAsyncInner(opts) {\n        if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n            return Promise.resolve(this.rawToken);\n        }\n        if (!this.key && !this.keyFile) {\n            throw new Error('No key or keyFile set.');\n        }\n        if (!this.key && this.keyFile) {\n            const creds = await this.getCredentials(this.keyFile);\n            this.key = creds.privateKey;\n            this.iss = creds.clientEmail || this.iss;\n            if (!creds.clientEmail) {\n                this.ensureEmail();\n            }\n        }\n        return this.requestToken();\n    }\n    ensureEmail() {\n        if (!this.iss) {\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            this.revokeTokenAsync().then(() => callback(), callback);\n            return;\n        }\n        return this.revokeTokenAsync();\n    }\n    async revokeTokenAsync() {\n        if (!this.accessToken) {\n            throw new Error('No token to revoke.');\n        }\n        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n        await gaxios_1.request({ url });\n        this.configure({\n            email: this.iss,\n            sub: this.sub,\n            key: this.key,\n            keyFile: this.keyFile,\n            scope: this.scope,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n    configure(options = {}) {\n        this.keyFile = options.keyFile;\n        this.key = options.key;\n        this.rawToken = undefined;\n        this.iss = options.email || options.iss;\n        this.sub = options.sub;\n        this.additionalClaims = options.additionalClaims;\n        if (typeof options.scope === 'object') {\n            this.scope = options.scope.join(' ');\n        }\n        else {\n            this.scope = options.scope;\n        }\n        this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n    }\n    /**\n     * Request the token from Google.\n     */\n    async requestToken() {\n        const iat = Math.floor(new Date().getTime() / 1000);\n        const additionalClaims = this.additionalClaims || {};\n        const payload = Object.assign({\n            iss: this.iss,\n            scope: this.scope,\n            aud: GOOGLE_TOKEN_URL,\n            exp: iat + 3600,\n            iat,\n            sub: this.sub,\n        }, additionalClaims);\n        const signedJWT = jws.sign({\n            header: { alg: 'RS256' },\n            payload,\n            secret: this.key,\n        });\n        try {\n            const r = await gaxios_1.request({\n                method: 'POST',\n                url: GOOGLE_TOKEN_URL,\n                data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT,\n                },\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                responseType: 'json',\n            });\n            this.rawToken = r.data;\n            this.expiresAt =\n                r.data.expires_in === null || r.data.expires_in === undefined\n                    ? undefined\n                    : (iat + r.data.expires_in) * 1000;\n            return this.rawToken;\n        }\n        catch (e) {\n            this.rawToken = undefined;\n            this.tokenExpires = undefined;\n            const body = e.response && e.response.data ? e.response.data : {};\n            if (body.error) {\n                const desc = body.error_description\n                    ? `: ${body.error_description}`\n                    : '';\n                e.message = `${body.error}${desc}`;\n            }\n            throw e;\n        }\n    }\n}\nexports.GoogleToken = GoogleToken;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}